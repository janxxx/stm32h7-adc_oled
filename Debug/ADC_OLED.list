
ADC_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b844  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010fc  0800baf8  0800baf8  0001baf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800cbf4  0800cbf4  0001cbf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800cbf8  0800cbf8  0001cbf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e0  24000000  0800cbfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000006e0  240001e0  0800cddc  000201e0  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240008c0  0800cddc  000208c0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011354  00000000  00000000  00020251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002b66  00000000  00000000  000315a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e08  00000000  00000000  00034110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000a6b  00000000  00000000  00034f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032b99  00000000  00000000  00035983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000149ee  00000000  00000000  0006851c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001464b4  00000000  00000000  0007cf0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000047b0  00000000  00000000  001c33c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000056  00000000  00000000  001c7b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001e0 	.word	0x240001e0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800badc 	.word	0x0800badc

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001e4 	.word	0x240001e4
 80002ec:	0800badc 	.word	0x0800badc

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strlen>:
 8000390:	4603      	mov	r3, r0
 8000392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000396:	2a00      	cmp	r2, #0
 8000398:	d1fb      	bne.n	8000392 <strlen+0x2>
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	3801      	subs	r0, #1
 800039e:	4770      	bx	lr

080003a0 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b088      	sub	sp, #32
 80003a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]
 80003ae:	609a      	str	r2, [r3, #8]
 80003b0:	60da      	str	r2, [r3, #12]
 80003b2:	611a      	str	r2, [r3, #16]
 80003b4:	615a      	str	r2, [r3, #20]
 80003b6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80003b8:	4b29      	ldr	r3, [pc, #164]	; (8000460 <MX_ADC2_Init+0xc0>)
 80003ba:	4a2a      	ldr	r2, [pc, #168]	; (8000464 <MX_ADC2_Init+0xc4>)
 80003bc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80003be:	4b28      	ldr	r3, [pc, #160]	; (8000460 <MX_ADC2_Init+0xc0>)
 80003c0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80003c4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80003c6:	4b26      	ldr	r3, [pc, #152]	; (8000460 <MX_ADC2_Init+0xc0>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003cc:	4b24      	ldr	r3, [pc, #144]	; (8000460 <MX_ADC2_Init+0xc0>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003d2:	4b23      	ldr	r3, [pc, #140]	; (8000460 <MX_ADC2_Init+0xc0>)
 80003d4:	2204      	movs	r2, #4
 80003d6:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80003d8:	4b21      	ldr	r3, [pc, #132]	; (8000460 <MX_ADC2_Init+0xc0>)
 80003da:	2200      	movs	r2, #0
 80003dc:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80003de:	4b20      	ldr	r3, [pc, #128]	; (8000460 <MX_ADC2_Init+0xc0>)
 80003e0:	2201      	movs	r2, #1
 80003e2:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80003e4:	4b1e      	ldr	r3, [pc, #120]	; (8000460 <MX_ADC2_Init+0xc0>)
 80003e6:	2201      	movs	r2, #1
 80003e8:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80003ea:	4b1d      	ldr	r3, [pc, #116]	; (8000460 <MX_ADC2_Init+0xc0>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003f0:	4b1b      	ldr	r3, [pc, #108]	; (8000460 <MX_ADC2_Init+0xc0>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003f6:	4b1a      	ldr	r3, [pc, #104]	; (8000460 <MX_ADC2_Init+0xc0>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80003fc:	4b18      	ldr	r3, [pc, #96]	; (8000460 <MX_ADC2_Init+0xc0>)
 80003fe:	2203      	movs	r2, #3
 8000400:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000402:	4b17      	ldr	r3, [pc, #92]	; (8000460 <MX_ADC2_Init+0xc0>)
 8000404:	2200      	movs	r2, #0
 8000406:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000408:	4b15      	ldr	r3, [pc, #84]	; (8000460 <MX_ADC2_Init+0xc0>)
 800040a:	2200      	movs	r2, #0
 800040c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800040e:	4b14      	ldr	r3, [pc, #80]	; (8000460 <MX_ADC2_Init+0xc0>)
 8000410:	2200      	movs	r2, #0
 8000412:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000416:	4812      	ldr	r0, [pc, #72]	; (8000460 <MX_ADC2_Init+0xc0>)
 8000418:	f001 fa3e 	bl	8001898 <HAL_ADC_Init>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000422:	f000 fa6d 	bl	8000900 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000426:	4b10      	ldr	r3, [pc, #64]	; (8000468 <MX_ADC2_Init+0xc8>)
 8000428:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800042a:	2306      	movs	r3, #6
 800042c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800042e:	2307      	movs	r3, #7
 8000430:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000432:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000436:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000438:	2304      	movs	r3, #4
 800043a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800043c:	2300      	movs	r3, #0
 800043e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000440:	2300      	movs	r3, #0
 8000442:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000444:	1d3b      	adds	r3, r7, #4
 8000446:	4619      	mov	r1, r3
 8000448:	4805      	ldr	r0, [pc, #20]	; (8000460 <MX_ADC2_Init+0xc0>)
 800044a:	f001 fc51 	bl	8001cf0 <HAL_ADC_ConfigChannel>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000454:	f000 fa54 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000458:	bf00      	nop
 800045a:	3720      	adds	r7, #32
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	240001fc 	.word	0x240001fc
 8000464:	40022100 	.word	0x40022100
 8000468:	14f00020 	.word	0x14f00020

0800046c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b0ba      	sub	sp, #232	; 0xe8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000474:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
 800047e:	609a      	str	r2, [r3, #8]
 8000480:	60da      	str	r2, [r3, #12]
 8000482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000484:	f107 0310 	add.w	r3, r7, #16
 8000488:	22c0      	movs	r2, #192	; 0xc0
 800048a:	2100      	movs	r1, #0
 800048c:	4618      	mov	r0, r3
 800048e:	f009 facc 	bl	8009a2a <memset>
  if(adcHandle->Instance==ADC2)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4a43      	ldr	r2, [pc, #268]	; (80005a4 <HAL_ADC_MspInit+0x138>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d17f      	bne.n	800059c <HAL_ADC_MspInit+0x130>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800049c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80004a0:	f04f 0300 	mov.w	r3, #0
 80004a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80004a8:	2304      	movs	r3, #4
 80004aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 80004ac:	2308      	movs	r3, #8
 80004ae:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 8;
 80004b0:	2308      	movs	r3, #8
 80004b2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80004b4:	2302      	movs	r3, #2
 80004b6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80004b8:	2302      	movs	r3, #2
 80004ba:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80004bc:	23c0      	movs	r3, #192	; 0xc0
 80004be:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80004c0:	2300      	movs	r3, #0
 80004c2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80004c4:	2300      	movs	r3, #0
 80004c6:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80004c8:	2300      	movs	r3, #0
 80004ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80004ce:	f107 0310 	add.w	r3, r7, #16
 80004d2:	4618      	mov	r0, r3
 80004d4:	f005 fd2a 	bl	8005f2c <HAL_RCCEx_PeriphCLKConfig>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 80004de:	f000 fa0f 	bl	8000900 <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80004e2:	4b31      	ldr	r3, [pc, #196]	; (80005a8 <HAL_ADC_MspInit+0x13c>)
 80004e4:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80004e8:	4a2f      	ldr	r2, [pc, #188]	; (80005a8 <HAL_ADC_MspInit+0x13c>)
 80004ea:	f043 0320 	orr.w	r3, r3, #32
 80004ee:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80004f2:	4b2d      	ldr	r3, [pc, #180]	; (80005a8 <HAL_ADC_MspInit+0x13c>)
 80004f4:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80004f8:	f003 0320 	and.w	r3, r3, #32
 80004fc:	60fb      	str	r3, [r7, #12]
 80004fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000500:	4b29      	ldr	r3, [pc, #164]	; (80005a8 <HAL_ADC_MspInit+0x13c>)
 8000502:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000506:	4a28      	ldr	r2, [pc, #160]	; (80005a8 <HAL_ADC_MspInit+0x13c>)
 8000508:	f043 0302 	orr.w	r3, r3, #2
 800050c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000510:	4b25      	ldr	r3, [pc, #148]	; (80005a8 <HAL_ADC_MspInit+0x13c>)
 8000512:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000516:	f003 0302 	and.w	r3, r3, #2
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PB1     ------> ADC2_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800051e:	2302      	movs	r3, #2
 8000520:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000524:	2303      	movs	r3, #3
 8000526:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	2300      	movs	r3, #0
 800052c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000530:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000534:	4619      	mov	r1, r3
 8000536:	481d      	ldr	r0, [pc, #116]	; (80005ac <HAL_ADC_MspInit+0x140>)
 8000538:	f004 fb2c 	bl	8004b94 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Stream0;
 800053c:	4b1c      	ldr	r3, [pc, #112]	; (80005b0 <HAL_ADC_MspInit+0x144>)
 800053e:	4a1d      	ldr	r2, [pc, #116]	; (80005b4 <HAL_ADC_MspInit+0x148>)
 8000540:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000542:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <HAL_ADC_MspInit+0x144>)
 8000544:	220a      	movs	r2, #10
 8000546:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000548:	4b19      	ldr	r3, [pc, #100]	; (80005b0 <HAL_ADC_MspInit+0x144>)
 800054a:	2200      	movs	r2, #0
 800054c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800054e:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <HAL_ADC_MspInit+0x144>)
 8000550:	2200      	movs	r2, #0
 8000552:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000554:	4b16      	ldr	r3, [pc, #88]	; (80005b0 <HAL_ADC_MspInit+0x144>)
 8000556:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800055a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800055c:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <HAL_ADC_MspInit+0x144>)
 800055e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000562:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <HAL_ADC_MspInit+0x144>)
 8000566:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800056a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800056c:	4b10      	ldr	r3, [pc, #64]	; (80005b0 <HAL_ADC_MspInit+0x144>)
 800056e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000572:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000574:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <HAL_ADC_MspInit+0x144>)
 8000576:	2200      	movs	r2, #0
 8000578:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800057a:	4b0d      	ldr	r3, [pc, #52]	; (80005b0 <HAL_ADC_MspInit+0x144>)
 800057c:	2200      	movs	r2, #0
 800057e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000580:	480b      	ldr	r0, [pc, #44]	; (80005b0 <HAL_ADC_MspInit+0x144>)
 8000582:	f002 f98d 	bl	80028a0 <HAL_DMA_Init>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <HAL_ADC_MspInit+0x124>
    {
      Error_Handler();
 800058c:	f000 f9b8 	bl	8000900 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <HAL_ADC_MspInit+0x144>)
 8000594:	64da      	str	r2, [r3, #76]	; 0x4c
 8000596:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <HAL_ADC_MspInit+0x144>)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800059c:	bf00      	nop
 800059e:	37e8      	adds	r7, #232	; 0xe8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40022100 	.word	0x40022100
 80005a8:	58024400 	.word	0x58024400
 80005ac:	58020400 	.word	0x58020400
 80005b0:	24000260 	.word	0x24000260
 80005b4:	40020010 	.word	0x40020010

080005b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005be:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <MX_DMA_Init+0x3c>)
 80005c0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80005c4:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <MX_DMA_Init+0x3c>)
 80005c6:	f043 0301 	orr.w	r3, r3, #1
 80005ca:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <MX_DMA_Init+0x3c>)
 80005d0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80005d4:	f003 0301 	and.w	r3, r3, #1
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80005dc:	2200      	movs	r2, #0
 80005de:	2100      	movs	r1, #0
 80005e0:	200b      	movs	r0, #11
 80005e2:	f002 f928 	bl	8002836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80005e6:	200b      	movs	r0, #11
 80005e8:	f002 f93f 	bl	800286a <HAL_NVIC_EnableIRQ>

}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	58024400 	.word	0x58024400

080005f8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
 800060c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	4b2c      	ldr	r3, [pc, #176]	; (80006c0 <MX_GPIO_Init+0xc8>)
 8000610:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000614:	4a2a      	ldr	r2, [pc, #168]	; (80006c0 <MX_GPIO_Init+0xc8>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800061e:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <MX_GPIO_Init+0xc8>)
 8000620:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000624:	f003 0301 	and.w	r3, r3, #1
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062c:	4b24      	ldr	r3, [pc, #144]	; (80006c0 <MX_GPIO_Init+0xc8>)
 800062e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000632:	4a23      	ldr	r2, [pc, #140]	; (80006c0 <MX_GPIO_Init+0xc8>)
 8000634:	f043 0302 	orr.w	r3, r3, #2
 8000638:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800063c:	4b20      	ldr	r3, [pc, #128]	; (80006c0 <MX_GPIO_Init+0xc8>)
 800063e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000642:	f003 0302 	and.w	r3, r3, #2
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800064a:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <MX_GPIO_Init+0xc8>)
 800064c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000650:	4a1b      	ldr	r2, [pc, #108]	; (80006c0 <MX_GPIO_Init+0xc8>)
 8000652:	f043 0308 	orr.w	r3, r3, #8
 8000656:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800065a:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <MX_GPIO_Init+0xc8>)
 800065c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000660:	f003 0308 	and.w	r3, r3, #8
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	2140      	movs	r1, #64	; 0x40
 800066c:	4815      	ldr	r0, [pc, #84]	; (80006c4 <MX_GPIO_Init+0xcc>)
 800066e:	f004 fc41 	bl	8004ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OLED_RESET_Pin|OLED_DC_Pin, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000678:	4813      	ldr	r0, [pc, #76]	; (80006c8 <MX_GPIO_Init+0xd0>)
 800067a:	f004 fc3b 	bl	8004ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 800067e:	2340      	movs	r3, #64	; 0x40
 8000680:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000682:	2301      	movs	r3, #1
 8000684:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068a:	2300      	movs	r3, #0
 800068c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	4619      	mov	r1, r3
 8000694:	480b      	ldr	r0, [pc, #44]	; (80006c4 <MX_GPIO_Init+0xcc>)
 8000696:	f004 fa7d 	bl	8004b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = OLED_RESET_Pin|OLED_DC_Pin;
 800069a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800069e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a0:	2301      	movs	r3, #1
 80006a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	4619      	mov	r1, r3
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_GPIO_Init+0xd0>)
 80006b4:	f004 fa6e 	bl	8004b94 <HAL_GPIO_Init>

}
 80006b8:	bf00      	nop
 80006ba:	3720      	adds	r7, #32
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	58024400 	.word	0x58024400
 80006c4:	58020000 	.word	0x58020000
 80006c8:	58020c00 	.word	0x58020c00

080006cc <RefreshDisplay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void RefreshDisplay(uint16_t data) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08e      	sub	sp, #56	; 0x38
 80006d0:	af02      	add	r7, sp, #8
 80006d2:	4603      	mov	r3, r0
 80006d4:	80fb      	strh	r3, [r7, #6]
	ssd1306_Fill(Black);
 80006d6:	2000      	movs	r0, #0
 80006d8:	f000 fab0 	bl	8000c3c <ssd1306_Fill>

	float R2 = (2150 * data) / (0xFFFF - data); // (R1 * valueADC) / (maxADC - valueADC)
 80006dc:	88fb      	ldrh	r3, [r7, #6]
 80006de:	f640 0266 	movw	r2, #2150	; 0x866
 80006e2:	fb03 f202 	mul.w	r2, r3, r2
 80006e6:	88f9      	ldrh	r1, [r7, #6]
 80006e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006ec:	1a5b      	subs	r3, r3, r1
 80006ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80006f2:	ee07 3a90 	vmov	s15, r3
 80006f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006fa:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float ratio = R2 / 9820; // ratio between R2 and R2max
 80006fe:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000702:	eddf 6a25 	vldr	s13, [pc, #148]	; 8000798 <RefreshDisplay+0xcc>
 8000706:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800070a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	uint8_t stripe_width = ratio * 128;
 800070e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000712:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800079c <RefreshDisplay+0xd0>
 8000716:	ee67 7a87 	vmul.f32	s15, s15, s14
 800071a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800071e:	edc7 7a00 	vstr	s15, [r7]
 8000722:	783b      	ldrb	r3, [r7, #0]
 8000724:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	ssd1306_FillRectangle(0, 0, stripe_width, 15, White);
 8000728:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800072c:	2301      	movs	r3, #1
 800072e:	9300      	str	r3, [sp, #0]
 8000730:	230f      	movs	r3, #15
 8000732:	2100      	movs	r1, #0
 8000734:	2000      	movs	r0, #0
 8000736:	f000 fbdb 	bl	8000ef0 <ssd1306_FillRectangle>

	ssd1306_SetCursor(0, 18);
 800073a:	2112      	movs	r1, #18
 800073c:	2000      	movs	r0, #0
 800073e:	f000 fbbf 	bl	8000ec0 <ssd1306_SetCursor>
	ssd1306_WriteString("Value:", Font_11x18, White);
 8000742:	4a17      	ldr	r2, [pc, #92]	; (80007a0 <RefreshDisplay+0xd4>)
 8000744:	2301      	movs	r3, #1
 8000746:	ca06      	ldmia	r2, {r1, r2}
 8000748:	4816      	ldr	r0, [pc, #88]	; (80007a4 <RefreshDisplay+0xd8>)
 800074a:	f000 fb93 	bl	8000e74 <ssd1306_WriteString>

	ssd1306_SetCursor(0, 36);
 800074e:	2124      	movs	r1, #36	; 0x24
 8000750:	2000      	movs	r0, #0
 8000752:	f000 fbb5 	bl	8000ec0 <ssd1306_SetCursor>
	char message[25];
	sprintf((char*)message, "%d%%", (uint8_t)(ratio * 100));
 8000756:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800075a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80007a8 <RefreshDisplay+0xdc>
 800075e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000762:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000766:	edc7 7a00 	vstr	s15, [r7]
 800076a:	783b      	ldrb	r3, [r7, #0]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	461a      	mov	r2, r3
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	490d      	ldr	r1, [pc, #52]	; (80007ac <RefreshDisplay+0xe0>)
 8000776:	4618      	mov	r0, r3
 8000778:	f009 f8da 	bl	8009930 <siprintf>
	ssd1306_WriteString(message, Font_11x18, White);
 800077c:	4a08      	ldr	r2, [pc, #32]	; (80007a0 <RefreshDisplay+0xd4>)
 800077e:	f107 000c 	add.w	r0, r7, #12
 8000782:	2301      	movs	r3, #1
 8000784:	ca06      	ldmia	r2, {r1, r2}
 8000786:	f000 fb75 	bl	8000e74 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 800078a:	f000 fa6f 	bl	8000c6c <ssd1306_UpdateScreen>
}
 800078e:	bf00      	nop
 8000790:	3730      	adds	r7, #48	; 0x30
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	46197000 	.word	0x46197000
 800079c:	43000000 	.word	0x43000000
 80007a0:	24000000 	.word	0x24000000
 80007a4:	0800baf8 	.word	0x0800baf8
 80007a8:	42c80000 	.word	0x42c80000
 80007ac:	0800bb00 	.word	0x0800bb00

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b4:	f000 fdd2 	bl	800135c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b8:	f000 f82e 	bl	8000818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007bc:	f7ff ff1c 	bl	80005f8 <MX_GPIO_Init>
  MX_DMA_Init();
 80007c0:	f7ff fefa 	bl	80005b8 <MX_DMA_Init>
  MX_SPI1_Init();
 80007c4:	f000 f8a2 	bl	800090c <MX_SPI1_Init>
  MX_ADC2_Init();
 80007c8:	f7ff fdea 	bl	80003a0 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_Init();
 80007cc:	f000 f9cc 	bl	8000b68 <ssd1306_Init>
  ssd1306_SetCursor(0, 18);
 80007d0:	2112      	movs	r1, #18
 80007d2:	2000      	movs	r0, #0
 80007d4:	f000 fb74 	bl	8000ec0 <ssd1306_SetCursor>
  ssd1306_WriteString("Welcome", Font_11x18, White);
 80007d8:	4a0b      	ldr	r2, [pc, #44]	; (8000808 <main+0x58>)
 80007da:	2301      	movs	r3, #1
 80007dc:	ca06      	ldmia	r2, {r1, r2}
 80007de:	480b      	ldr	r0, [pc, #44]	; (800080c <main+0x5c>)
 80007e0:	f000 fb48 	bl	8000e74 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80007e4:	f000 fa42 	bl	8000c6c <ssd1306_UpdateScreen>

  volatile static uint16_t adc_data;
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)&adc_data, 1);
 80007e8:	2201      	movs	r2, #1
 80007ea:	4909      	ldr	r1, [pc, #36]	; (8000810 <main+0x60>)
 80007ec:	4809      	ldr	r0, [pc, #36]	; (8000814 <main+0x64>)
 80007ee:	f001 f9ad 	bl	8001b4c <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	RefreshDisplay(adc_data);
 80007f2:	4b07      	ldr	r3, [pc, #28]	; (8000810 <main+0x60>)
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff67 	bl	80006cc <RefreshDisplay>
	HAL_Delay(20);
 80007fe:	2014      	movs	r0, #20
 8000800:	f000 fe3e 	bl	8001480 <HAL_Delay>
	RefreshDisplay(adc_data);
 8000804:	e7f5      	b.n	80007f2 <main+0x42>
 8000806:	bf00      	nop
 8000808:	24000000 	.word	0x24000000
 800080c:	0800bb08 	.word	0x0800bb08
 8000810:	240002d8 	.word	0x240002d8
 8000814:	240001fc 	.word	0x240001fc

08000818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b09c      	sub	sp, #112	; 0x70
 800081c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000822:	224c      	movs	r2, #76	; 0x4c
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f009 f8ff 	bl	8009a2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	2220      	movs	r2, #32
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f009 f8f9 	bl	8009a2a <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000838:	4b2f      	ldr	r3, [pc, #188]	; (80008f8 <SystemClock_Config+0xe0>)
 800083a:	f04f 32ff 	mov.w	r2, #4294967295
 800083e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000842:	2004      	movs	r0, #4
 8000844:	f004 fb70 	bl	8004f28 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000848:	2300      	movs	r3, #0
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	4b2b      	ldr	r3, [pc, #172]	; (80008fc <SystemClock_Config+0xe4>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	4a2a      	ldr	r2, [pc, #168]	; (80008fc <SystemClock_Config+0xe4>)
 8000852:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000856:	6193      	str	r3, [r2, #24]
 8000858:	4b28      	ldr	r3, [pc, #160]	; (80008fc <SystemClock_Config+0xe4>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000864:	bf00      	nop
 8000866:	4b25      	ldr	r3, [pc, #148]	; (80008fc <SystemClock_Config+0xe4>)
 8000868:	699b      	ldr	r3, [r3, #24]
 800086a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800086e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000872:	d1f8      	bne.n	8000866 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000874:	2302      	movs	r3, #2
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000878:	2301      	movs	r3, #1
 800087a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800087c:	2340      	movs	r3, #64	; 0x40
 800087e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000880:	2302      	movs	r3, #2
 8000882:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000884:	2300      	movs	r3, #0
 8000886:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000888:	2304      	movs	r3, #4
 800088a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 800088c:	230a      	movs	r3, #10
 800088e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000890:	2302      	movs	r3, #2
 8000892:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000894:	2302      	movs	r3, #2
 8000896:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000898:	2302      	movs	r3, #2
 800089a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800089c:	230c      	movs	r3, #12
 800089e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ac:	4618      	mov	r0, r3
 80008ae:	f004 fb95 	bl	8004fdc <HAL_RCC_OscConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80008b8:	f000 f822 	bl	8000900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008bc:	233f      	movs	r3, #63	; 0x3f
 80008be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	2102      	movs	r1, #2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f004 ffad 	bl	8005840 <HAL_RCC_ClockConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80008ec:	f000 f808 	bl	8000900 <Error_Handler>
  }
}
 80008f0:	bf00      	nop
 80008f2:	3770      	adds	r7, #112	; 0x70
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	58024400 	.word	0x58024400
 80008fc:	58024800 	.word	0x58024800

08000900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000904:	b672      	cpsid	i
}
 8000906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000908:	e7fe      	b.n	8000908 <Error_Handler+0x8>
	...

0800090c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000910:	4b28      	ldr	r3, [pc, #160]	; (80009b4 <MX_SPI1_Init+0xa8>)
 8000912:	4a29      	ldr	r2, [pc, #164]	; (80009b8 <MX_SPI1_Init+0xac>)
 8000914:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000916:	4b27      	ldr	r3, [pc, #156]	; (80009b4 <MX_SPI1_Init+0xa8>)
 8000918:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800091c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800091e:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <MX_SPI1_Init+0xa8>)
 8000920:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000924:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000926:	4b23      	ldr	r3, [pc, #140]	; (80009b4 <MX_SPI1_Init+0xa8>)
 8000928:	2207      	movs	r2, #7
 800092a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800092c:	4b21      	ldr	r3, [pc, #132]	; (80009b4 <MX_SPI1_Init+0xa8>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000932:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <MX_SPI1_Init+0xa8>)
 8000934:	2200      	movs	r2, #0
 8000936:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000938:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <MX_SPI1_Init+0xa8>)
 800093a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800093e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000940:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <MX_SPI1_Init+0xa8>)
 8000942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000946:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_SPI1_Init+0xa8>)
 800094a:	2200      	movs	r2, #0
 800094c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800094e:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <MX_SPI1_Init+0xa8>)
 8000950:	2200      	movs	r2, #0
 8000952:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000954:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <MX_SPI1_Init+0xa8>)
 8000956:	2200      	movs	r2, #0
 8000958:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800095a:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <MX_SPI1_Init+0xa8>)
 800095c:	2200      	movs	r2, #0
 800095e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_SPI1_Init+0xa8>)
 8000962:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000966:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <MX_SPI1_Init+0xa8>)
 800096a:	2200      	movs	r2, #0
 800096c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_SPI1_Init+0xa8>)
 8000970:	2200      	movs	r2, #0
 8000972:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_SPI1_Init+0xa8>)
 8000976:	2200      	movs	r2, #0
 8000978:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_SPI1_Init+0xa8>)
 800097c:	2200      	movs	r2, #0
 800097e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_SPI1_Init+0xa8>)
 8000982:	2200      	movs	r2, #0
 8000984:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_SPI1_Init+0xa8>)
 8000988:	2200      	movs	r2, #0
 800098a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_SPI1_Init+0xa8>)
 800098e:	2200      	movs	r2, #0
 8000990:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <MX_SPI1_Init+0xa8>)
 8000994:	2200      	movs	r2, #0
 8000996:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_SPI1_Init+0xa8>)
 800099a:	2200      	movs	r2, #0
 800099c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_SPI1_Init+0xa8>)
 80009a0:	f007 fece 	bl	8008740 <HAL_SPI_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80009aa:	f7ff ffa9 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	240002dc 	.word	0x240002dc
 80009b8:	40013000 	.word	0x40013000

080009bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b0ba      	sub	sp, #232	; 0xe8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009d4:	f107 0310 	add.w	r3, r7, #16
 80009d8:	22c0      	movs	r2, #192	; 0xc0
 80009da:	2100      	movs	r1, #0
 80009dc:	4618      	mov	r0, r3
 80009de:	f009 f824 	bl	8009a2a <memset>
  if(spiHandle->Instance==SPI1)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a26      	ldr	r2, [pc, #152]	; (8000a80 <HAL_SPI_MspInit+0xc4>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d144      	bne.n	8000a76 <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80009ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009f0:	f04f 0300 	mov.w	r3, #0
 80009f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009fc:	f107 0310 	add.w	r3, r7, #16
 8000a00:	4618      	mov	r0, r3
 8000a02:	f005 fa93 	bl	8005f2c <HAL_RCCEx_PeriphCLKConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000a0c:	f7ff ff78 	bl	8000900 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a10:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <HAL_SPI_MspInit+0xc8>)
 8000a12:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000a16:	4a1b      	ldr	r2, [pc, #108]	; (8000a84 <HAL_SPI_MspInit+0xc8>)
 8000a18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a1c:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8000a20:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <HAL_SPI_MspInit+0xc8>)
 8000a22:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000a26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <HAL_SPI_MspInit+0xc8>)
 8000a30:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a34:	4a13      	ldr	r2, [pc, #76]	; (8000a84 <HAL_SPI_MspInit+0xc8>)
 8000a36:	f043 0301 	orr.w	r3, r3, #1
 8000a3a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <HAL_SPI_MspInit+0xc8>)
 8000a40:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000a4c:	23a0      	movs	r3, #160	; 0xa0
 8000a4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a64:	2305      	movs	r3, #5
 8000a66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4805      	ldr	r0, [pc, #20]	; (8000a88 <HAL_SPI_MspInit+0xcc>)
 8000a72:	f004 f88f 	bl	8004b94 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000a76:	bf00      	nop
 8000a78:	37e8      	adds	r7, #232	; 0xe8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40013000 	.word	0x40013000
 8000a84:	58024400 	.word	0x58024400
 8000a88:	58020000 	.word	0x58020000

08000a8c <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8000a90:	2201      	movs	r2, #1
 8000a92:	2140      	movs	r1, #64	; 0x40
 8000a94:	480b      	ldr	r0, [pc, #44]	; (8000ac4 <ssd1306_Reset+0x38>)
 8000a96:	f004 fa2d 	bl	8004ef4 <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aa0:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <ssd1306_Reset+0x3c>)
 8000aa2:	f004 fa27 	bl	8004ef4 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000aa6:	200a      	movs	r0, #10
 8000aa8:	f000 fcea 	bl	8001480 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8000aac:	2201      	movs	r2, #1
 8000aae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <ssd1306_Reset+0x3c>)
 8000ab4:	f004 fa1e 	bl	8004ef4 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000ab8:	200a      	movs	r0, #10
 8000aba:	f000 fce1 	bl	8001480 <HAL_Delay>
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	58020000 	.word	0x58020000
 8000ac8:	58020c00 	.word	0x58020c00

08000acc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2140      	movs	r1, #64	; 0x40
 8000ada:	480c      	ldr	r0, [pc, #48]	; (8000b0c <ssd1306_WriteCommand+0x40>)
 8000adc:	f004 fa0a 	bl	8004ef4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ae6:	480a      	ldr	r0, [pc, #40]	; (8000b10 <ssd1306_WriteCommand+0x44>)
 8000ae8:	f004 fa04 	bl	8004ef4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 8000aec:	1df9      	adds	r1, r7, #7
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295
 8000af2:	2201      	movs	r2, #1
 8000af4:	4807      	ldr	r0, [pc, #28]	; (8000b14 <ssd1306_WriteCommand+0x48>)
 8000af6:	f007 ff47 	bl	8008988 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8000afa:	2201      	movs	r2, #1
 8000afc:	2140      	movs	r1, #64	; 0x40
 8000afe:	4803      	ldr	r0, [pc, #12]	; (8000b0c <ssd1306_WriteCommand+0x40>)
 8000b00:	f004 f9f8 	bl	8004ef4 <HAL_GPIO_WritePin>
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	58020000 	.word	0x58020000
 8000b10:	58020c00 	.word	0x58020c00
 8000b14:	240002dc 	.word	0x240002dc

08000b18 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8000b22:	2200      	movs	r2, #0
 8000b24:	2140      	movs	r1, #64	; 0x40
 8000b26:	480d      	ldr	r0, [pc, #52]	; (8000b5c <ssd1306_WriteData+0x44>)
 8000b28:	f004 f9e4 	bl	8004ef4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b32:	480b      	ldr	r0, [pc, #44]	; (8000b60 <ssd1306_WriteData+0x48>)
 8000b34:	f004 f9de 	bl	8004ef4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b40:	6879      	ldr	r1, [r7, #4]
 8000b42:	4808      	ldr	r0, [pc, #32]	; (8000b64 <ssd1306_WriteData+0x4c>)
 8000b44:	f007 ff20 	bl	8008988 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8000b48:	2201      	movs	r2, #1
 8000b4a:	2140      	movs	r1, #64	; 0x40
 8000b4c:	4803      	ldr	r0, [pc, #12]	; (8000b5c <ssd1306_WriteData+0x44>)
 8000b4e:	f004 f9d1 	bl	8004ef4 <HAL_GPIO_WritePin>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	58020000 	.word	0x58020000
 8000b60:	58020c00 	.word	0x58020c00
 8000b64:	240002dc 	.word	0x240002dc

08000b68 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000b6c:	f7ff ff8e 	bl	8000a8c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000b70:	2064      	movs	r0, #100	; 0x64
 8000b72:	f000 fc85 	bl	8001480 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000b76:	2000      	movs	r0, #0
 8000b78:	f000 fa1c 	bl	8000fb4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000b7c:	2020      	movs	r0, #32
 8000b7e:	f7ff ffa5 	bl	8000acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000b82:	2000      	movs	r0, #0
 8000b84:	f7ff ffa2 	bl	8000acc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000b88:	20b0      	movs	r0, #176	; 0xb0
 8000b8a:	f7ff ff9f 	bl	8000acc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000b8e:	20c8      	movs	r0, #200	; 0xc8
 8000b90:	f7ff ff9c 	bl	8000acc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000b94:	2000      	movs	r0, #0
 8000b96:	f7ff ff99 	bl	8000acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000b9a:	2010      	movs	r0, #16
 8000b9c:	f7ff ff96 	bl	8000acc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000ba0:	2040      	movs	r0, #64	; 0x40
 8000ba2:	f7ff ff93 	bl	8000acc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000ba6:	20ff      	movs	r0, #255	; 0xff
 8000ba8:	f000 f9f0 	bl	8000f8c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000bac:	20a1      	movs	r0, #161	; 0xa1
 8000bae:	f7ff ff8d 	bl	8000acc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000bb2:	20a6      	movs	r0, #166	; 0xa6
 8000bb4:	f7ff ff8a 	bl	8000acc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000bb8:	20a8      	movs	r0, #168	; 0xa8
 8000bba:	f7ff ff87 	bl	8000acc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000bbe:	203f      	movs	r0, #63	; 0x3f
 8000bc0:	f7ff ff84 	bl	8000acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000bc4:	20a4      	movs	r0, #164	; 0xa4
 8000bc6:	f7ff ff81 	bl	8000acc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000bca:	20d3      	movs	r0, #211	; 0xd3
 8000bcc:	f7ff ff7e 	bl	8000acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f7ff ff7b 	bl	8000acc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000bd6:	20d5      	movs	r0, #213	; 0xd5
 8000bd8:	f7ff ff78 	bl	8000acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000bdc:	20f0      	movs	r0, #240	; 0xf0
 8000bde:	f7ff ff75 	bl	8000acc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000be2:	20d9      	movs	r0, #217	; 0xd9
 8000be4:	f7ff ff72 	bl	8000acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000be8:	2022      	movs	r0, #34	; 0x22
 8000bea:	f7ff ff6f 	bl	8000acc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000bee:	20da      	movs	r0, #218	; 0xda
 8000bf0:	f7ff ff6c 	bl	8000acc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000bf4:	2012      	movs	r0, #18
 8000bf6:	f7ff ff69 	bl	8000acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000bfa:	20db      	movs	r0, #219	; 0xdb
 8000bfc:	f7ff ff66 	bl	8000acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000c00:	2020      	movs	r0, #32
 8000c02:	f7ff ff63 	bl	8000acc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000c06:	208d      	movs	r0, #141	; 0x8d
 8000c08:	f7ff ff60 	bl	8000acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000c0c:	2014      	movs	r0, #20
 8000c0e:	f7ff ff5d 	bl	8000acc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000c12:	2001      	movs	r0, #1
 8000c14:	f000 f9ce 	bl	8000fb4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f000 f80f 	bl	8000c3c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000c1e:	f000 f825 	bl	8000c6c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000c22:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <ssd1306_Init+0xd0>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000c28:	4b03      	ldr	r3, [pc, #12]	; (8000c38 <ssd1306_Init+0xd0>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000c2e:	4b02      	ldr	r3, [pc, #8]	; (8000c38 <ssd1306_Init+0xd0>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	711a      	strb	r2, [r3, #4]
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	24000764 	.word	0x24000764

08000c3c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d101      	bne.n	8000c50 <ssd1306_Fill+0x14>
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	e000      	b.n	8000c52 <ssd1306_Fill+0x16>
 8000c50:	23ff      	movs	r3, #255	; 0xff
 8000c52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c56:	4619      	mov	r1, r3
 8000c58:	4803      	ldr	r0, [pc, #12]	; (8000c68 <ssd1306_Fill+0x2c>)
 8000c5a:	f008 fee6 	bl	8009a2a <memset>
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	24000364 	.word	0x24000364

08000c6c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000c72:	2300      	movs	r3, #0
 8000c74:	71fb      	strb	r3, [r7, #7]
 8000c76:	e016      	b.n	8000ca6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	3b50      	subs	r3, #80	; 0x50
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff ff24 	bl	8000acc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000c84:	2000      	movs	r0, #0
 8000c86:	f7ff ff21 	bl	8000acc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000c8a:	2010      	movs	r0, #16
 8000c8c:	f7ff ff1e 	bl	8000acc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	01db      	lsls	r3, r3, #7
 8000c94:	4a08      	ldr	r2, [pc, #32]	; (8000cb8 <ssd1306_UpdateScreen+0x4c>)
 8000c96:	4413      	add	r3, r2
 8000c98:	2180      	movs	r1, #128	; 0x80
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ff3c 	bl	8000b18 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	71fb      	strb	r3, [r7, #7]
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	2b07      	cmp	r3, #7
 8000caa:	d9e5      	bls.n	8000c78 <ssd1306_UpdateScreen+0xc>
    }
}
 8000cac:	bf00      	nop
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	24000364 	.word	0x24000364

08000cbc <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	71bb      	strb	r3, [r7, #6]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	db3d      	blt.n	8000d52 <ssd1306_DrawPixel+0x96>
 8000cd6:	79bb      	ldrb	r3, [r7, #6]
 8000cd8:	2b3f      	cmp	r3, #63	; 0x3f
 8000cda:	d83a      	bhi.n	8000d52 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000cdc:	797b      	ldrb	r3, [r7, #5]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d11a      	bne.n	8000d18 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000ce2:	79fa      	ldrb	r2, [r7, #7]
 8000ce4:	79bb      	ldrb	r3, [r7, #6]
 8000ce6:	08db      	lsrs	r3, r3, #3
 8000ce8:	b2d8      	uxtb	r0, r3
 8000cea:	4603      	mov	r3, r0
 8000cec:	01db      	lsls	r3, r3, #7
 8000cee:	4413      	add	r3, r2
 8000cf0:	4a1b      	ldr	r2, [pc, #108]	; (8000d60 <ssd1306_DrawPixel+0xa4>)
 8000cf2:	5cd3      	ldrb	r3, [r2, r3]
 8000cf4:	b25a      	sxtb	r2, r3
 8000cf6:	79bb      	ldrb	r3, [r7, #6]
 8000cf8:	f003 0307 	and.w	r3, r3, #7
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000d02:	b25b      	sxtb	r3, r3
 8000d04:	4313      	orrs	r3, r2
 8000d06:	b259      	sxtb	r1, r3
 8000d08:	79fa      	ldrb	r2, [r7, #7]
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	01db      	lsls	r3, r3, #7
 8000d0e:	4413      	add	r3, r2
 8000d10:	b2c9      	uxtb	r1, r1
 8000d12:	4a13      	ldr	r2, [pc, #76]	; (8000d60 <ssd1306_DrawPixel+0xa4>)
 8000d14:	54d1      	strb	r1, [r2, r3]
 8000d16:	e01d      	b.n	8000d54 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000d18:	79fa      	ldrb	r2, [r7, #7]
 8000d1a:	79bb      	ldrb	r3, [r7, #6]
 8000d1c:	08db      	lsrs	r3, r3, #3
 8000d1e:	b2d8      	uxtb	r0, r3
 8000d20:	4603      	mov	r3, r0
 8000d22:	01db      	lsls	r3, r3, #7
 8000d24:	4413      	add	r3, r2
 8000d26:	4a0e      	ldr	r2, [pc, #56]	; (8000d60 <ssd1306_DrawPixel+0xa4>)
 8000d28:	5cd3      	ldrb	r3, [r2, r3]
 8000d2a:	b25a      	sxtb	r2, r3
 8000d2c:	79bb      	ldrb	r3, [r7, #6]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	2101      	movs	r1, #1
 8000d34:	fa01 f303 	lsl.w	r3, r1, r3
 8000d38:	b25b      	sxtb	r3, r3
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	b25b      	sxtb	r3, r3
 8000d3e:	4013      	ands	r3, r2
 8000d40:	b259      	sxtb	r1, r3
 8000d42:	79fa      	ldrb	r2, [r7, #7]
 8000d44:	4603      	mov	r3, r0
 8000d46:	01db      	lsls	r3, r3, #7
 8000d48:	4413      	add	r3, r2
 8000d4a:	b2c9      	uxtb	r1, r1
 8000d4c:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <ssd1306_DrawPixel+0xa4>)
 8000d4e:	54d1      	strb	r1, [r2, r3]
 8000d50:	e000      	b.n	8000d54 <ssd1306_DrawPixel+0x98>
        return;
 8000d52:	bf00      	nop
    }
}
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	24000364 	.word	0x24000364

08000d64 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000d64:	b590      	push	{r4, r7, lr}
 8000d66:	b089      	sub	sp, #36	; 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	1d38      	adds	r0, r7, #4
 8000d6e:	e880 0006 	stmia.w	r0, {r1, r2}
 8000d72:	461a      	mov	r2, r3
 8000d74:	4623      	mov	r3, r4
 8000d76:	73fb      	strb	r3, [r7, #15]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	2b1f      	cmp	r3, #31
 8000d80:	d902      	bls.n	8000d88 <ssd1306_WriteChar+0x24>
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
 8000d84:	2b7e      	cmp	r3, #126	; 0x7e
 8000d86:	d901      	bls.n	8000d8c <ssd1306_WriteChar+0x28>
        return 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	e06d      	b.n	8000e68 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000d8c:	4b38      	ldr	r3, [pc, #224]	; (8000e70 <ssd1306_WriteChar+0x10c>)
 8000d8e:	881b      	ldrh	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	793b      	ldrb	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	2b80      	cmp	r3, #128	; 0x80
 8000d98:	dc06      	bgt.n	8000da8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000d9a:	4b35      	ldr	r3, [pc, #212]	; (8000e70 <ssd1306_WriteChar+0x10c>)
 8000d9c:	885b      	ldrh	r3, [r3, #2]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	797b      	ldrb	r3, [r7, #5]
 8000da2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000da4:	2b40      	cmp	r3, #64	; 0x40
 8000da6:	dd01      	ble.n	8000dac <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	e05d      	b.n	8000e68 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
 8000db0:	e04c      	b.n	8000e4c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	3b20      	subs	r3, #32
 8000db8:	7979      	ldrb	r1, [r7, #5]
 8000dba:	fb01 f303 	mul.w	r3, r1, r3
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	440b      	add	r3, r1
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	4413      	add	r3, r2
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61bb      	str	r3, [r7, #24]
 8000dd0:	e034      	b.n	8000e3c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d012      	beq.n	8000e08 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000de2:	4b23      	ldr	r3, [pc, #140]	; (8000e70 <ssd1306_WriteChar+0x10c>)
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	4413      	add	r3, r2
 8000dee:	b2d8      	uxtb	r0, r3
 8000df0:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <ssd1306_WriteChar+0x10c>)
 8000df2:	885b      	ldrh	r3, [r3, #2]
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	4413      	add	r3, r2
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	7bba      	ldrb	r2, [r7, #14]
 8000e00:	4619      	mov	r1, r3
 8000e02:	f7ff ff5b 	bl	8000cbc <ssd1306_DrawPixel>
 8000e06:	e016      	b.n	8000e36 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000e08:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <ssd1306_WriteChar+0x10c>)
 8000e0a:	881b      	ldrh	r3, [r3, #0]
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	4413      	add	r3, r2
 8000e14:	b2d8      	uxtb	r0, r3
 8000e16:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <ssd1306_WriteChar+0x10c>)
 8000e18:	885b      	ldrh	r3, [r3, #2]
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	4413      	add	r3, r2
 8000e22:	b2d9      	uxtb	r1, r3
 8000e24:	7bbb      	ldrb	r3, [r7, #14]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	bf0c      	ite	eq
 8000e2a:	2301      	moveq	r3, #1
 8000e2c:	2300      	movne	r3, #0
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	461a      	mov	r2, r3
 8000e32:	f7ff ff43 	bl	8000cbc <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	61bb      	str	r3, [r7, #24]
 8000e3c:	793b      	ldrb	r3, [r7, #4]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d3c5      	bcc.n	8000dd2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	61fb      	str	r3, [r7, #28]
 8000e4c:	797b      	ldrb	r3, [r7, #5]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d3ad      	bcc.n	8000db2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <ssd1306_WriteChar+0x10c>)
 8000e58:	881a      	ldrh	r2, [r3, #0]
 8000e5a:	793b      	ldrb	r3, [r7, #4]
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	4413      	add	r3, r2
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <ssd1306_WriteChar+0x10c>)
 8000e64:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3724      	adds	r7, #36	; 0x24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd90      	pop	{r4, r7, pc}
 8000e70:	24000764 	.word	0x24000764

08000e74 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	1d38      	adds	r0, r7, #4
 8000e7e:	e880 0006 	stmia.w	r0, {r1, r2}
 8000e82:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8000e84:	e012      	b.n	8000eac <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	7818      	ldrb	r0, [r3, #0]
 8000e8a:	78fb      	ldrb	r3, [r7, #3]
 8000e8c:	1d3a      	adds	r2, r7, #4
 8000e8e:	ca06      	ldmia	r2, {r1, r2}
 8000e90:	f7ff ff68 	bl	8000d64 <ssd1306_WriteChar>
 8000e94:	4603      	mov	r3, r0
 8000e96:	461a      	mov	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d002      	beq.n	8000ea6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	e008      	b.n	8000eb8 <ssd1306_WriteString+0x44>
        }
        str++;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d1e8      	bne.n	8000e86 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	781b      	ldrb	r3, [r3, #0]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	460a      	mov	r2, r1
 8000eca:	71fb      	strb	r3, [r7, #7]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <ssd1306_SetCursor+0x2c>)
 8000ed6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000ed8:	79bb      	ldrb	r3, [r7, #6]
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <ssd1306_SetCursor+0x2c>)
 8000ede:	805a      	strh	r2, [r3, #2]
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	24000764 	.word	0x24000764

08000ef0 <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000ef0:	b590      	push	{r4, r7, lr}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	4608      	mov	r0, r1
 8000efa:	4611      	mov	r1, r2
 8000efc:	461a      	mov	r2, r3
 8000efe:	4623      	mov	r3, r4
 8000f00:	71fb      	strb	r3, [r7, #7]
 8000f02:	4603      	mov	r3, r0
 8000f04:	71bb      	strb	r3, [r7, #6]
 8000f06:	460b      	mov	r3, r1
 8000f08:	717b      	strb	r3, [r7, #5]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8000f0e:	79fa      	ldrb	r2, [r7, #7]
 8000f10:	797b      	ldrb	r3, [r7, #5]
 8000f12:	4293      	cmp	r3, r2
 8000f14:	bf28      	it	cs
 8000f16:	4613      	movcs	r3, r2
 8000f18:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8000f1a:	797a      	ldrb	r2, [r7, #5]
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	bf38      	it	cc
 8000f22:	4613      	movcc	r3, r2
 8000f24:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8000f26:	79ba      	ldrb	r2, [r7, #6]
 8000f28:	793b      	ldrb	r3, [r7, #4]
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	bf28      	it	cs
 8000f2e:	4613      	movcs	r3, r2
 8000f30:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8000f32:	793a      	ldrb	r2, [r7, #4]
 8000f34:	79bb      	ldrb	r3, [r7, #6]
 8000f36:	4293      	cmp	r3, r2
 8000f38:	bf38      	it	cc
 8000f3a:	4613      	movcc	r3, r2
 8000f3c:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8000f3e:	7afb      	ldrb	r3, [r7, #11]
 8000f40:	73fb      	strb	r3, [r7, #15]
 8000f42:	e017      	b.n	8000f74 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8000f44:	7b7b      	ldrb	r3, [r7, #13]
 8000f46:	73bb      	strb	r3, [r7, #14]
 8000f48:	e009      	b.n	8000f5e <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8000f4a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000f4e:	7bf9      	ldrb	r1, [r7, #15]
 8000f50:	7bbb      	ldrb	r3, [r7, #14]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff feb2 	bl	8000cbc <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8000f58:	7bbb      	ldrb	r3, [r7, #14]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	73bb      	strb	r3, [r7, #14]
 8000f5e:	7bba      	ldrb	r2, [r7, #14]
 8000f60:	7b3b      	ldrb	r3, [r7, #12]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d803      	bhi.n	8000f6e <ssd1306_FillRectangle+0x7e>
 8000f66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	daed      	bge.n	8000f4a <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	3301      	adds	r3, #1
 8000f72:	73fb      	strb	r3, [r7, #15]
 8000f74:	7bfa      	ldrb	r2, [r7, #15]
 8000f76:	7abb      	ldrb	r3, [r7, #10]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d803      	bhi.n	8000f84 <ssd1306_FillRectangle+0x94>
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	2b3f      	cmp	r3, #63	; 0x3f
 8000f80:	d9e0      	bls.n	8000f44 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8000f82:	bf00      	nop
 8000f84:	bf00      	nop
}
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd90      	pop	{r4, r7, pc}

08000f8c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000f96:	2381      	movs	r3, #129	; 0x81
 8000f98:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fd95 	bl	8000acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fd91 	bl	8000acc <ssd1306_WriteCommand>
}
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d005      	beq.n	8000fd0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000fc4:	23af      	movs	r3, #175	; 0xaf
 8000fc6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <ssd1306_SetDisplayOn+0x38>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	715a      	strb	r2, [r3, #5]
 8000fce:	e004      	b.n	8000fda <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000fd0:	23ae      	movs	r3, #174	; 0xae
 8000fd2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <ssd1306_SetDisplayOn+0x38>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fd75 	bl	8000acc <ssd1306_WriteCommand>
}
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	24000764 	.word	0x24000764

08000ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <HAL_MspInit+0x30>)
 8000ff8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ffc:	4a08      	ldr	r2, [pc, #32]	; (8001020 <HAL_MspInit+0x30>)
 8000ffe:	f043 0302 	orr.w	r3, r3, #2
 8001002:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_MspInit+0x30>)
 8001008:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	58024400 	.word	0x58024400

08001024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001028:	e7fe      	b.n	8001028 <NMI_Handler+0x4>

0800102a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102e:	e7fe      	b.n	800102e <HardFault_Handler+0x4>

08001030 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001034:	e7fe      	b.n	8001034 <MemManage_Handler+0x4>

08001036 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800103a:	e7fe      	b.n	800103a <BusFault_Handler+0x4>

0800103c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001040:	e7fe      	b.n	8001040 <UsageFault_Handler+0x4>

08001042 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001070:	f000 f9e6 	bl	8001440 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}

08001078 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800107c:	4802      	ldr	r0, [pc, #8]	; (8001088 <DMA1_Stream0_IRQHandler+0x10>)
 800107e:	f002 fa07 	bl	8003490 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	24000260 	.word	0x24000260

0800108c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return 1;
 8001090:	2301      	movs	r3, #1
}
 8001092:	4618      	mov	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <_kill>:

int _kill(int pid, int sig)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010a6:	f008 fd13 	bl	8009ad0 <__errno>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2216      	movs	r2, #22
 80010ae:	601a      	str	r2, [r3, #0]
  return -1;
 80010b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <_exit>:

void _exit (int status)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80010c4:	f04f 31ff 	mov.w	r1, #4294967295
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ffe7 	bl	800109c <_kill>
  while (1) {}    /* Make sure we hang here */
 80010ce:	e7fe      	b.n	80010ce <_exit+0x12>

080010d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	e00a      	b.n	80010f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010e2:	f3af 8000 	nop.w
 80010e6:	4601      	mov	r1, r0
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	1c5a      	adds	r2, r3, #1
 80010ec:	60ba      	str	r2, [r7, #8]
 80010ee:	b2ca      	uxtb	r2, r1
 80010f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	3301      	adds	r3, #1
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	697a      	ldr	r2, [r7, #20]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	dbf0      	blt.n	80010e2 <_read+0x12>
  }

  return len;
 8001100:	687b      	ldr	r3, [r7, #4]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b086      	sub	sp, #24
 800110e:	af00      	add	r7, sp, #0
 8001110:	60f8      	str	r0, [r7, #12]
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
 800111a:	e009      	b.n	8001130 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	1c5a      	adds	r2, r3, #1
 8001120:	60ba      	str	r2, [r7, #8]
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	4618      	mov	r0, r3
 8001126:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	3301      	adds	r3, #1
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	429a      	cmp	r2, r3
 8001136:	dbf1      	blt.n	800111c <_write+0x12>
  }
  return len;
 8001138:	687b      	ldr	r3, [r7, #4]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <_close>:

int _close(int file)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800114a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800114e:	4618      	mov	r0, r3
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
 8001162:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800116a:	605a      	str	r2, [r3, #4]
  return 0;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <_isatty>:

int _isatty(int file)
{
 800117a:	b480      	push	{r7}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001182:	2301      	movs	r3, #1
}
 8001184:	4618      	mov	r0, r3
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b4:	4a14      	ldr	r2, [pc, #80]	; (8001208 <_sbrk+0x5c>)
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <_sbrk+0x60>)
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011c0:	4b13      	ldr	r3, [pc, #76]	; (8001210 <_sbrk+0x64>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d102      	bne.n	80011ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <_sbrk+0x64>)
 80011ca:	4a12      	ldr	r2, [pc, #72]	; (8001214 <_sbrk+0x68>)
 80011cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <_sbrk+0x64>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d207      	bcs.n	80011ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011dc:	f008 fc78 	bl	8009ad0 <__errno>
 80011e0:	4603      	mov	r3, r0
 80011e2:	220c      	movs	r2, #12
 80011e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011e6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ea:	e009      	b.n	8001200 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <_sbrk+0x64>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011f2:	4b07      	ldr	r3, [pc, #28]	; (8001210 <_sbrk+0x64>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4413      	add	r3, r2
 80011fa:	4a05      	ldr	r2, [pc, #20]	; (8001210 <_sbrk+0x64>)
 80011fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011fe:	68fb      	ldr	r3, [r7, #12]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	24100000 	.word	0x24100000
 800120c:	00000400 	.word	0x00000400
 8001210:	2400076c 	.word	0x2400076c
 8001214:	240008c0 	.word	0x240008c0

08001218 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800121c:	4b32      	ldr	r3, [pc, #200]	; (80012e8 <SystemInit+0xd0>)
 800121e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001222:	4a31      	ldr	r2, [pc, #196]	; (80012e8 <SystemInit+0xd0>)
 8001224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800122c:	4b2f      	ldr	r3, [pc, #188]	; (80012ec <SystemInit+0xd4>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 030f 	and.w	r3, r3, #15
 8001234:	2b02      	cmp	r3, #2
 8001236:	d807      	bhi.n	8001248 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001238:	4b2c      	ldr	r3, [pc, #176]	; (80012ec <SystemInit+0xd4>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f023 030f 	bic.w	r3, r3, #15
 8001240:	4a2a      	ldr	r2, [pc, #168]	; (80012ec <SystemInit+0xd4>)
 8001242:	f043 0303 	orr.w	r3, r3, #3
 8001246:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001248:	4b29      	ldr	r3, [pc, #164]	; (80012f0 <SystemInit+0xd8>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a28      	ldr	r2, [pc, #160]	; (80012f0 <SystemInit+0xd8>)
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001254:	4b26      	ldr	r3, [pc, #152]	; (80012f0 <SystemInit+0xd8>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800125a:	4b25      	ldr	r3, [pc, #148]	; (80012f0 <SystemInit+0xd8>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	4924      	ldr	r1, [pc, #144]	; (80012f0 <SystemInit+0xd8>)
 8001260:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <SystemInit+0xdc>)
 8001262:	4013      	ands	r3, r2
 8001264:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001266:	4b21      	ldr	r3, [pc, #132]	; (80012ec <SystemInit+0xd4>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 030c 	and.w	r3, r3, #12
 800126e:	2b00      	cmp	r3, #0
 8001270:	d007      	beq.n	8001282 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001272:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <SystemInit+0xd4>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f023 030f 	bic.w	r3, r3, #15
 800127a:	4a1c      	ldr	r2, [pc, #112]	; (80012ec <SystemInit+0xd4>)
 800127c:	f043 0303 	orr.w	r3, r3, #3
 8001280:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001282:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <SystemInit+0xd8>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001288:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <SystemInit+0xd8>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800128e:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <SystemInit+0xd8>)
 8001290:	2200      	movs	r2, #0
 8001292:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001294:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <SystemInit+0xd8>)
 8001296:	4a18      	ldr	r2, [pc, #96]	; (80012f8 <SystemInit+0xe0>)
 8001298:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <SystemInit+0xd8>)
 800129c:	4a17      	ldr	r2, [pc, #92]	; (80012fc <SystemInit+0xe4>)
 800129e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80012a0:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <SystemInit+0xd8>)
 80012a2:	4a17      	ldr	r2, [pc, #92]	; (8001300 <SystemInit+0xe8>)
 80012a4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <SystemInit+0xd8>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012ac:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <SystemInit+0xd8>)
 80012ae:	4a14      	ldr	r2, [pc, #80]	; (8001300 <SystemInit+0xe8>)
 80012b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <SystemInit+0xd8>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012b8:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <SystemInit+0xd8>)
 80012ba:	4a11      	ldr	r2, [pc, #68]	; (8001300 <SystemInit+0xe8>)
 80012bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <SystemInit+0xd8>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <SystemInit+0xd8>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a09      	ldr	r2, [pc, #36]	; (80012f0 <SystemInit+0xd8>)
 80012ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <SystemInit+0xd8>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <SystemInit+0xec>)
 80012d8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80012dc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00
 80012ec:	52002000 	.word	0x52002000
 80012f0:	58024400 	.word	0x58024400
 80012f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80012f8:	02020200 	.word	0x02020200
 80012fc:	01ff0000 	.word	0x01ff0000
 8001300:	01010280 	.word	0x01010280
 8001304:	52004000 	.word	0x52004000

08001308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001340 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800130c:	f7ff ff84 	bl	8001218 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001310:	480c      	ldr	r0, [pc, #48]	; (8001344 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001312:	490d      	ldr	r1, [pc, #52]	; (8001348 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001314:	4a0d      	ldr	r2, [pc, #52]	; (800134c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001318:	e002      	b.n	8001320 <LoopCopyDataInit>

0800131a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800131a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800131c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800131e:	3304      	adds	r3, #4

08001320 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001324:	d3f9      	bcc.n	800131a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001326:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001328:	4c0a      	ldr	r4, [pc, #40]	; (8001354 <LoopFillZerobss+0x22>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800132c:	e001      	b.n	8001332 <LoopFillZerobss>

0800132e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800132e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001330:	3204      	adds	r2, #4

08001332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001334:	d3fb      	bcc.n	800132e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001336:	f008 fbd1 	bl	8009adc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800133a:	f7ff fa39 	bl	80007b0 <main>
  bx  lr
 800133e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001340:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001344:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001348:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 800134c:	0800cbfc 	.word	0x0800cbfc
  ldr r2, =_sbss
 8001350:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8001354:	240008c0 	.word	0x240008c0

08001358 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001358:	e7fe      	b.n	8001358 <ADC_IRQHandler>
	...

0800135c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001362:	2003      	movs	r0, #3
 8001364:	f001 fa5c 	bl	8002820 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001368:	f004 fc20 	bl	8005bac <HAL_RCC_GetSysClockFreq>
 800136c:	4602      	mov	r2, r0
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <HAL_Init+0x68>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	0a1b      	lsrs	r3, r3, #8
 8001374:	f003 030f 	and.w	r3, r3, #15
 8001378:	4913      	ldr	r1, [pc, #76]	; (80013c8 <HAL_Init+0x6c>)
 800137a:	5ccb      	ldrb	r3, [r1, r3]
 800137c:	f003 031f 	and.w	r3, r3, #31
 8001380:	fa22 f303 	lsr.w	r3, r2, r3
 8001384:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <HAL_Init+0x68>)
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	f003 030f 	and.w	r3, r3, #15
 800138e:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <HAL_Init+0x6c>)
 8001390:	5cd3      	ldrb	r3, [r2, r3]
 8001392:	f003 031f 	and.w	r3, r3, #31
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	fa22 f303 	lsr.w	r3, r2, r3
 800139c:	4a0b      	ldr	r2, [pc, #44]	; (80013cc <HAL_Init+0x70>)
 800139e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013a0:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <HAL_Init+0x74>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013a6:	200f      	movs	r0, #15
 80013a8:	f000 f814 	bl	80013d4 <HAL_InitTick>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e002      	b.n	80013bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013b6:	f7ff fe1b 	bl	8000ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	58024400 	.word	0x58024400
 80013c8:	0800c86c 	.word	0x0800c86c
 80013cc:	2400000c 	.word	0x2400000c
 80013d0:	24000008 	.word	0x24000008

080013d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013dc:	4b15      	ldr	r3, [pc, #84]	; (8001434 <HAL_InitTick+0x60>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e021      	b.n	800142c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <HAL_InitTick+0x64>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <HAL_InitTick+0x60>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	4619      	mov	r1, r3
 80013f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fe:	4618      	mov	r0, r3
 8001400:	f001 fa41 	bl	8002886 <HAL_SYSTICK_Config>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e00e      	b.n	800142c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b0f      	cmp	r3, #15
 8001412:	d80a      	bhi.n	800142a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001414:	2200      	movs	r2, #0
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	f04f 30ff 	mov.w	r0, #4294967295
 800141c:	f001 fa0b 	bl	8002836 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001420:	4a06      	ldr	r2, [pc, #24]	; (800143c <HAL_InitTick+0x68>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001426:	2300      	movs	r3, #0
 8001428:	e000      	b.n	800142c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	24000014 	.word	0x24000014
 8001438:	24000008 	.word	0x24000008
 800143c:	24000010 	.word	0x24000010

08001440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_IncTick+0x20>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_IncTick+0x24>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4413      	add	r3, r2
 8001450:	4a04      	ldr	r2, [pc, #16]	; (8001464 <HAL_IncTick+0x24>)
 8001452:	6013      	str	r3, [r2, #0]
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	24000014 	.word	0x24000014
 8001464:	24000770 	.word	0x24000770

08001468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return uwTick;
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <HAL_GetTick+0x14>)
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	24000770 	.word	0x24000770

08001480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001488:	f7ff ffee 	bl	8001468 <HAL_GetTick>
 800148c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001498:	d005      	beq.n	80014a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <HAL_Delay+0x44>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	461a      	mov	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4413      	add	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014a6:	bf00      	nop
 80014a8:	f7ff ffde 	bl	8001468 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d8f7      	bhi.n	80014a8 <HAL_Delay+0x28>
  {
  }
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	24000014 	.word	0x24000014

080014c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	431a      	orrs	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	609a      	str	r2, [r3, #8]
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
 80014f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	431a      	orrs	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	609a      	str	r2, [r3, #8]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001524:	4618      	mov	r0, r3
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001530:	b480      	push	{r7}
 8001532:	b087      	sub	sp, #28
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
 800153c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	3360      	adds	r3, #96	; 0x60
 8001542:	461a      	mov	r2, r3
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	430b      	orrs	r3, r1
 800155e:	431a      	orrs	r2, r3
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001564:	bf00      	nop
 8001566:	371c      	adds	r7, #28
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	f003 031f 	and.w	r3, r3, #31
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	fa01 f303 	lsl.w	r3, r1, r3
 8001590:	431a      	orrs	r2, r3
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	611a      	str	r2, [r3, #16]
}
 8001596:	bf00      	nop
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b087      	sub	sp, #28
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	60f8      	str	r0, [r7, #12]
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	3360      	adds	r3, #96	; 0x60
 80015b2:	461a      	mov	r2, r3
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	431a      	orrs	r2, r3
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	601a      	str	r2, [r3, #0]
  }
}
 80015cc:	bf00      	nop
 80015ce:	371c      	adds	r7, #28
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d101      	bne.n	80015f0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80015ec:	2301      	movs	r3, #1
 80015ee:	e000      	b.n	80015f2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80015fe:	b480      	push	{r7}
 8001600:	b087      	sub	sp, #28
 8001602:	af00      	add	r7, sp, #0
 8001604:	60f8      	str	r0, [r7, #12]
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	3330      	adds	r3, #48	; 0x30
 800160e:	461a      	mov	r2, r3
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	0a1b      	lsrs	r3, r3, #8
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	f003 030c 	and.w	r3, r3, #12
 800161a:	4413      	add	r3, r2
 800161c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	f003 031f 	and.w	r3, r3, #31
 8001628:	211f      	movs	r1, #31
 800162a:	fa01 f303 	lsl.w	r3, r1, r3
 800162e:	43db      	mvns	r3, r3
 8001630:	401a      	ands	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	0e9b      	lsrs	r3, r3, #26
 8001636:	f003 011f 	and.w	r1, r3, #31
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	f003 031f 	and.w	r3, r3, #31
 8001640:	fa01 f303 	lsl.w	r3, r1, r3
 8001644:	431a      	orrs	r2, r3
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800164a:	bf00      	nop
 800164c:	371c      	adds	r7, #28
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	f023 0203 	bic.w	r2, r3, #3
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	60da      	str	r2, [r3, #12]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800167c:	b480      	push	{r7}
 800167e:	b087      	sub	sp, #28
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	3314      	adds	r3, #20
 800168c:	461a      	mov	r2, r3
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	0e5b      	lsrs	r3, r3, #25
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	4413      	add	r3, r2
 800169a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	0d1b      	lsrs	r3, r3, #20
 80016a4:	f003 031f 	and.w	r3, r3, #31
 80016a8:	2107      	movs	r1, #7
 80016aa:	fa01 f303 	lsl.w	r3, r1, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	401a      	ands	r2, r3
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	0d1b      	lsrs	r3, r3, #20
 80016b6:	f003 031f 	and.w	r3, r3, #31
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	fa01 f303 	lsl.w	r3, r1, r3
 80016c0:	431a      	orrs	r2, r3
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016c6:	bf00      	nop
 80016c8:	371c      	adds	r7, #28
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
	...

080016d4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80016ec:	43db      	mvns	r3, r3
 80016ee:	401a      	ands	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f003 0318 	and.w	r3, r3, #24
 80016f6:	4908      	ldr	r1, [pc, #32]	; (8001718 <LL_ADC_SetChannelSingleDiff+0x44>)
 80016f8:	40d9      	lsrs	r1, r3
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	400b      	ands	r3, r1
 80016fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001702:	431a      	orrs	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800170a:	bf00      	nop
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	000fffff 	.word	0x000fffff

0800171c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f003 031f 	and.w	r3, r3, #31
}
 800172c:	4618      	mov	r0, r3
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	4b04      	ldr	r3, [pc, #16]	; (8001758 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001746:	4013      	ands	r3, r2
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	6093      	str	r3, [r2, #8]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	5fffffc0 	.word	0x5fffffc0

0800175c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800176c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001770:	d101      	bne.n	8001776 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001772:	2301      	movs	r3, #1
 8001774:	e000      	b.n	8001778 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <LL_ADC_EnableInternalRegulator+0x24>)
 8001792:	4013      	ands	r3, r2
 8001794:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	6fffffc0 	.word	0x6fffffc0

080017ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80017c0:	d101      	bne.n	80017c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017c2:	2301      	movs	r3, #1
 80017c4:	e000      	b.n	80017c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <LL_ADC_Enable+0x24>)
 80017e2:	4013      	ands	r3, r2
 80017e4:	f043 0201 	orr.w	r2, r3, #1
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	7fffffc0 	.word	0x7fffffc0

080017fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	2b01      	cmp	r3, #1
 800180e:	d101      	bne.n	8001814 <LL_ADC_IsEnabled+0x18>
 8001810:	2301      	movs	r3, #1
 8001812:	e000      	b.n	8001816 <LL_ADC_IsEnabled+0x1a>
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
	...

08001824 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689a      	ldr	r2, [r3, #8]
 8001830:	4b05      	ldr	r3, [pc, #20]	; (8001848 <LL_ADC_REG_StartConversion+0x24>)
 8001832:	4013      	ands	r3, r2
 8001834:	f043 0204 	orr.w	r2, r3, #4
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	7fffffc0 	.word	0x7fffffc0

0800184c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	2b04      	cmp	r3, #4
 800185e:	d101      	bne.n	8001864 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001860:	2301      	movs	r3, #1
 8001862:	e000      	b.n	8001866 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	2b08      	cmp	r3, #8
 8001884:	d101      	bne.n	800188a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001886:	2301      	movs	r3, #1
 8001888:	e000      	b.n	800188c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001898:	b590      	push	{r4, r7, lr}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e138      	b.n	8001b24 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d109      	bne.n	80018d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7fe fdd3 	bl	800046c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff3f 	bl	800175c <LL_ADC_IsDeepPowerDownEnabled>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d004      	beq.n	80018ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff25 	bl	8001738 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff ff5a 	bl	80017ac <LL_ADC_IsInternalRegulatorEnabled>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d114      	bne.n	8001928 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff ff3e 	bl	8001784 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001908:	4b88      	ldr	r3, [pc, #544]	; (8001b2c <HAL_ADC_Init+0x294>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	099b      	lsrs	r3, r3, #6
 800190e:	4a88      	ldr	r2, [pc, #544]	; (8001b30 <HAL_ADC_Init+0x298>)
 8001910:	fba2 2303 	umull	r2, r3, r2, r3
 8001914:	099b      	lsrs	r3, r3, #6
 8001916:	3301      	adds	r3, #1
 8001918:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800191a:	e002      	b.n	8001922 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	3b01      	subs	r3, #1
 8001920:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1f9      	bne.n	800191c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff3d 	bl	80017ac <LL_ADC_IsInternalRegulatorEnabled>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d10d      	bne.n	8001954 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193c:	f043 0210 	orr.w	r2, r3, #16
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001948:	f043 0201 	orr.w	r2, r3, #1
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff77 	bl	800184c <LL_ADC_REG_IsConversionOngoing>
 800195e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001964:	f003 0310 	and.w	r3, r3, #16
 8001968:	2b00      	cmp	r3, #0
 800196a:	f040 80d2 	bne.w	8001b12 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	2b00      	cmp	r3, #0
 8001972:	f040 80ce 	bne.w	8001b12 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800197e:	f043 0202 	orr.w	r2, r3, #2
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff ff36 	bl	80017fc <LL_ADC_IsEnabled>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d110      	bne.n	80019b8 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001996:	4867      	ldr	r0, [pc, #412]	; (8001b34 <HAL_ADC_Init+0x29c>)
 8001998:	f7ff ff30 	bl	80017fc <LL_ADC_IsEnabled>
 800199c:	4604      	mov	r4, r0
 800199e:	4866      	ldr	r0, [pc, #408]	; (8001b38 <HAL_ADC_Init+0x2a0>)
 80019a0:	f7ff ff2c 	bl	80017fc <LL_ADC_IsEnabled>
 80019a4:	4603      	mov	r3, r0
 80019a6:	4323      	orrs	r3, r4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d105      	bne.n	80019b8 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	4619      	mov	r1, r3
 80019b2:	4862      	ldr	r0, [pc, #392]	; (8001b3c <HAL_ADC_Init+0x2a4>)
 80019b4:	f7ff fd88 	bl	80014c8 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	7d5b      	ldrb	r3, [r3, #21]
 80019bc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019c2:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 80019c8:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	7f1b      	ldrb	r3, [r3, #28]
 80019ce:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	7f1b      	ldrb	r3, [r3, #28]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d106      	bne.n	80019ea <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	3b01      	subs	r3, #1
 80019e2:	045b      	lsls	r3, r3, #17
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d009      	beq.n	8001a06 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fe:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68da      	ldr	r2, [r3, #12]
 8001a0c:	4b4c      	ldr	r3, [pc, #304]	; (8001b40 <HAL_ADC_Init+0x2a8>)
 8001a0e:	4013      	ands	r3, r2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6812      	ldr	r2, [r2, #0]
 8001a14:	69b9      	ldr	r1, [r7, #24]
 8001a16:	430b      	orrs	r3, r1
 8001a18:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff ff14 	bl	800184c <LL_ADC_REG_IsConversionOngoing>
 8001a24:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff ff21 	bl	8001872 <LL_ADC_INJ_IsConversionOngoing>
 8001a30:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d14a      	bne.n	8001ace <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d147      	bne.n	8001ace <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	7d1b      	ldrb	r3, [r3, #20]
 8001a42:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68da      	ldr	r2, [r3, #12]
 8001a52:	4b3c      	ldr	r3, [pc, #240]	; (8001b44 <HAL_ADC_Init+0x2ac>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6812      	ldr	r2, [r2, #0]
 8001a5a:	69b9      	ldr	r1, [r7, #24]
 8001a5c:	430b      	orrs	r3, r1
 8001a5e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d11b      	bne.n	8001aa2 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	691a      	ldr	r2, [r3, #16]
 8001a76:	4b34      	ldr	r3, [pc, #208]	; (8001b48 <HAL_ADC_Init+0x2b0>)
 8001a78:	4013      	ands	r3, r2
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a7e:	3a01      	subs	r2, #1
 8001a80:	0411      	lsls	r1, r2, #16
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a86:	4311      	orrs	r1, r2
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a8c:	4311      	orrs	r1, r2
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a92:	430a      	orrs	r2, r1
 8001a94:	431a      	orrs	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f042 0201 	orr.w	r2, r2, #1
 8001a9e:	611a      	str	r2, [r3, #16]
 8001aa0:	e007      	b.n	8001ab2 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	691a      	ldr	r2, [r3, #16]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 0201 	bic.w	r2, r2, #1
 8001ab0:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 fd0b 	bl	80024e4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d10c      	bne.n	8001af0 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001adc:	f023 010f 	bic.w	r1, r3, #15
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	1e5a      	subs	r2, r3, #1
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	631a      	str	r2, [r3, #48]	; 0x30
 8001aee:	e007      	b.n	8001b00 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 020f 	bic.w	r2, r2, #15
 8001afe:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b04:	f023 0303 	bic.w	r3, r3, #3
 8001b08:	f043 0201 	orr.w	r2, r3, #1
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	655a      	str	r2, [r3, #84]	; 0x54
 8001b10:	e007      	b.n	8001b22 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b16:	f043 0210 	orr.w	r2, r3, #16
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b22:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3724      	adds	r7, #36	; 0x24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd90      	pop	{r4, r7, pc}
 8001b2c:	24000008 	.word	0x24000008
 8001b30:	053e2d63 	.word	0x053e2d63
 8001b34:	40022000 	.word	0x40022000
 8001b38:	40022100 	.word	0x40022100
 8001b3c:	40022300 	.word	0x40022300
 8001b40:	fff0c003 	.word	0xfff0c003
 8001b44:	ffffbffc 	.word	0xffffbffc
 8001b48:	fc00f81e 	.word	0xfc00f81e

08001b4c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b58:	484f      	ldr	r0, [pc, #316]	; (8001c98 <HAL_ADC_Start_DMA+0x14c>)
 8001b5a:	f7ff fddf 	bl	800171c <LL_ADC_GetMultimode>
 8001b5e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fe71 	bl	800184c <LL_ADC_REG_IsConversionOngoing>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f040 808c 	bne.w	8001c8a <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d101      	bne.n	8001b80 <HAL_ADC_Start_DMA+0x34>
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	e087      	b.n	8001c90 <HAL_ADC_Start_DMA+0x144>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d005      	beq.n	8001b9a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	2b05      	cmp	r3, #5
 8001b92:	d002      	beq.n	8001b9a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	2b09      	cmp	r3, #9
 8001b98:	d170      	bne.n	8001c7c <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f000 fb92 	bl	80022c4 <ADC_Enable>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001ba4:	7dfb      	ldrb	r3, [r7, #23]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d163      	bne.n	8001c72 <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001bae:	4b3b      	ldr	r3, [pc, #236]	; (8001c9c <HAL_ADC_Start_DMA+0x150>)
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a38      	ldr	r2, [pc, #224]	; (8001ca0 <HAL_ADC_Start_DMA+0x154>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d002      	beq.n	8001bca <HAL_ADC_Start_DMA+0x7e>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	e000      	b.n	8001bcc <HAL_ADC_Start_DMA+0x80>
 8001bca:	4b36      	ldr	r3, [pc, #216]	; (8001ca4 <HAL_ADC_Start_DMA+0x158>)
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	6812      	ldr	r2, [r2, #0]
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d002      	beq.n	8001bda <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d105      	bne.n	8001be6 <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bde:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d006      	beq.n	8001c00 <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf6:	f023 0206 	bic.w	r2, r3, #6
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	659a      	str	r2, [r3, #88]	; 0x58
 8001bfe:	e002      	b.n	8001c06 <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0a:	4a27      	ldr	r2, [pc, #156]	; (8001ca8 <HAL_ADC_Start_DMA+0x15c>)
 8001c0c:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c12:	4a26      	ldr	r2, [pc, #152]	; (8001cac <HAL_ADC_Start_DMA+0x160>)
 8001c14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1a:	4a25      	ldr	r2, [pc, #148]	; (8001cb0 <HAL_ADC_Start_DMA+0x164>)
 8001c1c:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	221c      	movs	r2, #28
 8001c24:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f042 0210 	orr.w	r2, r2, #16
 8001c3c:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c46:	4619      	mov	r1, r3
 8001c48:	4610      	mov	r0, r2
 8001c4a:	f7ff fd04 	bl	8001656 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	3340      	adds	r3, #64	; 0x40
 8001c58:	4619      	mov	r1, r3
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f001 f9ad 	bl	8002fbc <HAL_DMA_Start_IT>
 8001c62:	4603      	mov	r3, r0
 8001c64:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff fdda 	bl	8001824 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001c70:	e00d      	b.n	8001c8e <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001c7a:	e008      	b.n	8001c8e <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001c88:	e001      	b.n	8001c8e <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40022300 	.word	0x40022300
 8001c9c:	fffff0fe 	.word	0xfffff0fe
 8001ca0:	40022100 	.word	0x40022100
 8001ca4:	40022000 	.word	0x40022000
 8001ca8:	080023bd 	.word	0x080023bd
 8001cac:	08002495 	.word	0x08002495
 8001cb0:	080024b1 	.word	0x080024b1

08001cb4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001cf0:	b590      	push	{r4, r7, lr}
 8001cf2:	b0a1      	sub	sp, #132	; 0x84
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	4a95      	ldr	r2, [pc, #596]	; (8001f60 <HAL_ADC_ConfigChannel+0x270>)
 8001d0a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d101      	bne.n	8001d1a <HAL_ADC_ConfigChannel+0x2a>
 8001d16:	2302      	movs	r3, #2
 8001d18:	e2c0      	b.n	800229c <HAL_ADC_ConfigChannel+0x5ac>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff fd90 	bl	800184c <LL_ADC_REG_IsConversionOngoing>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f040 82a5 	bne.w	800227e <HAL_ADC_ConfigChannel+0x58e>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	db2c      	blt.n	8001d96 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d108      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x6a>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	0e9b      	lsrs	r3, r3, #26
 8001d4e:	f003 031f 	and.w	r3, r3, #31
 8001d52:	2201      	movs	r2, #1
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	e016      	b.n	8001d88 <HAL_ADC_ConfigChannel+0x98>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d62:	fa93 f3a3 	rbit	r3, r3
 8001d66:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d6a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8001d72:	2320      	movs	r3, #32
 8001d74:	e003      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8001d76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d78:	fab3 f383 	clz	r3, r3
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	f003 031f 	and.w	r3, r3, #31
 8001d82:	2201      	movs	r2, #1
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	69d1      	ldr	r1, [r2, #28]
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6812      	ldr	r2, [r2, #0]
 8001d92:	430b      	orrs	r3, r1
 8001d94:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6818      	ldr	r0, [r3, #0]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	6859      	ldr	r1, [r3, #4]
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	f7ff fc2b 	bl	80015fe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff fd4d 	bl	800184c <LL_ADC_REG_IsConversionOngoing>
 8001db2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff fd5a 	bl	8001872 <LL_ADC_INJ_IsConversionOngoing>
 8001dbe:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f040 80a0 	bne.w	8001f08 <HAL_ADC_ConfigChannel+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f040 809c 	bne.w	8001f08 <HAL_ADC_ConfigChannel+0x218>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6818      	ldr	r0, [r3, #0]
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	6819      	ldr	r1, [r3, #0]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	f7ff fc4d 	bl	800167c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	f003 0310 	and.w	r3, r3, #16
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10b      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x118>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	695a      	ldr	r2, [r3, #20]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	089b      	lsrs	r3, r3, #2
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	e00a      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x12e>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	695a      	ldr	r2, [r3, #20]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	089b      	lsrs	r3, r3, #2
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d027      	beq.n	8001e78 <HAL_ADC_ConfigChannel+0x188>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6818      	ldr	r0, [r3, #0]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	6919      	ldr	r1, [r3, #16]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e36:	f7ff fb7b 	bl	8001530 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6818      	ldr	r0, [r3, #0]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	6919      	ldr	r1, [r3, #16]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	7e5b      	ldrb	r3, [r3, #25]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d102      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x160>
 8001e4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001e4e:	e000      	b.n	8001e52 <HAL_ADC_ConfigChannel+0x162>
 8001e50:	2300      	movs	r3, #0
 8001e52:	461a      	mov	r2, r3
 8001e54:	f7ff fba5 	bl	80015a2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6818      	ldr	r0, [r3, #0]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	6919      	ldr	r1, [r3, #16]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	7e1b      	ldrb	r3, [r3, #24]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d102      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x17e>
 8001e68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e6c:	e000      	b.n	8001e70 <HAL_ADC_ConfigChannel+0x180>
 8001e6e:	2300      	movs	r3, #0
 8001e70:	461a      	mov	r2, r3
 8001e72:	f7ff fb7d 	bl	8001570 <LL_ADC_SetDataRightShift>
 8001e76:	e047      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x218>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	069b      	lsls	r3, r3, #26
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d107      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x1ac>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e9a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ea2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	069b      	lsls	r3, r3, #26
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d107      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x1d0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ebe:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ec6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	069b      	lsls	r3, r3, #26
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d107      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x1f4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ee2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001eea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	069b      	lsls	r3, r3, #26
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d107      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x218>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f06:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fc75 	bl	80017fc <LL_ADC_IsEnabled>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f040 81bb 	bne.w	8002290 <HAL_ADC_ConfigChannel+0x5a0>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6818      	ldr	r0, [r3, #0]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	6819      	ldr	r1, [r3, #0]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	461a      	mov	r2, r3
 8001f28:	f7ff fbd4 	bl	80016d4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	4a0b      	ldr	r2, [pc, #44]	; (8001f60 <HAL_ADC_ConfigChannel+0x270>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	f040 8130 	bne.w	8002198 <HAL_ADC_ConfigChannel+0x4a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10d      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x274>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	0e9b      	lsrs	r3, r3, #26
 8001f4e:	3301      	adds	r3, #1
 8001f50:	f003 031f 	and.w	r3, r3, #31
 8001f54:	2b09      	cmp	r3, #9
 8001f56:	bf94      	ite	ls
 8001f58:	2301      	movls	r3, #1
 8001f5a:	2300      	movhi	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	e01b      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x2a8>
 8001f60:	47ff0000 	.word	0x47ff0000
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f6c:	fa93 f3a3 	rbit	r3, r3
 8001f70:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f74:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001f76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x290>
    return 32U;
 8001f7c:	2320      	movs	r3, #32
 8001f7e:	e003      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x298>
  return __builtin_clz(value);
 8001f80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f82:	fab3 f383 	clz	r3, r3
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	3301      	adds	r3, #1
 8001f8a:	f003 031f 	and.w	r3, r3, #31
 8001f8e:	2b09      	cmp	r3, #9
 8001f90:	bf94      	ite	ls
 8001f92:	2301      	movls	r3, #1
 8001f94:	2300      	movhi	r3, #0
 8001f96:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d079      	beq.n	8002090 <HAL_ADC_ConfigChannel+0x3a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d107      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x2c8>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	0e9b      	lsrs	r3, r3, #26
 8001fae:	3301      	adds	r3, #1
 8001fb0:	069b      	lsls	r3, r3, #26
 8001fb2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fb6:	e015      	b.n	8001fe4 <HAL_ADC_ConfigChannel+0x2f4>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fc0:	fa93 f3a3 	rbit	r3, r3
 8001fc4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fc8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_ADC_ConfigChannel+0x2e4>
    return 32U;
 8001fd0:	2320      	movs	r3, #32
 8001fd2:	e003      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x2ec>
  return __builtin_clz(value);
 8001fd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fd6:	fab3 f383 	clz	r3, r3
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	3301      	adds	r3, #1
 8001fde:	069b      	lsls	r3, r3, #26
 8001fe0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d109      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x314>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	0e9b      	lsrs	r3, r3, #26
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	f003 031f 	and.w	r3, r3, #31
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8002002:	e017      	b.n	8002034 <HAL_ADC_ConfigChannel+0x344>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800200c:	fa93 f3a3 	rbit	r3, r3
 8002010:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002014:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 800201c:	2320      	movs	r3, #32
 800201e:	e003      	b.n	8002028 <HAL_ADC_ConfigChannel+0x338>
  return __builtin_clz(value);
 8002020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002022:	fab3 f383 	clz	r3, r3
 8002026:	b2db      	uxtb	r3, r3
 8002028:	3301      	adds	r3, #1
 800202a:	f003 031f 	and.w	r3, r3, #31
 800202e:	2101      	movs	r1, #1
 8002030:	fa01 f303 	lsl.w	r3, r1, r3
 8002034:	ea42 0103 	orr.w	r1, r2, r3
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10a      	bne.n	800205a <HAL_ADC_ConfigChannel+0x36a>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	0e9b      	lsrs	r3, r3, #26
 800204a:	3301      	adds	r3, #1
 800204c:	f003 021f 	and.w	r2, r3, #31
 8002050:	4613      	mov	r3, r2
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4413      	add	r3, r2
 8002056:	051b      	lsls	r3, r3, #20
 8002058:	e018      	b.n	800208c <HAL_ADC_ConfigChannel+0x39c>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002062:	fa93 f3a3 	rbit	r3, r3
 8002066:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800206a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800206c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002072:	2320      	movs	r3, #32
 8002074:	e003      	b.n	800207e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002078:	fab3 f383 	clz	r3, r3
 800207c:	b2db      	uxtb	r3, r3
 800207e:	3301      	adds	r3, #1
 8002080:	f003 021f 	and.w	r2, r3, #31
 8002084:	4613      	mov	r3, r2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	4413      	add	r3, r2
 800208a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800208c:	430b      	orrs	r3, r1
 800208e:	e07e      	b.n	800218e <HAL_ADC_ConfigChannel+0x49e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002098:	2b00      	cmp	r3, #0
 800209a:	d107      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x3bc>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	0e9b      	lsrs	r3, r3, #26
 80020a2:	3301      	adds	r3, #1
 80020a4:	069b      	lsls	r3, r3, #26
 80020a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020aa:	e015      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x3e8>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b4:	fa93 f3a3 	rbit	r3, r3
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80020be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x3d8>
    return 32U;
 80020c4:	2320      	movs	r3, #32
 80020c6:	e003      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x3e0>
  return __builtin_clz(value);
 80020c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ca:	fab3 f383 	clz	r3, r3
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	3301      	adds	r3, #1
 80020d2:	069b      	lsls	r3, r3, #26
 80020d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d109      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x408>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	0e9b      	lsrs	r3, r3, #26
 80020ea:	3301      	adds	r3, #1
 80020ec:	f003 031f 	and.w	r3, r3, #31
 80020f0:	2101      	movs	r1, #1
 80020f2:	fa01 f303 	lsl.w	r3, r1, r3
 80020f6:	e017      	b.n	8002128 <HAL_ADC_ConfigChannel+0x438>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	fa93 f3a3 	rbit	r3, r3
 8002104:	61bb      	str	r3, [r7, #24]
  return result;
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800210a:	6a3b      	ldr	r3, [r7, #32]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x424>
    return 32U;
 8002110:	2320      	movs	r3, #32
 8002112:	e003      	b.n	800211c <HAL_ADC_ConfigChannel+0x42c>
  return __builtin_clz(value);
 8002114:	6a3b      	ldr	r3, [r7, #32]
 8002116:	fab3 f383 	clz	r3, r3
 800211a:	b2db      	uxtb	r3, r3
 800211c:	3301      	adds	r3, #1
 800211e:	f003 031f 	and.w	r3, r3, #31
 8002122:	2101      	movs	r1, #1
 8002124:	fa01 f303 	lsl.w	r3, r1, r3
 8002128:	ea42 0103 	orr.w	r1, r2, r3
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10d      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x464>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	0e9b      	lsrs	r3, r3, #26
 800213e:	3301      	adds	r3, #1
 8002140:	f003 021f 	and.w	r2, r3, #31
 8002144:	4613      	mov	r3, r2
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	4413      	add	r3, r2
 800214a:	3b1e      	subs	r3, #30
 800214c:	051b      	lsls	r3, r3, #20
 800214e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002152:	e01b      	b.n	800218c <HAL_ADC_ConfigChannel+0x49c>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	fa93 f3a3 	rbit	r3, r3
 8002160:	60fb      	str	r3, [r7, #12]
  return result;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 800216c:	2320      	movs	r3, #32
 800216e:	e003      	b.n	8002178 <HAL_ADC_ConfigChannel+0x488>
  return __builtin_clz(value);
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	fab3 f383 	clz	r3, r3
 8002176:	b2db      	uxtb	r3, r3
 8002178:	3301      	adds	r3, #1
 800217a:	f003 021f 	and.w	r2, r3, #31
 800217e:	4613      	mov	r3, r2
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	4413      	add	r3, r2
 8002184:	3b1e      	subs	r3, #30
 8002186:	051b      	lsls	r3, r3, #20
 8002188:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800218c:	430b      	orrs	r3, r1
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	6892      	ldr	r2, [r2, #8]
 8002192:	4619      	mov	r1, r3
 8002194:	f7ff fa72 	bl	800167c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	da77      	bge.n	8002290 <HAL_ADC_ConfigChannel+0x5a0>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021a0:	4840      	ldr	r0, [pc, #256]	; (80022a4 <HAL_ADC_ConfigChannel+0x5b4>)
 80021a2:	f7ff f9b7 	bl	8001514 <LL_ADC_GetCommonPathInternalCh>
 80021a6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021a8:	483f      	ldr	r0, [pc, #252]	; (80022a8 <HAL_ADC_ConfigChannel+0x5b8>)
 80021aa:	f7ff fb27 	bl	80017fc <LL_ADC_IsEnabled>
 80021ae:	4604      	mov	r4, r0
 80021b0:	483e      	ldr	r0, [pc, #248]	; (80022ac <HAL_ADC_ConfigChannel+0x5bc>)
 80021b2:	f7ff fb23 	bl	80017fc <LL_ADC_IsEnabled>
 80021b6:	4603      	mov	r3, r0
 80021b8:	4323      	orrs	r3, r4
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d155      	bne.n	800226a <HAL_ADC_ConfigChannel+0x57a>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a3b      	ldr	r2, [pc, #236]	; (80022b0 <HAL_ADC_ConfigChannel+0x5c0>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d122      	bne.n	800220e <HAL_ADC_ConfigChannel+0x51e>
 80021c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d11d      	bne.n	800220e <HAL_ADC_ConfigChannel+0x51e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a35      	ldr	r2, [pc, #212]	; (80022ac <HAL_ADC_ConfigChannel+0x5bc>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d159      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80021dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021e2:	4619      	mov	r1, r3
 80021e4:	482f      	ldr	r0, [pc, #188]	; (80022a4 <HAL_ADC_ConfigChannel+0x5b4>)
 80021e6:	f7ff f982 	bl	80014ee <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021ea:	4b32      	ldr	r3, [pc, #200]	; (80022b4 <HAL_ADC_ConfigChannel+0x5c4>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	099b      	lsrs	r3, r3, #6
 80021f0:	4a31      	ldr	r2, [pc, #196]	; (80022b8 <HAL_ADC_ConfigChannel+0x5c8>)
 80021f2:	fba2 2303 	umull	r2, r3, r2, r3
 80021f6:	099b      	lsrs	r3, r3, #6
 80021f8:	3301      	adds	r3, #1
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80021fe:	e002      	b.n	8002206 <HAL_ADC_ConfigChannel+0x516>
              {
                wait_loop_index--;
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	3b01      	subs	r3, #1
 8002204:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1f9      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x510>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800220c:	e040      	b.n	8002290 <HAL_ADC_ConfigChannel+0x5a0>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a2a      	ldr	r2, [pc, #168]	; (80022bc <HAL_ADC_ConfigChannel+0x5cc>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d111      	bne.n	800223c <HAL_ADC_ConfigChannel+0x54c>
 8002218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800221a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10c      	bne.n	800223c <HAL_ADC_ConfigChannel+0x54c>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a21      	ldr	r2, [pc, #132]	; (80022ac <HAL_ADC_ConfigChannel+0x5bc>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d131      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800222c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800222e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002232:	4619      	mov	r1, r3
 8002234:	481b      	ldr	r0, [pc, #108]	; (80022a4 <HAL_ADC_ConfigChannel+0x5b4>)
 8002236:	f7ff f95a 	bl	80014ee <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800223a:	e029      	b.n	8002290 <HAL_ADC_ConfigChannel+0x5a0>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a1f      	ldr	r2, [pc, #124]	; (80022c0 <HAL_ADC_ConfigChannel+0x5d0>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d124      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x5a0>
 8002246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002248:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d11f      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x5a0>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a15      	ldr	r2, [pc, #84]	; (80022ac <HAL_ADC_ConfigChannel+0x5bc>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d11a      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800225a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800225c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002260:	4619      	mov	r1, r3
 8002262:	4810      	ldr	r0, [pc, #64]	; (80022a4 <HAL_ADC_ConfigChannel+0x5b4>)
 8002264:	f7ff f943 	bl	80014ee <LL_ADC_SetCommonPathInternalCh>
 8002268:	e012      	b.n	8002290 <HAL_ADC_ConfigChannel+0x5a0>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226e:	f043 0220 	orr.w	r2, r3, #32
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800227c:	e008      	b.n	8002290 <HAL_ADC_ConfigChannel+0x5a0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002282:	f043 0220 	orr.w	r2, r3, #32
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002298:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800229c:	4618      	mov	r0, r3
 800229e:	3784      	adds	r7, #132	; 0x84
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd90      	pop	{r4, r7, pc}
 80022a4:	40022300 	.word	0x40022300
 80022a8:	40022000 	.word	0x40022000
 80022ac:	40022100 	.word	0x40022100
 80022b0:	cb840000 	.word	0xcb840000
 80022b4:	24000008 	.word	0x24000008
 80022b8:	053e2d63 	.word	0x053e2d63
 80022bc:	bac04000 	.word	0xbac04000
 80022c0:	cfb80000 	.word	0xcfb80000

080022c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff fa93 	bl	80017fc <LL_ADC_IsEnabled>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d161      	bne.n	80023a0 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	4b32      	ldr	r3, [pc, #200]	; (80023ac <ADC_Enable+0xe8>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00d      	beq.n	8002306 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ee:	f043 0210 	orr.w	r2, r3, #16
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fa:	f043 0201 	orr.w	r2, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e04d      	b.n	80023a2 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff fa62 	bl	80017d4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002310:	f7ff f8aa 	bl	8001468 <HAL_GetTick>
 8002314:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002316:	4826      	ldr	r0, [pc, #152]	; (80023b0 <ADC_Enable+0xec>)
 8002318:	f7ff fa00 	bl	800171c <LL_ADC_GetMultimode>
 800231c:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a24      	ldr	r2, [pc, #144]	; (80023b4 <ADC_Enable+0xf0>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d002      	beq.n	800232e <ADC_Enable+0x6a>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	e000      	b.n	8002330 <ADC_Enable+0x6c>
 800232e:	4b22      	ldr	r3, [pc, #136]	; (80023b8 <ADC_Enable+0xf4>)
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	4293      	cmp	r3, r2
 8002336:	d02c      	beq.n	8002392 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d130      	bne.n	80023a0 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800233e:	e028      	b.n	8002392 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fa59 	bl	80017fc <LL_ADC_IsEnabled>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d104      	bne.n	800235a <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fa3d 	bl	80017d4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800235a:	f7ff f885 	bl	8001468 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d914      	bls.n	8002392 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b01      	cmp	r3, #1
 8002374:	d00d      	beq.n	8002392 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237a:	f043 0210 	orr.w	r2, r3, #16
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002386:	f043 0201 	orr.w	r2, r3, #1
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e007      	b.n	80023a2 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b01      	cmp	r3, #1
 800239e:	d1cf      	bne.n	8002340 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	8000003f 	.word	0x8000003f
 80023b0:	40022300 	.word	0x40022300
 80023b4:	40022100 	.word	0x40022100
 80023b8:	40022000 	.word	0x40022000

080023bc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d14b      	bne.n	800246e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0308 	and.w	r3, r3, #8
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d021      	beq.n	8002434 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff f8ef 	bl	80015d8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d032      	beq.n	8002466 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d12b      	bne.n	8002466 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002412:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d11f      	bne.n	8002466 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242a:	f043 0201 	orr.w	r2, r3, #1
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	655a      	str	r2, [r3, #84]	; 0x54
 8002432:	e018      	b.n	8002466 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d111      	bne.n	8002466 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002446:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002452:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d105      	bne.n	8002466 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245e:	f043 0201 	orr.w	r2, r3, #1
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f7ff fc24 	bl	8001cb4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800246c:	e00e      	b.n	800248c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002472:	f003 0310 	and.w	r3, r3, #16
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f7ff fc2e 	bl	8001cdc <HAL_ADC_ErrorCallback>
}
 8002480:	e004      	b.n	800248c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	4798      	blx	r3
}
 800248c:	bf00      	nop
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f7ff fc10 	bl	8001cc8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024a8:	bf00      	nop
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024bc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ce:	f043 0204 	orr.w	r2, r3, #4
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f7ff fc00 	bl	8001cdc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024dc:	bf00      	nop
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80024ec:	4b60      	ldr	r3, [pc, #384]	; (8002670 <ADC_ConfigureBoostMode+0x18c>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d01c      	beq.n	8002532 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80024f8:	f003 fcd2 	bl	8005ea0 <HAL_RCC_GetHCLKFreq>
 80024fc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002506:	d010      	beq.n	800252a <ADC_ConfigureBoostMode+0x46>
 8002508:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800250c:	d873      	bhi.n	80025f6 <ADC_ConfigureBoostMode+0x112>
 800250e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002512:	d002      	beq.n	800251a <ADC_ConfigureBoostMode+0x36>
 8002514:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002518:	d16d      	bne.n	80025f6 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	0c1b      	lsrs	r3, r3, #16
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	fbb2 f3f3 	udiv	r3, r2, r3
 8002526:	60fb      	str	r3, [r7, #12]
        break;
 8002528:	e068      	b.n	80025fc <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	089b      	lsrs	r3, r3, #2
 800252e:	60fb      	str	r3, [r7, #12]
        break;
 8002530:	e064      	b.n	80025fc <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002532:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002536:	f04f 0100 	mov.w	r1, #0
 800253a:	f004 feb5 	bl	80072a8 <HAL_RCCEx_GetPeriphCLKFreq>
 800253e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002548:	d051      	beq.n	80025ee <ADC_ConfigureBoostMode+0x10a>
 800254a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800254e:	d854      	bhi.n	80025fa <ADC_ConfigureBoostMode+0x116>
 8002550:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002554:	d047      	beq.n	80025e6 <ADC_ConfigureBoostMode+0x102>
 8002556:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800255a:	d84e      	bhi.n	80025fa <ADC_ConfigureBoostMode+0x116>
 800255c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002560:	d03d      	beq.n	80025de <ADC_ConfigureBoostMode+0xfa>
 8002562:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002566:	d848      	bhi.n	80025fa <ADC_ConfigureBoostMode+0x116>
 8002568:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800256c:	d033      	beq.n	80025d6 <ADC_ConfigureBoostMode+0xf2>
 800256e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002572:	d842      	bhi.n	80025fa <ADC_ConfigureBoostMode+0x116>
 8002574:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002578:	d029      	beq.n	80025ce <ADC_ConfigureBoostMode+0xea>
 800257a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800257e:	d83c      	bhi.n	80025fa <ADC_ConfigureBoostMode+0x116>
 8002580:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002584:	d01a      	beq.n	80025bc <ADC_ConfigureBoostMode+0xd8>
 8002586:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800258a:	d836      	bhi.n	80025fa <ADC_ConfigureBoostMode+0x116>
 800258c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002590:	d014      	beq.n	80025bc <ADC_ConfigureBoostMode+0xd8>
 8002592:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002596:	d830      	bhi.n	80025fa <ADC_ConfigureBoostMode+0x116>
 8002598:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800259c:	d00e      	beq.n	80025bc <ADC_ConfigureBoostMode+0xd8>
 800259e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025a2:	d82a      	bhi.n	80025fa <ADC_ConfigureBoostMode+0x116>
 80025a4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80025a8:	d008      	beq.n	80025bc <ADC_ConfigureBoostMode+0xd8>
 80025aa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80025ae:	d824      	bhi.n	80025fa <ADC_ConfigureBoostMode+0x116>
 80025b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025b4:	d002      	beq.n	80025bc <ADC_ConfigureBoostMode+0xd8>
 80025b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025ba:	d11e      	bne.n	80025fa <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	0c9b      	lsrs	r3, r3, #18
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ca:	60fb      	str	r3, [r7, #12]
        break;
 80025cc:	e016      	b.n	80025fc <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	091b      	lsrs	r3, r3, #4
 80025d2:	60fb      	str	r3, [r7, #12]
        break;
 80025d4:	e012      	b.n	80025fc <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	095b      	lsrs	r3, r3, #5
 80025da:	60fb      	str	r3, [r7, #12]
        break;
 80025dc:	e00e      	b.n	80025fc <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	099b      	lsrs	r3, r3, #6
 80025e2:	60fb      	str	r3, [r7, #12]
        break;
 80025e4:	e00a      	b.n	80025fc <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	09db      	lsrs	r3, r3, #7
 80025ea:	60fb      	str	r3, [r7, #12]
        break;
 80025ec:	e006      	b.n	80025fc <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	0a1b      	lsrs	r3, r3, #8
 80025f2:	60fb      	str	r3, [r7, #12]
        break;
 80025f4:	e002      	b.n	80025fc <ADC_ConfigureBoostMode+0x118>
        break;
 80025f6:	bf00      	nop
 80025f8:	e000      	b.n	80025fc <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 80025fa:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	085b      	lsrs	r3, r3, #1
 8002600:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4a1b      	ldr	r2, [pc, #108]	; (8002674 <ADC_ConfigureBoostMode+0x190>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d808      	bhi.n	800261c <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002618:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800261a:	e025      	b.n	8002668 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4a16      	ldr	r2, [pc, #88]	; (8002678 <ADC_ConfigureBoostMode+0x194>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d80a      	bhi.n	800263a <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002636:	609a      	str	r2, [r3, #8]
}
 8002638:	e016      	b.n	8002668 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	4a0f      	ldr	r2, [pc, #60]	; (800267c <ADC_ConfigureBoostMode+0x198>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d80a      	bhi.n	8002658 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002654:	609a      	str	r2, [r3, #8]
}
 8002656:	e007      	b.n	8002668 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002666:	609a      	str	r2, [r3, #8]
}
 8002668:	bf00      	nop
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40022300 	.word	0x40022300
 8002674:	005f5e10 	.word	0x005f5e10
 8002678:	00bebc20 	.word	0x00bebc20
 800267c:	017d7840 	.word	0x017d7840

08002680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <__NVIC_SetPriorityGrouping+0x40>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800269c:	4013      	ands	r3, r2
 800269e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <__NVIC_SetPriorityGrouping+0x44>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ae:	4a04      	ldr	r2, [pc, #16]	; (80026c0 <__NVIC_SetPriorityGrouping+0x40>)
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	60d3      	str	r3, [r2, #12]
}
 80026b4:	bf00      	nop
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	e000ed00 	.word	0xe000ed00
 80026c4:	05fa0000 	.word	0x05fa0000

080026c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026cc:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <__NVIC_GetPriorityGrouping+0x18>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	0a1b      	lsrs	r3, r3, #8
 80026d2:	f003 0307 	and.w	r3, r3, #7
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	db0b      	blt.n	800270e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026f6:	88fb      	ldrh	r3, [r7, #6]
 80026f8:	f003 021f 	and.w	r2, r3, #31
 80026fc:	4907      	ldr	r1, [pc, #28]	; (800271c <__NVIC_EnableIRQ+0x38>)
 80026fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002702:	095b      	lsrs	r3, r3, #5
 8002704:	2001      	movs	r0, #1
 8002706:	fa00 f202 	lsl.w	r2, r0, r2
 800270a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	e000e100 	.word	0xe000e100

08002720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	6039      	str	r1, [r7, #0]
 800272a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800272c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002730:	2b00      	cmp	r3, #0
 8002732:	db0a      	blt.n	800274a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	b2da      	uxtb	r2, r3
 8002738:	490c      	ldr	r1, [pc, #48]	; (800276c <__NVIC_SetPriority+0x4c>)
 800273a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800273e:	0112      	lsls	r2, r2, #4
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	440b      	add	r3, r1
 8002744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002748:	e00a      	b.n	8002760 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	b2da      	uxtb	r2, r3
 800274e:	4908      	ldr	r1, [pc, #32]	; (8002770 <__NVIC_SetPriority+0x50>)
 8002750:	88fb      	ldrh	r3, [r7, #6]
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	3b04      	subs	r3, #4
 8002758:	0112      	lsls	r2, r2, #4
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	440b      	add	r3, r1
 800275e:	761a      	strb	r2, [r3, #24]
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000e100 	.word	0xe000e100
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002774:	b480      	push	{r7}
 8002776:	b089      	sub	sp, #36	; 0x24
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f1c3 0307 	rsb	r3, r3, #7
 800278e:	2b04      	cmp	r3, #4
 8002790:	bf28      	it	cs
 8002792:	2304      	movcs	r3, #4
 8002794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3304      	adds	r3, #4
 800279a:	2b06      	cmp	r3, #6
 800279c:	d902      	bls.n	80027a4 <NVIC_EncodePriority+0x30>
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3b03      	subs	r3, #3
 80027a2:	e000      	b.n	80027a6 <NVIC_EncodePriority+0x32>
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a8:	f04f 32ff 	mov.w	r2, #4294967295
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43da      	mvns	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	401a      	ands	r2, r3
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027bc:	f04f 31ff 	mov.w	r1, #4294967295
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	fa01 f303 	lsl.w	r3, r1, r3
 80027c6:	43d9      	mvns	r1, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027cc:	4313      	orrs	r3, r2
         );
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3724      	adds	r7, #36	; 0x24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
	...

080027dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027ec:	d301      	bcc.n	80027f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ee:	2301      	movs	r3, #1
 80027f0:	e00f      	b.n	8002812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027f2:	4a0a      	ldr	r2, [pc, #40]	; (800281c <SysTick_Config+0x40>)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027fa:	210f      	movs	r1, #15
 80027fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002800:	f7ff ff8e 	bl	8002720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002804:	4b05      	ldr	r3, [pc, #20]	; (800281c <SysTick_Config+0x40>)
 8002806:	2200      	movs	r2, #0
 8002808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800280a:	4b04      	ldr	r3, [pc, #16]	; (800281c <SysTick_Config+0x40>)
 800280c:	2207      	movs	r2, #7
 800280e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	e000e010 	.word	0xe000e010

08002820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff ff29 	bl	8002680 <__NVIC_SetPriorityGrouping>
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b086      	sub	sp, #24
 800283a:	af00      	add	r7, sp, #0
 800283c:	4603      	mov	r3, r0
 800283e:	60b9      	str	r1, [r7, #8]
 8002840:	607a      	str	r2, [r7, #4]
 8002842:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002844:	f7ff ff40 	bl	80026c8 <__NVIC_GetPriorityGrouping>
 8002848:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	68b9      	ldr	r1, [r7, #8]
 800284e:	6978      	ldr	r0, [r7, #20]
 8002850:	f7ff ff90 	bl	8002774 <NVIC_EncodePriority>
 8002854:	4602      	mov	r2, r0
 8002856:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800285a:	4611      	mov	r1, r2
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff ff5f 	bl	8002720 <__NVIC_SetPriority>
}
 8002862:	bf00      	nop
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b082      	sub	sp, #8
 800286e:	af00      	add	r7, sp, #0
 8002870:	4603      	mov	r3, r0
 8002872:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002874:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff ff33 	bl	80026e4 <__NVIC_EnableIRQ>
}
 800287e:	bf00      	nop
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b082      	sub	sp, #8
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff ffa4 	bl	80027dc <SysTick_Config>
 8002894:	4603      	mov	r3, r0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
	...

080028a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80028a8:	f7fe fdde 	bl	8001468 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e37d      	b.n	8002fb4 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a66      	ldr	r2, [pc, #408]	; (8002a58 <HAL_DMA_Init+0x1b8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d04a      	beq.n	8002958 <HAL_DMA_Init+0xb8>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a65      	ldr	r2, [pc, #404]	; (8002a5c <HAL_DMA_Init+0x1bc>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d045      	beq.n	8002958 <HAL_DMA_Init+0xb8>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a63      	ldr	r2, [pc, #396]	; (8002a60 <HAL_DMA_Init+0x1c0>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d040      	beq.n	8002958 <HAL_DMA_Init+0xb8>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a62      	ldr	r2, [pc, #392]	; (8002a64 <HAL_DMA_Init+0x1c4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d03b      	beq.n	8002958 <HAL_DMA_Init+0xb8>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a60      	ldr	r2, [pc, #384]	; (8002a68 <HAL_DMA_Init+0x1c8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d036      	beq.n	8002958 <HAL_DMA_Init+0xb8>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a5f      	ldr	r2, [pc, #380]	; (8002a6c <HAL_DMA_Init+0x1cc>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d031      	beq.n	8002958 <HAL_DMA_Init+0xb8>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a5d      	ldr	r2, [pc, #372]	; (8002a70 <HAL_DMA_Init+0x1d0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d02c      	beq.n	8002958 <HAL_DMA_Init+0xb8>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a5c      	ldr	r2, [pc, #368]	; (8002a74 <HAL_DMA_Init+0x1d4>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d027      	beq.n	8002958 <HAL_DMA_Init+0xb8>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a5a      	ldr	r2, [pc, #360]	; (8002a78 <HAL_DMA_Init+0x1d8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d022      	beq.n	8002958 <HAL_DMA_Init+0xb8>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a59      	ldr	r2, [pc, #356]	; (8002a7c <HAL_DMA_Init+0x1dc>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d01d      	beq.n	8002958 <HAL_DMA_Init+0xb8>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a57      	ldr	r2, [pc, #348]	; (8002a80 <HAL_DMA_Init+0x1e0>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d018      	beq.n	8002958 <HAL_DMA_Init+0xb8>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a56      	ldr	r2, [pc, #344]	; (8002a84 <HAL_DMA_Init+0x1e4>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d013      	beq.n	8002958 <HAL_DMA_Init+0xb8>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a54      	ldr	r2, [pc, #336]	; (8002a88 <HAL_DMA_Init+0x1e8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00e      	beq.n	8002958 <HAL_DMA_Init+0xb8>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a53      	ldr	r2, [pc, #332]	; (8002a8c <HAL_DMA_Init+0x1ec>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d009      	beq.n	8002958 <HAL_DMA_Init+0xb8>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a51      	ldr	r2, [pc, #324]	; (8002a90 <HAL_DMA_Init+0x1f0>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d004      	beq.n	8002958 <HAL_DMA_Init+0xb8>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a50      	ldr	r2, [pc, #320]	; (8002a94 <HAL_DMA_Init+0x1f4>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d101      	bne.n	800295c <HAL_DMA_Init+0xbc>
 8002958:	2301      	movs	r3, #1
 800295a:	e000      	b.n	800295e <HAL_DMA_Init+0xbe>
 800295c:	2300      	movs	r3, #0
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 813c 	beq.w	8002bdc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2202      	movs	r2, #2
 8002968:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a37      	ldr	r2, [pc, #220]	; (8002a58 <HAL_DMA_Init+0x1b8>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d04a      	beq.n	8002a14 <HAL_DMA_Init+0x174>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a36      	ldr	r2, [pc, #216]	; (8002a5c <HAL_DMA_Init+0x1bc>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d045      	beq.n	8002a14 <HAL_DMA_Init+0x174>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a34      	ldr	r2, [pc, #208]	; (8002a60 <HAL_DMA_Init+0x1c0>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d040      	beq.n	8002a14 <HAL_DMA_Init+0x174>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a33      	ldr	r2, [pc, #204]	; (8002a64 <HAL_DMA_Init+0x1c4>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d03b      	beq.n	8002a14 <HAL_DMA_Init+0x174>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a31      	ldr	r2, [pc, #196]	; (8002a68 <HAL_DMA_Init+0x1c8>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d036      	beq.n	8002a14 <HAL_DMA_Init+0x174>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a30      	ldr	r2, [pc, #192]	; (8002a6c <HAL_DMA_Init+0x1cc>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d031      	beq.n	8002a14 <HAL_DMA_Init+0x174>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a2e      	ldr	r2, [pc, #184]	; (8002a70 <HAL_DMA_Init+0x1d0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d02c      	beq.n	8002a14 <HAL_DMA_Init+0x174>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a2d      	ldr	r2, [pc, #180]	; (8002a74 <HAL_DMA_Init+0x1d4>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d027      	beq.n	8002a14 <HAL_DMA_Init+0x174>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a2b      	ldr	r2, [pc, #172]	; (8002a78 <HAL_DMA_Init+0x1d8>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d022      	beq.n	8002a14 <HAL_DMA_Init+0x174>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a2a      	ldr	r2, [pc, #168]	; (8002a7c <HAL_DMA_Init+0x1dc>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d01d      	beq.n	8002a14 <HAL_DMA_Init+0x174>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a28      	ldr	r2, [pc, #160]	; (8002a80 <HAL_DMA_Init+0x1e0>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d018      	beq.n	8002a14 <HAL_DMA_Init+0x174>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a27      	ldr	r2, [pc, #156]	; (8002a84 <HAL_DMA_Init+0x1e4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d013      	beq.n	8002a14 <HAL_DMA_Init+0x174>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a25      	ldr	r2, [pc, #148]	; (8002a88 <HAL_DMA_Init+0x1e8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d00e      	beq.n	8002a14 <HAL_DMA_Init+0x174>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a24      	ldr	r2, [pc, #144]	; (8002a8c <HAL_DMA_Init+0x1ec>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d009      	beq.n	8002a14 <HAL_DMA_Init+0x174>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a22      	ldr	r2, [pc, #136]	; (8002a90 <HAL_DMA_Init+0x1f0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d004      	beq.n	8002a14 <HAL_DMA_Init+0x174>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a21      	ldr	r2, [pc, #132]	; (8002a94 <HAL_DMA_Init+0x1f4>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d108      	bne.n	8002a26 <HAL_DMA_Init+0x186>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0201 	bic.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	e007      	b.n	8002a36 <HAL_DMA_Init+0x196>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0201 	bic.w	r2, r2, #1
 8002a34:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a36:	e02f      	b.n	8002a98 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a38:	f7fe fd16 	bl	8001468 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b05      	cmp	r3, #5
 8002a44:	d928      	bls.n	8002a98 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2220      	movs	r2, #32
 8002a4a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2203      	movs	r2, #3
 8002a50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e2ad      	b.n	8002fb4 <HAL_DMA_Init+0x714>
 8002a58:	40020010 	.word	0x40020010
 8002a5c:	40020028 	.word	0x40020028
 8002a60:	40020040 	.word	0x40020040
 8002a64:	40020058 	.word	0x40020058
 8002a68:	40020070 	.word	0x40020070
 8002a6c:	40020088 	.word	0x40020088
 8002a70:	400200a0 	.word	0x400200a0
 8002a74:	400200b8 	.word	0x400200b8
 8002a78:	40020410 	.word	0x40020410
 8002a7c:	40020428 	.word	0x40020428
 8002a80:	40020440 	.word	0x40020440
 8002a84:	40020458 	.word	0x40020458
 8002a88:	40020470 	.word	0x40020470
 8002a8c:	40020488 	.word	0x40020488
 8002a90:	400204a0 	.word	0x400204a0
 8002a94:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1c8      	bne.n	8002a38 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	4b73      	ldr	r3, [pc, #460]	; (8002c80 <HAL_DMA_Init+0x3e0>)
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002abe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aca:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	d107      	bne.n	8002afc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af4:	4313      	orrs	r3, r2
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b28      	cmp	r3, #40	; 0x28
 8002b02:	d903      	bls.n	8002b0c <HAL_DMA_Init+0x26c>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b2e      	cmp	r3, #46	; 0x2e
 8002b0a:	d91f      	bls.n	8002b4c <HAL_DMA_Init+0x2ac>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b3e      	cmp	r3, #62	; 0x3e
 8002b12:	d903      	bls.n	8002b1c <HAL_DMA_Init+0x27c>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2b42      	cmp	r3, #66	; 0x42
 8002b1a:	d917      	bls.n	8002b4c <HAL_DMA_Init+0x2ac>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b46      	cmp	r3, #70	; 0x46
 8002b22:	d903      	bls.n	8002b2c <HAL_DMA_Init+0x28c>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b48      	cmp	r3, #72	; 0x48
 8002b2a:	d90f      	bls.n	8002b4c <HAL_DMA_Init+0x2ac>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b4e      	cmp	r3, #78	; 0x4e
 8002b32:	d903      	bls.n	8002b3c <HAL_DMA_Init+0x29c>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b52      	cmp	r3, #82	; 0x52
 8002b3a:	d907      	bls.n	8002b4c <HAL_DMA_Init+0x2ac>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	2b73      	cmp	r3, #115	; 0x73
 8002b42:	d905      	bls.n	8002b50 <HAL_DMA_Init+0x2b0>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b77      	cmp	r3, #119	; 0x77
 8002b4a:	d801      	bhi.n	8002b50 <HAL_DMA_Init+0x2b0>
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e000      	b.n	8002b52 <HAL_DMA_Init+0x2b2>
 8002b50:	2300      	movs	r3, #0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b5c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f023 0307 	bic.w	r3, r3, #7
 8002b74:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d117      	bne.n	8002bb8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00e      	beq.n	8002bb8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f001 fe70 	bl	8004880 <DMA_CheckFifoParam>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d008      	beq.n	8002bb8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2240      	movs	r2, #64	; 0x40
 8002baa:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e1fd      	b.n	8002fb4 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f001 fdab 	bl	800471c <DMA_CalcBaseAndBitshift>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bce:	f003 031f 	and.w	r3, r3, #31
 8002bd2:	223f      	movs	r2, #63	; 0x3f
 8002bd4:	409a      	lsls	r2, r3
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	609a      	str	r2, [r3, #8]
 8002bda:	e0fd      	b.n	8002dd8 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a28      	ldr	r2, [pc, #160]	; (8002c84 <HAL_DMA_Init+0x3e4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d04a      	beq.n	8002c7c <HAL_DMA_Init+0x3dc>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a27      	ldr	r2, [pc, #156]	; (8002c88 <HAL_DMA_Init+0x3e8>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d045      	beq.n	8002c7c <HAL_DMA_Init+0x3dc>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a25      	ldr	r2, [pc, #148]	; (8002c8c <HAL_DMA_Init+0x3ec>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d040      	beq.n	8002c7c <HAL_DMA_Init+0x3dc>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a24      	ldr	r2, [pc, #144]	; (8002c90 <HAL_DMA_Init+0x3f0>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d03b      	beq.n	8002c7c <HAL_DMA_Init+0x3dc>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a22      	ldr	r2, [pc, #136]	; (8002c94 <HAL_DMA_Init+0x3f4>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d036      	beq.n	8002c7c <HAL_DMA_Init+0x3dc>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a21      	ldr	r2, [pc, #132]	; (8002c98 <HAL_DMA_Init+0x3f8>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d031      	beq.n	8002c7c <HAL_DMA_Init+0x3dc>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a1f      	ldr	r2, [pc, #124]	; (8002c9c <HAL_DMA_Init+0x3fc>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d02c      	beq.n	8002c7c <HAL_DMA_Init+0x3dc>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a1e      	ldr	r2, [pc, #120]	; (8002ca0 <HAL_DMA_Init+0x400>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d027      	beq.n	8002c7c <HAL_DMA_Init+0x3dc>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a1c      	ldr	r2, [pc, #112]	; (8002ca4 <HAL_DMA_Init+0x404>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d022      	beq.n	8002c7c <HAL_DMA_Init+0x3dc>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a1b      	ldr	r2, [pc, #108]	; (8002ca8 <HAL_DMA_Init+0x408>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d01d      	beq.n	8002c7c <HAL_DMA_Init+0x3dc>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a19      	ldr	r2, [pc, #100]	; (8002cac <HAL_DMA_Init+0x40c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d018      	beq.n	8002c7c <HAL_DMA_Init+0x3dc>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a18      	ldr	r2, [pc, #96]	; (8002cb0 <HAL_DMA_Init+0x410>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d013      	beq.n	8002c7c <HAL_DMA_Init+0x3dc>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a16      	ldr	r2, [pc, #88]	; (8002cb4 <HAL_DMA_Init+0x414>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d00e      	beq.n	8002c7c <HAL_DMA_Init+0x3dc>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a15      	ldr	r2, [pc, #84]	; (8002cb8 <HAL_DMA_Init+0x418>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d009      	beq.n	8002c7c <HAL_DMA_Init+0x3dc>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a13      	ldr	r2, [pc, #76]	; (8002cbc <HAL_DMA_Init+0x41c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d004      	beq.n	8002c7c <HAL_DMA_Init+0x3dc>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a12      	ldr	r2, [pc, #72]	; (8002cc0 <HAL_DMA_Init+0x420>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d123      	bne.n	8002cc4 <HAL_DMA_Init+0x424>
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e022      	b.n	8002cc6 <HAL_DMA_Init+0x426>
 8002c80:	fe10803f 	.word	0xfe10803f
 8002c84:	48022c08 	.word	0x48022c08
 8002c88:	48022c1c 	.word	0x48022c1c
 8002c8c:	48022c30 	.word	0x48022c30
 8002c90:	48022c44 	.word	0x48022c44
 8002c94:	48022c58 	.word	0x48022c58
 8002c98:	48022c6c 	.word	0x48022c6c
 8002c9c:	48022c80 	.word	0x48022c80
 8002ca0:	48022c94 	.word	0x48022c94
 8002ca4:	58025408 	.word	0x58025408
 8002ca8:	5802541c 	.word	0x5802541c
 8002cac:	58025430 	.word	0x58025430
 8002cb0:	58025444 	.word	0x58025444
 8002cb4:	58025458 	.word	0x58025458
 8002cb8:	5802546c 	.word	0x5802546c
 8002cbc:	58025480 	.word	0x58025480
 8002cc0:	58025494 	.word	0x58025494
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d07d      	beq.n	8002dc6 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a7f      	ldr	r2, [pc, #508]	; (8002ecc <HAL_DMA_Init+0x62c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d021      	beq.n	8002d18 <HAL_DMA_Init+0x478>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a7d      	ldr	r2, [pc, #500]	; (8002ed0 <HAL_DMA_Init+0x630>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d01c      	beq.n	8002d18 <HAL_DMA_Init+0x478>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a7c      	ldr	r2, [pc, #496]	; (8002ed4 <HAL_DMA_Init+0x634>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d017      	beq.n	8002d18 <HAL_DMA_Init+0x478>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a7a      	ldr	r2, [pc, #488]	; (8002ed8 <HAL_DMA_Init+0x638>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d012      	beq.n	8002d18 <HAL_DMA_Init+0x478>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a79      	ldr	r2, [pc, #484]	; (8002edc <HAL_DMA_Init+0x63c>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d00d      	beq.n	8002d18 <HAL_DMA_Init+0x478>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a77      	ldr	r2, [pc, #476]	; (8002ee0 <HAL_DMA_Init+0x640>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d008      	beq.n	8002d18 <HAL_DMA_Init+0x478>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a76      	ldr	r2, [pc, #472]	; (8002ee4 <HAL_DMA_Init+0x644>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d003      	beq.n	8002d18 <HAL_DMA_Init+0x478>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a74      	ldr	r2, [pc, #464]	; (8002ee8 <HAL_DMA_Init+0x648>)
 8002d16:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	4b6e      	ldr	r3, [pc, #440]	; (8002eec <HAL_DMA_Init+0x64c>)
 8002d34:	4013      	ands	r3, r2
 8002d36:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	2b40      	cmp	r3, #64	; 0x40
 8002d3e:	d008      	beq.n	8002d52 <HAL_DMA_Init+0x4b2>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2b80      	cmp	r3, #128	; 0x80
 8002d46:	d102      	bne.n	8002d4e <HAL_DMA_Init+0x4ae>
 8002d48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d4c:	e002      	b.n	8002d54 <HAL_DMA_Init+0x4b4>
 8002d4e:	2300      	movs	r3, #0
 8002d50:	e000      	b.n	8002d54 <HAL_DMA_Init+0x4b4>
 8002d52:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	68d2      	ldr	r2, [r2, #12]
 8002d58:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d5a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002d62:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002d6a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002d72:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002d7a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002d82:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	4b55      	ldr	r3, [pc, #340]	; (8002ef0 <HAL_DMA_Init+0x650>)
 8002d9a:	4413      	add	r3, r2
 8002d9c:	4a55      	ldr	r2, [pc, #340]	; (8002ef4 <HAL_DMA_Init+0x654>)
 8002d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002da2:	091b      	lsrs	r3, r3, #4
 8002da4:	009a      	lsls	r2, r3, #2
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f001 fcb6 	bl	800471c <DMA_CalcBaseAndBitshift>
 8002db0:	4603      	mov	r3, r0
 8002db2:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db8:	f003 031f 	and.w	r3, r3, #31
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	409a      	lsls	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	605a      	str	r2, [r3, #4]
 8002dc4:	e008      	b.n	8002dd8 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2240      	movs	r2, #64	; 0x40
 8002dca:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2203      	movs	r2, #3
 8002dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e0ed      	b.n	8002fb4 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a46      	ldr	r2, [pc, #280]	; (8002ef8 <HAL_DMA_Init+0x658>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d072      	beq.n	8002ec8 <HAL_DMA_Init+0x628>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a45      	ldr	r2, [pc, #276]	; (8002efc <HAL_DMA_Init+0x65c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d06d      	beq.n	8002ec8 <HAL_DMA_Init+0x628>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a43      	ldr	r2, [pc, #268]	; (8002f00 <HAL_DMA_Init+0x660>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d068      	beq.n	8002ec8 <HAL_DMA_Init+0x628>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a42      	ldr	r2, [pc, #264]	; (8002f04 <HAL_DMA_Init+0x664>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d063      	beq.n	8002ec8 <HAL_DMA_Init+0x628>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a40      	ldr	r2, [pc, #256]	; (8002f08 <HAL_DMA_Init+0x668>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d05e      	beq.n	8002ec8 <HAL_DMA_Init+0x628>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a3f      	ldr	r2, [pc, #252]	; (8002f0c <HAL_DMA_Init+0x66c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d059      	beq.n	8002ec8 <HAL_DMA_Init+0x628>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a3d      	ldr	r2, [pc, #244]	; (8002f10 <HAL_DMA_Init+0x670>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d054      	beq.n	8002ec8 <HAL_DMA_Init+0x628>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a3c      	ldr	r2, [pc, #240]	; (8002f14 <HAL_DMA_Init+0x674>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d04f      	beq.n	8002ec8 <HAL_DMA_Init+0x628>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a3a      	ldr	r2, [pc, #232]	; (8002f18 <HAL_DMA_Init+0x678>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d04a      	beq.n	8002ec8 <HAL_DMA_Init+0x628>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a39      	ldr	r2, [pc, #228]	; (8002f1c <HAL_DMA_Init+0x67c>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d045      	beq.n	8002ec8 <HAL_DMA_Init+0x628>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a37      	ldr	r2, [pc, #220]	; (8002f20 <HAL_DMA_Init+0x680>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d040      	beq.n	8002ec8 <HAL_DMA_Init+0x628>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a36      	ldr	r2, [pc, #216]	; (8002f24 <HAL_DMA_Init+0x684>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d03b      	beq.n	8002ec8 <HAL_DMA_Init+0x628>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a34      	ldr	r2, [pc, #208]	; (8002f28 <HAL_DMA_Init+0x688>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d036      	beq.n	8002ec8 <HAL_DMA_Init+0x628>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a33      	ldr	r2, [pc, #204]	; (8002f2c <HAL_DMA_Init+0x68c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d031      	beq.n	8002ec8 <HAL_DMA_Init+0x628>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a31      	ldr	r2, [pc, #196]	; (8002f30 <HAL_DMA_Init+0x690>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d02c      	beq.n	8002ec8 <HAL_DMA_Init+0x628>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a30      	ldr	r2, [pc, #192]	; (8002f34 <HAL_DMA_Init+0x694>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d027      	beq.n	8002ec8 <HAL_DMA_Init+0x628>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a13      	ldr	r2, [pc, #76]	; (8002ecc <HAL_DMA_Init+0x62c>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d022      	beq.n	8002ec8 <HAL_DMA_Init+0x628>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a12      	ldr	r2, [pc, #72]	; (8002ed0 <HAL_DMA_Init+0x630>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d01d      	beq.n	8002ec8 <HAL_DMA_Init+0x628>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a10      	ldr	r2, [pc, #64]	; (8002ed4 <HAL_DMA_Init+0x634>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d018      	beq.n	8002ec8 <HAL_DMA_Init+0x628>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a0f      	ldr	r2, [pc, #60]	; (8002ed8 <HAL_DMA_Init+0x638>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d013      	beq.n	8002ec8 <HAL_DMA_Init+0x628>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a0d      	ldr	r2, [pc, #52]	; (8002edc <HAL_DMA_Init+0x63c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d00e      	beq.n	8002ec8 <HAL_DMA_Init+0x628>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a0c      	ldr	r2, [pc, #48]	; (8002ee0 <HAL_DMA_Init+0x640>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d009      	beq.n	8002ec8 <HAL_DMA_Init+0x628>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a0a      	ldr	r2, [pc, #40]	; (8002ee4 <HAL_DMA_Init+0x644>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d004      	beq.n	8002ec8 <HAL_DMA_Init+0x628>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a09      	ldr	r2, [pc, #36]	; (8002ee8 <HAL_DMA_Init+0x648>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d137      	bne.n	8002f38 <HAL_DMA_Init+0x698>
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e036      	b.n	8002f3a <HAL_DMA_Init+0x69a>
 8002ecc:	58025408 	.word	0x58025408
 8002ed0:	5802541c 	.word	0x5802541c
 8002ed4:	58025430 	.word	0x58025430
 8002ed8:	58025444 	.word	0x58025444
 8002edc:	58025458 	.word	0x58025458
 8002ee0:	5802546c 	.word	0x5802546c
 8002ee4:	58025480 	.word	0x58025480
 8002ee8:	58025494 	.word	0x58025494
 8002eec:	fffe000f 	.word	0xfffe000f
 8002ef0:	a7fdabf8 	.word	0xa7fdabf8
 8002ef4:	cccccccd 	.word	0xcccccccd
 8002ef8:	40020010 	.word	0x40020010
 8002efc:	40020028 	.word	0x40020028
 8002f00:	40020040 	.word	0x40020040
 8002f04:	40020058 	.word	0x40020058
 8002f08:	40020070 	.word	0x40020070
 8002f0c:	40020088 	.word	0x40020088
 8002f10:	400200a0 	.word	0x400200a0
 8002f14:	400200b8 	.word	0x400200b8
 8002f18:	40020410 	.word	0x40020410
 8002f1c:	40020428 	.word	0x40020428
 8002f20:	40020440 	.word	0x40020440
 8002f24:	40020458 	.word	0x40020458
 8002f28:	40020470 	.word	0x40020470
 8002f2c:	40020488 	.word	0x40020488
 8002f30:	400204a0 	.word	0x400204a0
 8002f34:	400204b8 	.word	0x400204b8
 8002f38:	2300      	movs	r3, #0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d032      	beq.n	8002fa4 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f001 fd1a 	bl	8004978 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	2b80      	cmp	r3, #128	; 0x80
 8002f4a:	d102      	bne.n	8002f52 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002f66:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d010      	beq.n	8002f92 <HAL_DMA_Init+0x6f2>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d80c      	bhi.n	8002f92 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f001 fd97 	bl	8004aac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002f8e:	605a      	str	r2, [r3, #4]
 8002f90:	e008      	b.n	8002fa4 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
 8002fc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e226      	b.n	8003426 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d101      	bne.n	8002fe6 <HAL_DMA_Start_IT+0x2a>
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	e21f      	b.n	8003426 <HAL_DMA_Start_IT+0x46a>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	f040 820a 	bne.w	8003410 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2202      	movs	r2, #2
 8003000:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a68      	ldr	r2, [pc, #416]	; (80031b0 <HAL_DMA_Start_IT+0x1f4>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d04a      	beq.n	80030aa <HAL_DMA_Start_IT+0xee>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a66      	ldr	r2, [pc, #408]	; (80031b4 <HAL_DMA_Start_IT+0x1f8>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d045      	beq.n	80030aa <HAL_DMA_Start_IT+0xee>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a65      	ldr	r2, [pc, #404]	; (80031b8 <HAL_DMA_Start_IT+0x1fc>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d040      	beq.n	80030aa <HAL_DMA_Start_IT+0xee>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a63      	ldr	r2, [pc, #396]	; (80031bc <HAL_DMA_Start_IT+0x200>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d03b      	beq.n	80030aa <HAL_DMA_Start_IT+0xee>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a62      	ldr	r2, [pc, #392]	; (80031c0 <HAL_DMA_Start_IT+0x204>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d036      	beq.n	80030aa <HAL_DMA_Start_IT+0xee>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a60      	ldr	r2, [pc, #384]	; (80031c4 <HAL_DMA_Start_IT+0x208>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d031      	beq.n	80030aa <HAL_DMA_Start_IT+0xee>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a5f      	ldr	r2, [pc, #380]	; (80031c8 <HAL_DMA_Start_IT+0x20c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d02c      	beq.n	80030aa <HAL_DMA_Start_IT+0xee>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a5d      	ldr	r2, [pc, #372]	; (80031cc <HAL_DMA_Start_IT+0x210>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d027      	beq.n	80030aa <HAL_DMA_Start_IT+0xee>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a5c      	ldr	r2, [pc, #368]	; (80031d0 <HAL_DMA_Start_IT+0x214>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d022      	beq.n	80030aa <HAL_DMA_Start_IT+0xee>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a5a      	ldr	r2, [pc, #360]	; (80031d4 <HAL_DMA_Start_IT+0x218>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d01d      	beq.n	80030aa <HAL_DMA_Start_IT+0xee>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a59      	ldr	r2, [pc, #356]	; (80031d8 <HAL_DMA_Start_IT+0x21c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d018      	beq.n	80030aa <HAL_DMA_Start_IT+0xee>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a57      	ldr	r2, [pc, #348]	; (80031dc <HAL_DMA_Start_IT+0x220>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d013      	beq.n	80030aa <HAL_DMA_Start_IT+0xee>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a56      	ldr	r2, [pc, #344]	; (80031e0 <HAL_DMA_Start_IT+0x224>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d00e      	beq.n	80030aa <HAL_DMA_Start_IT+0xee>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a54      	ldr	r2, [pc, #336]	; (80031e4 <HAL_DMA_Start_IT+0x228>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d009      	beq.n	80030aa <HAL_DMA_Start_IT+0xee>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a53      	ldr	r2, [pc, #332]	; (80031e8 <HAL_DMA_Start_IT+0x22c>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d004      	beq.n	80030aa <HAL_DMA_Start_IT+0xee>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a51      	ldr	r2, [pc, #324]	; (80031ec <HAL_DMA_Start_IT+0x230>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d108      	bne.n	80030bc <HAL_DMA_Start_IT+0x100>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0201 	bic.w	r2, r2, #1
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	e007      	b.n	80030cc <HAL_DMA_Start_IT+0x110>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0201 	bic.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f001 f93e 	bl	8004354 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a34      	ldr	r2, [pc, #208]	; (80031b0 <HAL_DMA_Start_IT+0x1f4>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d04a      	beq.n	8003178 <HAL_DMA_Start_IT+0x1bc>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a33      	ldr	r2, [pc, #204]	; (80031b4 <HAL_DMA_Start_IT+0x1f8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d045      	beq.n	8003178 <HAL_DMA_Start_IT+0x1bc>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a31      	ldr	r2, [pc, #196]	; (80031b8 <HAL_DMA_Start_IT+0x1fc>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d040      	beq.n	8003178 <HAL_DMA_Start_IT+0x1bc>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a30      	ldr	r2, [pc, #192]	; (80031bc <HAL_DMA_Start_IT+0x200>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d03b      	beq.n	8003178 <HAL_DMA_Start_IT+0x1bc>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a2e      	ldr	r2, [pc, #184]	; (80031c0 <HAL_DMA_Start_IT+0x204>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d036      	beq.n	8003178 <HAL_DMA_Start_IT+0x1bc>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a2d      	ldr	r2, [pc, #180]	; (80031c4 <HAL_DMA_Start_IT+0x208>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d031      	beq.n	8003178 <HAL_DMA_Start_IT+0x1bc>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a2b      	ldr	r2, [pc, #172]	; (80031c8 <HAL_DMA_Start_IT+0x20c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d02c      	beq.n	8003178 <HAL_DMA_Start_IT+0x1bc>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a2a      	ldr	r2, [pc, #168]	; (80031cc <HAL_DMA_Start_IT+0x210>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d027      	beq.n	8003178 <HAL_DMA_Start_IT+0x1bc>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a28      	ldr	r2, [pc, #160]	; (80031d0 <HAL_DMA_Start_IT+0x214>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d022      	beq.n	8003178 <HAL_DMA_Start_IT+0x1bc>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a27      	ldr	r2, [pc, #156]	; (80031d4 <HAL_DMA_Start_IT+0x218>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d01d      	beq.n	8003178 <HAL_DMA_Start_IT+0x1bc>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a25      	ldr	r2, [pc, #148]	; (80031d8 <HAL_DMA_Start_IT+0x21c>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d018      	beq.n	8003178 <HAL_DMA_Start_IT+0x1bc>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a24      	ldr	r2, [pc, #144]	; (80031dc <HAL_DMA_Start_IT+0x220>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d013      	beq.n	8003178 <HAL_DMA_Start_IT+0x1bc>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a22      	ldr	r2, [pc, #136]	; (80031e0 <HAL_DMA_Start_IT+0x224>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d00e      	beq.n	8003178 <HAL_DMA_Start_IT+0x1bc>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a21      	ldr	r2, [pc, #132]	; (80031e4 <HAL_DMA_Start_IT+0x228>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d009      	beq.n	8003178 <HAL_DMA_Start_IT+0x1bc>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a1f      	ldr	r2, [pc, #124]	; (80031e8 <HAL_DMA_Start_IT+0x22c>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d004      	beq.n	8003178 <HAL_DMA_Start_IT+0x1bc>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a1e      	ldr	r2, [pc, #120]	; (80031ec <HAL_DMA_Start_IT+0x230>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d101      	bne.n	800317c <HAL_DMA_Start_IT+0x1c0>
 8003178:	2301      	movs	r3, #1
 800317a:	e000      	b.n	800317e <HAL_DMA_Start_IT+0x1c2>
 800317c:	2300      	movs	r3, #0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d036      	beq.n	80031f0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f023 021e 	bic.w	r2, r3, #30
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f042 0216 	orr.w	r2, r2, #22
 8003194:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	2b00      	cmp	r3, #0
 800319c:	d03e      	beq.n	800321c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f042 0208 	orr.w	r2, r2, #8
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	e035      	b.n	800321c <HAL_DMA_Start_IT+0x260>
 80031b0:	40020010 	.word	0x40020010
 80031b4:	40020028 	.word	0x40020028
 80031b8:	40020040 	.word	0x40020040
 80031bc:	40020058 	.word	0x40020058
 80031c0:	40020070 	.word	0x40020070
 80031c4:	40020088 	.word	0x40020088
 80031c8:	400200a0 	.word	0x400200a0
 80031cc:	400200b8 	.word	0x400200b8
 80031d0:	40020410 	.word	0x40020410
 80031d4:	40020428 	.word	0x40020428
 80031d8:	40020440 	.word	0x40020440
 80031dc:	40020458 	.word	0x40020458
 80031e0:	40020470 	.word	0x40020470
 80031e4:	40020488 	.word	0x40020488
 80031e8:	400204a0 	.word	0x400204a0
 80031ec:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f023 020e 	bic.w	r2, r3, #14
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 020a 	orr.w	r2, r2, #10
 8003202:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	2b00      	cmp	r3, #0
 800320a:	d007      	beq.n	800321c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0204 	orr.w	r2, r2, #4
 800321a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a83      	ldr	r2, [pc, #524]	; (8003430 <HAL_DMA_Start_IT+0x474>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d072      	beq.n	800330c <HAL_DMA_Start_IT+0x350>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a82      	ldr	r2, [pc, #520]	; (8003434 <HAL_DMA_Start_IT+0x478>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d06d      	beq.n	800330c <HAL_DMA_Start_IT+0x350>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a80      	ldr	r2, [pc, #512]	; (8003438 <HAL_DMA_Start_IT+0x47c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d068      	beq.n	800330c <HAL_DMA_Start_IT+0x350>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a7f      	ldr	r2, [pc, #508]	; (800343c <HAL_DMA_Start_IT+0x480>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d063      	beq.n	800330c <HAL_DMA_Start_IT+0x350>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a7d      	ldr	r2, [pc, #500]	; (8003440 <HAL_DMA_Start_IT+0x484>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d05e      	beq.n	800330c <HAL_DMA_Start_IT+0x350>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a7c      	ldr	r2, [pc, #496]	; (8003444 <HAL_DMA_Start_IT+0x488>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d059      	beq.n	800330c <HAL_DMA_Start_IT+0x350>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a7a      	ldr	r2, [pc, #488]	; (8003448 <HAL_DMA_Start_IT+0x48c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d054      	beq.n	800330c <HAL_DMA_Start_IT+0x350>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a79      	ldr	r2, [pc, #484]	; (800344c <HAL_DMA_Start_IT+0x490>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d04f      	beq.n	800330c <HAL_DMA_Start_IT+0x350>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a77      	ldr	r2, [pc, #476]	; (8003450 <HAL_DMA_Start_IT+0x494>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d04a      	beq.n	800330c <HAL_DMA_Start_IT+0x350>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a76      	ldr	r2, [pc, #472]	; (8003454 <HAL_DMA_Start_IT+0x498>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d045      	beq.n	800330c <HAL_DMA_Start_IT+0x350>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a74      	ldr	r2, [pc, #464]	; (8003458 <HAL_DMA_Start_IT+0x49c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d040      	beq.n	800330c <HAL_DMA_Start_IT+0x350>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a73      	ldr	r2, [pc, #460]	; (800345c <HAL_DMA_Start_IT+0x4a0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d03b      	beq.n	800330c <HAL_DMA_Start_IT+0x350>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a71      	ldr	r2, [pc, #452]	; (8003460 <HAL_DMA_Start_IT+0x4a4>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d036      	beq.n	800330c <HAL_DMA_Start_IT+0x350>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a70      	ldr	r2, [pc, #448]	; (8003464 <HAL_DMA_Start_IT+0x4a8>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d031      	beq.n	800330c <HAL_DMA_Start_IT+0x350>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a6e      	ldr	r2, [pc, #440]	; (8003468 <HAL_DMA_Start_IT+0x4ac>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d02c      	beq.n	800330c <HAL_DMA_Start_IT+0x350>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a6d      	ldr	r2, [pc, #436]	; (800346c <HAL_DMA_Start_IT+0x4b0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d027      	beq.n	800330c <HAL_DMA_Start_IT+0x350>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a6b      	ldr	r2, [pc, #428]	; (8003470 <HAL_DMA_Start_IT+0x4b4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d022      	beq.n	800330c <HAL_DMA_Start_IT+0x350>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a6a      	ldr	r2, [pc, #424]	; (8003474 <HAL_DMA_Start_IT+0x4b8>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d01d      	beq.n	800330c <HAL_DMA_Start_IT+0x350>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a68      	ldr	r2, [pc, #416]	; (8003478 <HAL_DMA_Start_IT+0x4bc>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d018      	beq.n	800330c <HAL_DMA_Start_IT+0x350>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a67      	ldr	r2, [pc, #412]	; (800347c <HAL_DMA_Start_IT+0x4c0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d013      	beq.n	800330c <HAL_DMA_Start_IT+0x350>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a65      	ldr	r2, [pc, #404]	; (8003480 <HAL_DMA_Start_IT+0x4c4>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d00e      	beq.n	800330c <HAL_DMA_Start_IT+0x350>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a64      	ldr	r2, [pc, #400]	; (8003484 <HAL_DMA_Start_IT+0x4c8>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d009      	beq.n	800330c <HAL_DMA_Start_IT+0x350>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a62      	ldr	r2, [pc, #392]	; (8003488 <HAL_DMA_Start_IT+0x4cc>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d004      	beq.n	800330c <HAL_DMA_Start_IT+0x350>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a61      	ldr	r2, [pc, #388]	; (800348c <HAL_DMA_Start_IT+0x4d0>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d101      	bne.n	8003310 <HAL_DMA_Start_IT+0x354>
 800330c:	2301      	movs	r3, #1
 800330e:	e000      	b.n	8003312 <HAL_DMA_Start_IT+0x356>
 8003310:	2300      	movs	r3, #0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d01a      	beq.n	800334c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d007      	beq.n	8003334 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800332e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003332:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003338:	2b00      	cmp	r3, #0
 800333a:	d007      	beq.n	800334c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003346:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800334a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a37      	ldr	r2, [pc, #220]	; (8003430 <HAL_DMA_Start_IT+0x474>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d04a      	beq.n	80033ec <HAL_DMA_Start_IT+0x430>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a36      	ldr	r2, [pc, #216]	; (8003434 <HAL_DMA_Start_IT+0x478>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d045      	beq.n	80033ec <HAL_DMA_Start_IT+0x430>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a34      	ldr	r2, [pc, #208]	; (8003438 <HAL_DMA_Start_IT+0x47c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d040      	beq.n	80033ec <HAL_DMA_Start_IT+0x430>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a33      	ldr	r2, [pc, #204]	; (800343c <HAL_DMA_Start_IT+0x480>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d03b      	beq.n	80033ec <HAL_DMA_Start_IT+0x430>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a31      	ldr	r2, [pc, #196]	; (8003440 <HAL_DMA_Start_IT+0x484>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d036      	beq.n	80033ec <HAL_DMA_Start_IT+0x430>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a30      	ldr	r2, [pc, #192]	; (8003444 <HAL_DMA_Start_IT+0x488>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d031      	beq.n	80033ec <HAL_DMA_Start_IT+0x430>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a2e      	ldr	r2, [pc, #184]	; (8003448 <HAL_DMA_Start_IT+0x48c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d02c      	beq.n	80033ec <HAL_DMA_Start_IT+0x430>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a2d      	ldr	r2, [pc, #180]	; (800344c <HAL_DMA_Start_IT+0x490>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d027      	beq.n	80033ec <HAL_DMA_Start_IT+0x430>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a2b      	ldr	r2, [pc, #172]	; (8003450 <HAL_DMA_Start_IT+0x494>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d022      	beq.n	80033ec <HAL_DMA_Start_IT+0x430>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a2a      	ldr	r2, [pc, #168]	; (8003454 <HAL_DMA_Start_IT+0x498>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d01d      	beq.n	80033ec <HAL_DMA_Start_IT+0x430>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a28      	ldr	r2, [pc, #160]	; (8003458 <HAL_DMA_Start_IT+0x49c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d018      	beq.n	80033ec <HAL_DMA_Start_IT+0x430>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a27      	ldr	r2, [pc, #156]	; (800345c <HAL_DMA_Start_IT+0x4a0>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d013      	beq.n	80033ec <HAL_DMA_Start_IT+0x430>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a25      	ldr	r2, [pc, #148]	; (8003460 <HAL_DMA_Start_IT+0x4a4>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d00e      	beq.n	80033ec <HAL_DMA_Start_IT+0x430>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a24      	ldr	r2, [pc, #144]	; (8003464 <HAL_DMA_Start_IT+0x4a8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d009      	beq.n	80033ec <HAL_DMA_Start_IT+0x430>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a22      	ldr	r2, [pc, #136]	; (8003468 <HAL_DMA_Start_IT+0x4ac>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d004      	beq.n	80033ec <HAL_DMA_Start_IT+0x430>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a21      	ldr	r2, [pc, #132]	; (800346c <HAL_DMA_Start_IT+0x4b0>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d108      	bne.n	80033fe <HAL_DMA_Start_IT+0x442>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0201 	orr.w	r2, r2, #1
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	e012      	b.n	8003424 <HAL_DMA_Start_IT+0x468>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f042 0201 	orr.w	r2, r2, #1
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	e009      	b.n	8003424 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003416:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003424:	7dfb      	ldrb	r3, [r7, #23]
}
 8003426:	4618      	mov	r0, r3
 8003428:	3718      	adds	r7, #24
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40020010 	.word	0x40020010
 8003434:	40020028 	.word	0x40020028
 8003438:	40020040 	.word	0x40020040
 800343c:	40020058 	.word	0x40020058
 8003440:	40020070 	.word	0x40020070
 8003444:	40020088 	.word	0x40020088
 8003448:	400200a0 	.word	0x400200a0
 800344c:	400200b8 	.word	0x400200b8
 8003450:	40020410 	.word	0x40020410
 8003454:	40020428 	.word	0x40020428
 8003458:	40020440 	.word	0x40020440
 800345c:	40020458 	.word	0x40020458
 8003460:	40020470 	.word	0x40020470
 8003464:	40020488 	.word	0x40020488
 8003468:	400204a0 	.word	0x400204a0
 800346c:	400204b8 	.word	0x400204b8
 8003470:	58025408 	.word	0x58025408
 8003474:	5802541c 	.word	0x5802541c
 8003478:	58025430 	.word	0x58025430
 800347c:	58025444 	.word	0x58025444
 8003480:	58025458 	.word	0x58025458
 8003484:	5802546c 	.word	0x5802546c
 8003488:	58025480 	.word	0x58025480
 800348c:	58025494 	.word	0x58025494

08003490 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b08a      	sub	sp, #40	; 0x28
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003498:	2300      	movs	r3, #0
 800349a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800349c:	4b67      	ldr	r3, [pc, #412]	; (800363c <HAL_DMA_IRQHandler+0x1ac>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a67      	ldr	r2, [pc, #412]	; (8003640 <HAL_DMA_IRQHandler+0x1b0>)
 80034a2:	fba2 2303 	umull	r2, r3, r2, r3
 80034a6:	0a9b      	lsrs	r3, r3, #10
 80034a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ae:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80034b6:	6a3b      	ldr	r3, [r7, #32]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a5f      	ldr	r2, [pc, #380]	; (8003644 <HAL_DMA_IRQHandler+0x1b4>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d04a      	beq.n	8003562 <HAL_DMA_IRQHandler+0xd2>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a5d      	ldr	r2, [pc, #372]	; (8003648 <HAL_DMA_IRQHandler+0x1b8>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d045      	beq.n	8003562 <HAL_DMA_IRQHandler+0xd2>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a5c      	ldr	r2, [pc, #368]	; (800364c <HAL_DMA_IRQHandler+0x1bc>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d040      	beq.n	8003562 <HAL_DMA_IRQHandler+0xd2>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a5a      	ldr	r2, [pc, #360]	; (8003650 <HAL_DMA_IRQHandler+0x1c0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d03b      	beq.n	8003562 <HAL_DMA_IRQHandler+0xd2>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a59      	ldr	r2, [pc, #356]	; (8003654 <HAL_DMA_IRQHandler+0x1c4>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d036      	beq.n	8003562 <HAL_DMA_IRQHandler+0xd2>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a57      	ldr	r2, [pc, #348]	; (8003658 <HAL_DMA_IRQHandler+0x1c8>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d031      	beq.n	8003562 <HAL_DMA_IRQHandler+0xd2>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a56      	ldr	r2, [pc, #344]	; (800365c <HAL_DMA_IRQHandler+0x1cc>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d02c      	beq.n	8003562 <HAL_DMA_IRQHandler+0xd2>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a54      	ldr	r2, [pc, #336]	; (8003660 <HAL_DMA_IRQHandler+0x1d0>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d027      	beq.n	8003562 <HAL_DMA_IRQHandler+0xd2>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a53      	ldr	r2, [pc, #332]	; (8003664 <HAL_DMA_IRQHandler+0x1d4>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d022      	beq.n	8003562 <HAL_DMA_IRQHandler+0xd2>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a51      	ldr	r2, [pc, #324]	; (8003668 <HAL_DMA_IRQHandler+0x1d8>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d01d      	beq.n	8003562 <HAL_DMA_IRQHandler+0xd2>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a50      	ldr	r2, [pc, #320]	; (800366c <HAL_DMA_IRQHandler+0x1dc>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d018      	beq.n	8003562 <HAL_DMA_IRQHandler+0xd2>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a4e      	ldr	r2, [pc, #312]	; (8003670 <HAL_DMA_IRQHandler+0x1e0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d013      	beq.n	8003562 <HAL_DMA_IRQHandler+0xd2>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a4d      	ldr	r2, [pc, #308]	; (8003674 <HAL_DMA_IRQHandler+0x1e4>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d00e      	beq.n	8003562 <HAL_DMA_IRQHandler+0xd2>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a4b      	ldr	r2, [pc, #300]	; (8003678 <HAL_DMA_IRQHandler+0x1e8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d009      	beq.n	8003562 <HAL_DMA_IRQHandler+0xd2>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a4a      	ldr	r2, [pc, #296]	; (800367c <HAL_DMA_IRQHandler+0x1ec>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d004      	beq.n	8003562 <HAL_DMA_IRQHandler+0xd2>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a48      	ldr	r2, [pc, #288]	; (8003680 <HAL_DMA_IRQHandler+0x1f0>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d101      	bne.n	8003566 <HAL_DMA_IRQHandler+0xd6>
 8003562:	2301      	movs	r3, #1
 8003564:	e000      	b.n	8003568 <HAL_DMA_IRQHandler+0xd8>
 8003566:	2300      	movs	r3, #0
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 842b 	beq.w	8003dc4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003572:	f003 031f 	and.w	r3, r3, #31
 8003576:	2208      	movs	r2, #8
 8003578:	409a      	lsls	r2, r3
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	4013      	ands	r3, r2
 800357e:	2b00      	cmp	r3, #0
 8003580:	f000 80a2 	beq.w	80036c8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a2e      	ldr	r2, [pc, #184]	; (8003644 <HAL_DMA_IRQHandler+0x1b4>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d04a      	beq.n	8003624 <HAL_DMA_IRQHandler+0x194>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a2d      	ldr	r2, [pc, #180]	; (8003648 <HAL_DMA_IRQHandler+0x1b8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d045      	beq.n	8003624 <HAL_DMA_IRQHandler+0x194>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a2b      	ldr	r2, [pc, #172]	; (800364c <HAL_DMA_IRQHandler+0x1bc>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d040      	beq.n	8003624 <HAL_DMA_IRQHandler+0x194>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a2a      	ldr	r2, [pc, #168]	; (8003650 <HAL_DMA_IRQHandler+0x1c0>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d03b      	beq.n	8003624 <HAL_DMA_IRQHandler+0x194>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a28      	ldr	r2, [pc, #160]	; (8003654 <HAL_DMA_IRQHandler+0x1c4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d036      	beq.n	8003624 <HAL_DMA_IRQHandler+0x194>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a27      	ldr	r2, [pc, #156]	; (8003658 <HAL_DMA_IRQHandler+0x1c8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d031      	beq.n	8003624 <HAL_DMA_IRQHandler+0x194>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a25      	ldr	r2, [pc, #148]	; (800365c <HAL_DMA_IRQHandler+0x1cc>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d02c      	beq.n	8003624 <HAL_DMA_IRQHandler+0x194>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a24      	ldr	r2, [pc, #144]	; (8003660 <HAL_DMA_IRQHandler+0x1d0>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d027      	beq.n	8003624 <HAL_DMA_IRQHandler+0x194>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a22      	ldr	r2, [pc, #136]	; (8003664 <HAL_DMA_IRQHandler+0x1d4>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d022      	beq.n	8003624 <HAL_DMA_IRQHandler+0x194>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a21      	ldr	r2, [pc, #132]	; (8003668 <HAL_DMA_IRQHandler+0x1d8>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d01d      	beq.n	8003624 <HAL_DMA_IRQHandler+0x194>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a1f      	ldr	r2, [pc, #124]	; (800366c <HAL_DMA_IRQHandler+0x1dc>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d018      	beq.n	8003624 <HAL_DMA_IRQHandler+0x194>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a1e      	ldr	r2, [pc, #120]	; (8003670 <HAL_DMA_IRQHandler+0x1e0>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d013      	beq.n	8003624 <HAL_DMA_IRQHandler+0x194>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a1c      	ldr	r2, [pc, #112]	; (8003674 <HAL_DMA_IRQHandler+0x1e4>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00e      	beq.n	8003624 <HAL_DMA_IRQHandler+0x194>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a1b      	ldr	r2, [pc, #108]	; (8003678 <HAL_DMA_IRQHandler+0x1e8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d009      	beq.n	8003624 <HAL_DMA_IRQHandler+0x194>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a19      	ldr	r2, [pc, #100]	; (800367c <HAL_DMA_IRQHandler+0x1ec>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d004      	beq.n	8003624 <HAL_DMA_IRQHandler+0x194>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a18      	ldr	r2, [pc, #96]	; (8003680 <HAL_DMA_IRQHandler+0x1f0>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d12f      	bne.n	8003684 <HAL_DMA_IRQHandler+0x1f4>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0304 	and.w	r3, r3, #4
 800362e:	2b00      	cmp	r3, #0
 8003630:	bf14      	ite	ne
 8003632:	2301      	movne	r3, #1
 8003634:	2300      	moveq	r3, #0
 8003636:	b2db      	uxtb	r3, r3
 8003638:	e02e      	b.n	8003698 <HAL_DMA_IRQHandler+0x208>
 800363a:	bf00      	nop
 800363c:	24000008 	.word	0x24000008
 8003640:	1b4e81b5 	.word	0x1b4e81b5
 8003644:	40020010 	.word	0x40020010
 8003648:	40020028 	.word	0x40020028
 800364c:	40020040 	.word	0x40020040
 8003650:	40020058 	.word	0x40020058
 8003654:	40020070 	.word	0x40020070
 8003658:	40020088 	.word	0x40020088
 800365c:	400200a0 	.word	0x400200a0
 8003660:	400200b8 	.word	0x400200b8
 8003664:	40020410 	.word	0x40020410
 8003668:	40020428 	.word	0x40020428
 800366c:	40020440 	.word	0x40020440
 8003670:	40020458 	.word	0x40020458
 8003674:	40020470 	.word	0x40020470
 8003678:	40020488 	.word	0x40020488
 800367c:	400204a0 	.word	0x400204a0
 8003680:	400204b8 	.word	0x400204b8
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0308 	and.w	r3, r3, #8
 800368e:	2b00      	cmp	r3, #0
 8003690:	bf14      	ite	ne
 8003692:	2301      	movne	r3, #1
 8003694:	2300      	moveq	r3, #0
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b00      	cmp	r3, #0
 800369a:	d015      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 0204 	bic.w	r2, r2, #4
 80036aa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b0:	f003 031f 	and.w	r3, r3, #31
 80036b4:	2208      	movs	r2, #8
 80036b6:	409a      	lsls	r2, r3
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c0:	f043 0201 	orr.w	r2, r3, #1
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036cc:	f003 031f 	and.w	r3, r3, #31
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	fa22 f303 	lsr.w	r3, r2, r3
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d06e      	beq.n	80037bc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a69      	ldr	r2, [pc, #420]	; (8003888 <HAL_DMA_IRQHandler+0x3f8>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d04a      	beq.n	800377e <HAL_DMA_IRQHandler+0x2ee>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a67      	ldr	r2, [pc, #412]	; (800388c <HAL_DMA_IRQHandler+0x3fc>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d045      	beq.n	800377e <HAL_DMA_IRQHandler+0x2ee>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a66      	ldr	r2, [pc, #408]	; (8003890 <HAL_DMA_IRQHandler+0x400>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d040      	beq.n	800377e <HAL_DMA_IRQHandler+0x2ee>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a64      	ldr	r2, [pc, #400]	; (8003894 <HAL_DMA_IRQHandler+0x404>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d03b      	beq.n	800377e <HAL_DMA_IRQHandler+0x2ee>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a63      	ldr	r2, [pc, #396]	; (8003898 <HAL_DMA_IRQHandler+0x408>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d036      	beq.n	800377e <HAL_DMA_IRQHandler+0x2ee>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a61      	ldr	r2, [pc, #388]	; (800389c <HAL_DMA_IRQHandler+0x40c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d031      	beq.n	800377e <HAL_DMA_IRQHandler+0x2ee>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a60      	ldr	r2, [pc, #384]	; (80038a0 <HAL_DMA_IRQHandler+0x410>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d02c      	beq.n	800377e <HAL_DMA_IRQHandler+0x2ee>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a5e      	ldr	r2, [pc, #376]	; (80038a4 <HAL_DMA_IRQHandler+0x414>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d027      	beq.n	800377e <HAL_DMA_IRQHandler+0x2ee>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a5d      	ldr	r2, [pc, #372]	; (80038a8 <HAL_DMA_IRQHandler+0x418>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d022      	beq.n	800377e <HAL_DMA_IRQHandler+0x2ee>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a5b      	ldr	r2, [pc, #364]	; (80038ac <HAL_DMA_IRQHandler+0x41c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d01d      	beq.n	800377e <HAL_DMA_IRQHandler+0x2ee>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a5a      	ldr	r2, [pc, #360]	; (80038b0 <HAL_DMA_IRQHandler+0x420>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d018      	beq.n	800377e <HAL_DMA_IRQHandler+0x2ee>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a58      	ldr	r2, [pc, #352]	; (80038b4 <HAL_DMA_IRQHandler+0x424>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d013      	beq.n	800377e <HAL_DMA_IRQHandler+0x2ee>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a57      	ldr	r2, [pc, #348]	; (80038b8 <HAL_DMA_IRQHandler+0x428>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d00e      	beq.n	800377e <HAL_DMA_IRQHandler+0x2ee>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a55      	ldr	r2, [pc, #340]	; (80038bc <HAL_DMA_IRQHandler+0x42c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d009      	beq.n	800377e <HAL_DMA_IRQHandler+0x2ee>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a54      	ldr	r2, [pc, #336]	; (80038c0 <HAL_DMA_IRQHandler+0x430>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d004      	beq.n	800377e <HAL_DMA_IRQHandler+0x2ee>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a52      	ldr	r2, [pc, #328]	; (80038c4 <HAL_DMA_IRQHandler+0x434>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d10a      	bne.n	8003794 <HAL_DMA_IRQHandler+0x304>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003788:	2b00      	cmp	r3, #0
 800378a:	bf14      	ite	ne
 800378c:	2301      	movne	r3, #1
 800378e:	2300      	moveq	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	e003      	b.n	800379c <HAL_DMA_IRQHandler+0x30c>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2300      	movs	r3, #0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00d      	beq.n	80037bc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a4:	f003 031f 	and.w	r3, r3, #31
 80037a8:	2201      	movs	r2, #1
 80037aa:	409a      	lsls	r2, r3
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b4:	f043 0202 	orr.w	r2, r3, #2
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c0:	f003 031f 	and.w	r3, r3, #31
 80037c4:	2204      	movs	r2, #4
 80037c6:	409a      	lsls	r2, r3
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	4013      	ands	r3, r2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 808f 	beq.w	80038f0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a2c      	ldr	r2, [pc, #176]	; (8003888 <HAL_DMA_IRQHandler+0x3f8>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d04a      	beq.n	8003872 <HAL_DMA_IRQHandler+0x3e2>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a2a      	ldr	r2, [pc, #168]	; (800388c <HAL_DMA_IRQHandler+0x3fc>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d045      	beq.n	8003872 <HAL_DMA_IRQHandler+0x3e2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a29      	ldr	r2, [pc, #164]	; (8003890 <HAL_DMA_IRQHandler+0x400>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d040      	beq.n	8003872 <HAL_DMA_IRQHandler+0x3e2>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a27      	ldr	r2, [pc, #156]	; (8003894 <HAL_DMA_IRQHandler+0x404>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d03b      	beq.n	8003872 <HAL_DMA_IRQHandler+0x3e2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a26      	ldr	r2, [pc, #152]	; (8003898 <HAL_DMA_IRQHandler+0x408>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d036      	beq.n	8003872 <HAL_DMA_IRQHandler+0x3e2>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a24      	ldr	r2, [pc, #144]	; (800389c <HAL_DMA_IRQHandler+0x40c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d031      	beq.n	8003872 <HAL_DMA_IRQHandler+0x3e2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a23      	ldr	r2, [pc, #140]	; (80038a0 <HAL_DMA_IRQHandler+0x410>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d02c      	beq.n	8003872 <HAL_DMA_IRQHandler+0x3e2>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a21      	ldr	r2, [pc, #132]	; (80038a4 <HAL_DMA_IRQHandler+0x414>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d027      	beq.n	8003872 <HAL_DMA_IRQHandler+0x3e2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a20      	ldr	r2, [pc, #128]	; (80038a8 <HAL_DMA_IRQHandler+0x418>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d022      	beq.n	8003872 <HAL_DMA_IRQHandler+0x3e2>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a1e      	ldr	r2, [pc, #120]	; (80038ac <HAL_DMA_IRQHandler+0x41c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d01d      	beq.n	8003872 <HAL_DMA_IRQHandler+0x3e2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a1d      	ldr	r2, [pc, #116]	; (80038b0 <HAL_DMA_IRQHandler+0x420>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d018      	beq.n	8003872 <HAL_DMA_IRQHandler+0x3e2>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a1b      	ldr	r2, [pc, #108]	; (80038b4 <HAL_DMA_IRQHandler+0x424>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d013      	beq.n	8003872 <HAL_DMA_IRQHandler+0x3e2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a1a      	ldr	r2, [pc, #104]	; (80038b8 <HAL_DMA_IRQHandler+0x428>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d00e      	beq.n	8003872 <HAL_DMA_IRQHandler+0x3e2>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a18      	ldr	r2, [pc, #96]	; (80038bc <HAL_DMA_IRQHandler+0x42c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d009      	beq.n	8003872 <HAL_DMA_IRQHandler+0x3e2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a17      	ldr	r2, [pc, #92]	; (80038c0 <HAL_DMA_IRQHandler+0x430>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d004      	beq.n	8003872 <HAL_DMA_IRQHandler+0x3e2>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a15      	ldr	r2, [pc, #84]	; (80038c4 <HAL_DMA_IRQHandler+0x434>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d12a      	bne.n	80038c8 <HAL_DMA_IRQHandler+0x438>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	bf14      	ite	ne
 8003880:	2301      	movne	r3, #1
 8003882:	2300      	moveq	r3, #0
 8003884:	b2db      	uxtb	r3, r3
 8003886:	e023      	b.n	80038d0 <HAL_DMA_IRQHandler+0x440>
 8003888:	40020010 	.word	0x40020010
 800388c:	40020028 	.word	0x40020028
 8003890:	40020040 	.word	0x40020040
 8003894:	40020058 	.word	0x40020058
 8003898:	40020070 	.word	0x40020070
 800389c:	40020088 	.word	0x40020088
 80038a0:	400200a0 	.word	0x400200a0
 80038a4:	400200b8 	.word	0x400200b8
 80038a8:	40020410 	.word	0x40020410
 80038ac:	40020428 	.word	0x40020428
 80038b0:	40020440 	.word	0x40020440
 80038b4:	40020458 	.word	0x40020458
 80038b8:	40020470 	.word	0x40020470
 80038bc:	40020488 	.word	0x40020488
 80038c0:	400204a0 	.word	0x400204a0
 80038c4:	400204b8 	.word	0x400204b8
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2300      	movs	r3, #0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00d      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d8:	f003 031f 	and.w	r3, r3, #31
 80038dc:	2204      	movs	r2, #4
 80038de:	409a      	lsls	r2, r3
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e8:	f043 0204 	orr.w	r2, r3, #4
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f4:	f003 031f 	and.w	r3, r3, #31
 80038f8:	2210      	movs	r2, #16
 80038fa:	409a      	lsls	r2, r3
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	4013      	ands	r3, r2
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 80a6 	beq.w	8003a52 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a85      	ldr	r2, [pc, #532]	; (8003b20 <HAL_DMA_IRQHandler+0x690>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d04a      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x516>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a83      	ldr	r2, [pc, #524]	; (8003b24 <HAL_DMA_IRQHandler+0x694>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d045      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x516>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a82      	ldr	r2, [pc, #520]	; (8003b28 <HAL_DMA_IRQHandler+0x698>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d040      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x516>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a80      	ldr	r2, [pc, #512]	; (8003b2c <HAL_DMA_IRQHandler+0x69c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d03b      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x516>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a7f      	ldr	r2, [pc, #508]	; (8003b30 <HAL_DMA_IRQHandler+0x6a0>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d036      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x516>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a7d      	ldr	r2, [pc, #500]	; (8003b34 <HAL_DMA_IRQHandler+0x6a4>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d031      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x516>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a7c      	ldr	r2, [pc, #496]	; (8003b38 <HAL_DMA_IRQHandler+0x6a8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d02c      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x516>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a7a      	ldr	r2, [pc, #488]	; (8003b3c <HAL_DMA_IRQHandler+0x6ac>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d027      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x516>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a79      	ldr	r2, [pc, #484]	; (8003b40 <HAL_DMA_IRQHandler+0x6b0>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d022      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x516>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a77      	ldr	r2, [pc, #476]	; (8003b44 <HAL_DMA_IRQHandler+0x6b4>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d01d      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x516>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a76      	ldr	r2, [pc, #472]	; (8003b48 <HAL_DMA_IRQHandler+0x6b8>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d018      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x516>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a74      	ldr	r2, [pc, #464]	; (8003b4c <HAL_DMA_IRQHandler+0x6bc>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d013      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x516>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a73      	ldr	r2, [pc, #460]	; (8003b50 <HAL_DMA_IRQHandler+0x6c0>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d00e      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x516>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a71      	ldr	r2, [pc, #452]	; (8003b54 <HAL_DMA_IRQHandler+0x6c4>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d009      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x516>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a70      	ldr	r2, [pc, #448]	; (8003b58 <HAL_DMA_IRQHandler+0x6c8>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d004      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x516>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a6e      	ldr	r2, [pc, #440]	; (8003b5c <HAL_DMA_IRQHandler+0x6cc>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d10a      	bne.n	80039bc <HAL_DMA_IRQHandler+0x52c>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0308 	and.w	r3, r3, #8
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	bf14      	ite	ne
 80039b4:	2301      	movne	r3, #1
 80039b6:	2300      	moveq	r3, #0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	e009      	b.n	80039d0 <HAL_DMA_IRQHandler+0x540>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0304 	and.w	r3, r3, #4
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	bf14      	ite	ne
 80039ca:	2301      	movne	r3, #1
 80039cc:	2300      	moveq	r3, #0
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d03e      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d8:	f003 031f 	and.w	r3, r3, #31
 80039dc:	2210      	movs	r2, #16
 80039de:	409a      	lsls	r2, r3
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d018      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d108      	bne.n	8003a12 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d024      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	4798      	blx	r3
 8003a10:	e01f      	b.n	8003a52 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d01b      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	4798      	blx	r3
 8003a22:	e016      	b.n	8003a52 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d107      	bne.n	8003a42 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 0208 	bic.w	r2, r2, #8
 8003a40:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a56:	f003 031f 	and.w	r3, r3, #31
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	409a      	lsls	r2, r3
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	4013      	ands	r3, r2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 8110 	beq.w	8003c88 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a2c      	ldr	r2, [pc, #176]	; (8003b20 <HAL_DMA_IRQHandler+0x690>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d04a      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x678>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a2b      	ldr	r2, [pc, #172]	; (8003b24 <HAL_DMA_IRQHandler+0x694>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d045      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x678>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a29      	ldr	r2, [pc, #164]	; (8003b28 <HAL_DMA_IRQHandler+0x698>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d040      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x678>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a28      	ldr	r2, [pc, #160]	; (8003b2c <HAL_DMA_IRQHandler+0x69c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d03b      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x678>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a26      	ldr	r2, [pc, #152]	; (8003b30 <HAL_DMA_IRQHandler+0x6a0>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d036      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x678>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a25      	ldr	r2, [pc, #148]	; (8003b34 <HAL_DMA_IRQHandler+0x6a4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d031      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x678>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a23      	ldr	r2, [pc, #140]	; (8003b38 <HAL_DMA_IRQHandler+0x6a8>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d02c      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x678>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a22      	ldr	r2, [pc, #136]	; (8003b3c <HAL_DMA_IRQHandler+0x6ac>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d027      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x678>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a20      	ldr	r2, [pc, #128]	; (8003b40 <HAL_DMA_IRQHandler+0x6b0>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d022      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x678>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a1f      	ldr	r2, [pc, #124]	; (8003b44 <HAL_DMA_IRQHandler+0x6b4>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d01d      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x678>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a1d      	ldr	r2, [pc, #116]	; (8003b48 <HAL_DMA_IRQHandler+0x6b8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d018      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x678>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a1c      	ldr	r2, [pc, #112]	; (8003b4c <HAL_DMA_IRQHandler+0x6bc>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d013      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x678>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a1a      	ldr	r2, [pc, #104]	; (8003b50 <HAL_DMA_IRQHandler+0x6c0>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d00e      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x678>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a19      	ldr	r2, [pc, #100]	; (8003b54 <HAL_DMA_IRQHandler+0x6c4>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d009      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x678>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a17      	ldr	r2, [pc, #92]	; (8003b58 <HAL_DMA_IRQHandler+0x6c8>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d004      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x678>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a16      	ldr	r2, [pc, #88]	; (8003b5c <HAL_DMA_IRQHandler+0x6cc>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d12b      	bne.n	8003b60 <HAL_DMA_IRQHandler+0x6d0>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0310 	and.w	r3, r3, #16
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	bf14      	ite	ne
 8003b16:	2301      	movne	r3, #1
 8003b18:	2300      	moveq	r3, #0
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	e02a      	b.n	8003b74 <HAL_DMA_IRQHandler+0x6e4>
 8003b1e:	bf00      	nop
 8003b20:	40020010 	.word	0x40020010
 8003b24:	40020028 	.word	0x40020028
 8003b28:	40020040 	.word	0x40020040
 8003b2c:	40020058 	.word	0x40020058
 8003b30:	40020070 	.word	0x40020070
 8003b34:	40020088 	.word	0x40020088
 8003b38:	400200a0 	.word	0x400200a0
 8003b3c:	400200b8 	.word	0x400200b8
 8003b40:	40020410 	.word	0x40020410
 8003b44:	40020428 	.word	0x40020428
 8003b48:	40020440 	.word	0x40020440
 8003b4c:	40020458 	.word	0x40020458
 8003b50:	40020470 	.word	0x40020470
 8003b54:	40020488 	.word	0x40020488
 8003b58:	400204a0 	.word	0x400204a0
 8003b5c:	400204b8 	.word	0x400204b8
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	bf14      	ite	ne
 8003b6e:	2301      	movne	r3, #1
 8003b70:	2300      	moveq	r3, #0
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 8087 	beq.w	8003c88 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7e:	f003 031f 	and.w	r3, r3, #31
 8003b82:	2220      	movs	r2, #32
 8003b84:	409a      	lsls	r2, r3
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d139      	bne.n	8003c0a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 0216 	bic.w	r2, r2, #22
 8003ba4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	695a      	ldr	r2, [r3, #20]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bb4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d103      	bne.n	8003bc6 <HAL_DMA_IRQHandler+0x736>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d007      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0208 	bic.w	r2, r2, #8
 8003bd4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bda:	f003 031f 	and.w	r3, r3, #31
 8003bde:	223f      	movs	r2, #63	; 0x3f
 8003be0:	409a      	lsls	r2, r3
 8003be2:	6a3b      	ldr	r3, [r7, #32]
 8003be4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 8382 	beq.w	8004304 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	4798      	blx	r3
          }
          return;
 8003c08:	e37c      	b.n	8004304 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d018      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d108      	bne.n	8003c38 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d02c      	beq.n	8003c88 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	4798      	blx	r3
 8003c36:	e027      	b.n	8003c88 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d023      	beq.n	8003c88 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	4798      	blx	r3
 8003c48:	e01e      	b.n	8003c88 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10f      	bne.n	8003c78 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0210 	bic.w	r2, r2, #16
 8003c66:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d003      	beq.n	8003c88 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 833e 	beq.w	800430e <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 8088 	beq.w	8003db0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2204      	movs	r2, #4
 8003ca4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a89      	ldr	r2, [pc, #548]	; (8003ed4 <HAL_DMA_IRQHandler+0xa44>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d04a      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x8b8>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a88      	ldr	r2, [pc, #544]	; (8003ed8 <HAL_DMA_IRQHandler+0xa48>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d045      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x8b8>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a86      	ldr	r2, [pc, #536]	; (8003edc <HAL_DMA_IRQHandler+0xa4c>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d040      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x8b8>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a85      	ldr	r2, [pc, #532]	; (8003ee0 <HAL_DMA_IRQHandler+0xa50>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d03b      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x8b8>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a83      	ldr	r2, [pc, #524]	; (8003ee4 <HAL_DMA_IRQHandler+0xa54>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d036      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x8b8>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a82      	ldr	r2, [pc, #520]	; (8003ee8 <HAL_DMA_IRQHandler+0xa58>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d031      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x8b8>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a80      	ldr	r2, [pc, #512]	; (8003eec <HAL_DMA_IRQHandler+0xa5c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d02c      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x8b8>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a7f      	ldr	r2, [pc, #508]	; (8003ef0 <HAL_DMA_IRQHandler+0xa60>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d027      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x8b8>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a7d      	ldr	r2, [pc, #500]	; (8003ef4 <HAL_DMA_IRQHandler+0xa64>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d022      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x8b8>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a7c      	ldr	r2, [pc, #496]	; (8003ef8 <HAL_DMA_IRQHandler+0xa68>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d01d      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x8b8>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a7a      	ldr	r2, [pc, #488]	; (8003efc <HAL_DMA_IRQHandler+0xa6c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d018      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x8b8>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a79      	ldr	r2, [pc, #484]	; (8003f00 <HAL_DMA_IRQHandler+0xa70>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d013      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x8b8>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a77      	ldr	r2, [pc, #476]	; (8003f04 <HAL_DMA_IRQHandler+0xa74>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d00e      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x8b8>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a76      	ldr	r2, [pc, #472]	; (8003f08 <HAL_DMA_IRQHandler+0xa78>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d009      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x8b8>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a74      	ldr	r2, [pc, #464]	; (8003f0c <HAL_DMA_IRQHandler+0xa7c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d004      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x8b8>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a73      	ldr	r2, [pc, #460]	; (8003f10 <HAL_DMA_IRQHandler+0xa80>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d108      	bne.n	8003d5a <HAL_DMA_IRQHandler+0x8ca>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0201 	bic.w	r2, r2, #1
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	e007      	b.n	8003d6a <HAL_DMA_IRQHandler+0x8da>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 0201 	bic.w	r2, r2, #1
 8003d68:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d307      	bcc.n	8003d86 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1f2      	bne.n	8003d6a <HAL_DMA_IRQHandler+0x8da>
 8003d84:	e000      	b.n	8003d88 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003d86:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d004      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2203      	movs	r2, #3
 8003d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003d9e:	e003      	b.n	8003da8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 82aa 	beq.w	800430e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	4798      	blx	r3
 8003dc2:	e2a4      	b.n	800430e <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a52      	ldr	r2, [pc, #328]	; (8003f14 <HAL_DMA_IRQHandler+0xa84>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d04a      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x9d4>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a51      	ldr	r2, [pc, #324]	; (8003f18 <HAL_DMA_IRQHandler+0xa88>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d045      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x9d4>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a4f      	ldr	r2, [pc, #316]	; (8003f1c <HAL_DMA_IRQHandler+0xa8c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d040      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x9d4>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a4e      	ldr	r2, [pc, #312]	; (8003f20 <HAL_DMA_IRQHandler+0xa90>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d03b      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x9d4>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a4c      	ldr	r2, [pc, #304]	; (8003f24 <HAL_DMA_IRQHandler+0xa94>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d036      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x9d4>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a4b      	ldr	r2, [pc, #300]	; (8003f28 <HAL_DMA_IRQHandler+0xa98>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d031      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x9d4>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a49      	ldr	r2, [pc, #292]	; (8003f2c <HAL_DMA_IRQHandler+0xa9c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d02c      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x9d4>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a48      	ldr	r2, [pc, #288]	; (8003f30 <HAL_DMA_IRQHandler+0xaa0>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d027      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x9d4>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a46      	ldr	r2, [pc, #280]	; (8003f34 <HAL_DMA_IRQHandler+0xaa4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d022      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x9d4>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a45      	ldr	r2, [pc, #276]	; (8003f38 <HAL_DMA_IRQHandler+0xaa8>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d01d      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x9d4>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a43      	ldr	r2, [pc, #268]	; (8003f3c <HAL_DMA_IRQHandler+0xaac>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d018      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x9d4>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a42      	ldr	r2, [pc, #264]	; (8003f40 <HAL_DMA_IRQHandler+0xab0>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d013      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x9d4>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a40      	ldr	r2, [pc, #256]	; (8003f44 <HAL_DMA_IRQHandler+0xab4>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d00e      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x9d4>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a3f      	ldr	r2, [pc, #252]	; (8003f48 <HAL_DMA_IRQHandler+0xab8>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d009      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x9d4>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a3d      	ldr	r2, [pc, #244]	; (8003f4c <HAL_DMA_IRQHandler+0xabc>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d004      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x9d4>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a3c      	ldr	r2, [pc, #240]	; (8003f50 <HAL_DMA_IRQHandler+0xac0>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d101      	bne.n	8003e68 <HAL_DMA_IRQHandler+0x9d8>
 8003e64:	2301      	movs	r3, #1
 8003e66:	e000      	b.n	8003e6a <HAL_DMA_IRQHandler+0x9da>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 824f 	beq.w	800430e <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7c:	f003 031f 	and.w	r3, r3, #31
 8003e80:	2204      	movs	r2, #4
 8003e82:	409a      	lsls	r2, r3
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	4013      	ands	r3, r2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 80dd 	beq.w	8004048 <HAL_DMA_IRQHandler+0xbb8>
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 80d7 	beq.w	8004048 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9e:	f003 031f 	and.w	r3, r3, #31
 8003ea2:	2204      	movs	r2, #4
 8003ea4:	409a      	lsls	r2, r3
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d059      	beq.n	8003f68 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d14a      	bne.n	8003f54 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 8220 	beq.w	8004308 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ed0:	e21a      	b.n	8004308 <HAL_DMA_IRQHandler+0xe78>
 8003ed2:	bf00      	nop
 8003ed4:	40020010 	.word	0x40020010
 8003ed8:	40020028 	.word	0x40020028
 8003edc:	40020040 	.word	0x40020040
 8003ee0:	40020058 	.word	0x40020058
 8003ee4:	40020070 	.word	0x40020070
 8003ee8:	40020088 	.word	0x40020088
 8003eec:	400200a0 	.word	0x400200a0
 8003ef0:	400200b8 	.word	0x400200b8
 8003ef4:	40020410 	.word	0x40020410
 8003ef8:	40020428 	.word	0x40020428
 8003efc:	40020440 	.word	0x40020440
 8003f00:	40020458 	.word	0x40020458
 8003f04:	40020470 	.word	0x40020470
 8003f08:	40020488 	.word	0x40020488
 8003f0c:	400204a0 	.word	0x400204a0
 8003f10:	400204b8 	.word	0x400204b8
 8003f14:	48022c08 	.word	0x48022c08
 8003f18:	48022c1c 	.word	0x48022c1c
 8003f1c:	48022c30 	.word	0x48022c30
 8003f20:	48022c44 	.word	0x48022c44
 8003f24:	48022c58 	.word	0x48022c58
 8003f28:	48022c6c 	.word	0x48022c6c
 8003f2c:	48022c80 	.word	0x48022c80
 8003f30:	48022c94 	.word	0x48022c94
 8003f34:	58025408 	.word	0x58025408
 8003f38:	5802541c 	.word	0x5802541c
 8003f3c:	58025430 	.word	0x58025430
 8003f40:	58025444 	.word	0x58025444
 8003f44:	58025458 	.word	0x58025458
 8003f48:	5802546c 	.word	0x5802546c
 8003f4c:	58025480 	.word	0x58025480
 8003f50:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 81d5 	beq.w	8004308 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f66:	e1cf      	b.n	8004308 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	f003 0320 	and.w	r3, r3, #32
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d160      	bne.n	8004034 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a7f      	ldr	r2, [pc, #508]	; (8004174 <HAL_DMA_IRQHandler+0xce4>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d04a      	beq.n	8004012 <HAL_DMA_IRQHandler+0xb82>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a7d      	ldr	r2, [pc, #500]	; (8004178 <HAL_DMA_IRQHandler+0xce8>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d045      	beq.n	8004012 <HAL_DMA_IRQHandler+0xb82>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a7c      	ldr	r2, [pc, #496]	; (800417c <HAL_DMA_IRQHandler+0xcec>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d040      	beq.n	8004012 <HAL_DMA_IRQHandler+0xb82>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a7a      	ldr	r2, [pc, #488]	; (8004180 <HAL_DMA_IRQHandler+0xcf0>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d03b      	beq.n	8004012 <HAL_DMA_IRQHandler+0xb82>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a79      	ldr	r2, [pc, #484]	; (8004184 <HAL_DMA_IRQHandler+0xcf4>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d036      	beq.n	8004012 <HAL_DMA_IRQHandler+0xb82>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a77      	ldr	r2, [pc, #476]	; (8004188 <HAL_DMA_IRQHandler+0xcf8>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d031      	beq.n	8004012 <HAL_DMA_IRQHandler+0xb82>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a76      	ldr	r2, [pc, #472]	; (800418c <HAL_DMA_IRQHandler+0xcfc>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d02c      	beq.n	8004012 <HAL_DMA_IRQHandler+0xb82>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a74      	ldr	r2, [pc, #464]	; (8004190 <HAL_DMA_IRQHandler+0xd00>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d027      	beq.n	8004012 <HAL_DMA_IRQHandler+0xb82>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a73      	ldr	r2, [pc, #460]	; (8004194 <HAL_DMA_IRQHandler+0xd04>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d022      	beq.n	8004012 <HAL_DMA_IRQHandler+0xb82>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a71      	ldr	r2, [pc, #452]	; (8004198 <HAL_DMA_IRQHandler+0xd08>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d01d      	beq.n	8004012 <HAL_DMA_IRQHandler+0xb82>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a70      	ldr	r2, [pc, #448]	; (800419c <HAL_DMA_IRQHandler+0xd0c>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d018      	beq.n	8004012 <HAL_DMA_IRQHandler+0xb82>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a6e      	ldr	r2, [pc, #440]	; (80041a0 <HAL_DMA_IRQHandler+0xd10>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d013      	beq.n	8004012 <HAL_DMA_IRQHandler+0xb82>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a6d      	ldr	r2, [pc, #436]	; (80041a4 <HAL_DMA_IRQHandler+0xd14>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d00e      	beq.n	8004012 <HAL_DMA_IRQHandler+0xb82>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a6b      	ldr	r2, [pc, #428]	; (80041a8 <HAL_DMA_IRQHandler+0xd18>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d009      	beq.n	8004012 <HAL_DMA_IRQHandler+0xb82>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a6a      	ldr	r2, [pc, #424]	; (80041ac <HAL_DMA_IRQHandler+0xd1c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d004      	beq.n	8004012 <HAL_DMA_IRQHandler+0xb82>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a68      	ldr	r2, [pc, #416]	; (80041b0 <HAL_DMA_IRQHandler+0xd20>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d108      	bne.n	8004024 <HAL_DMA_IRQHandler+0xb94>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0208 	bic.w	r2, r2, #8
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	e007      	b.n	8004034 <HAL_DMA_IRQHandler+0xba4>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0204 	bic.w	r2, r2, #4
 8004032:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 8165 	beq.w	8004308 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004046:	e15f      	b.n	8004308 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404c:	f003 031f 	and.w	r3, r3, #31
 8004050:	2202      	movs	r2, #2
 8004052:	409a      	lsls	r2, r3
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	4013      	ands	r3, r2
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 80c5 	beq.w	80041e8 <HAL_DMA_IRQHandler+0xd58>
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 80bf 	beq.w	80041e8 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800406e:	f003 031f 	and.w	r3, r3, #31
 8004072:	2202      	movs	r2, #2
 8004074:	409a      	lsls	r2, r3
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d018      	beq.n	80040b6 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d109      	bne.n	80040a2 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 813a 	beq.w	800430c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040a0:	e134      	b.n	800430c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 8130 	beq.w	800430c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040b4:	e12a      	b.n	800430c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	f003 0320 	and.w	r3, r3, #32
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f040 8089 	bne.w	80041d4 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a2b      	ldr	r2, [pc, #172]	; (8004174 <HAL_DMA_IRQHandler+0xce4>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d04a      	beq.n	8004162 <HAL_DMA_IRQHandler+0xcd2>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a29      	ldr	r2, [pc, #164]	; (8004178 <HAL_DMA_IRQHandler+0xce8>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d045      	beq.n	8004162 <HAL_DMA_IRQHandler+0xcd2>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a28      	ldr	r2, [pc, #160]	; (800417c <HAL_DMA_IRQHandler+0xcec>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d040      	beq.n	8004162 <HAL_DMA_IRQHandler+0xcd2>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a26      	ldr	r2, [pc, #152]	; (8004180 <HAL_DMA_IRQHandler+0xcf0>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d03b      	beq.n	8004162 <HAL_DMA_IRQHandler+0xcd2>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a25      	ldr	r2, [pc, #148]	; (8004184 <HAL_DMA_IRQHandler+0xcf4>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d036      	beq.n	8004162 <HAL_DMA_IRQHandler+0xcd2>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a23      	ldr	r2, [pc, #140]	; (8004188 <HAL_DMA_IRQHandler+0xcf8>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d031      	beq.n	8004162 <HAL_DMA_IRQHandler+0xcd2>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a22      	ldr	r2, [pc, #136]	; (800418c <HAL_DMA_IRQHandler+0xcfc>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d02c      	beq.n	8004162 <HAL_DMA_IRQHandler+0xcd2>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a20      	ldr	r2, [pc, #128]	; (8004190 <HAL_DMA_IRQHandler+0xd00>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d027      	beq.n	8004162 <HAL_DMA_IRQHandler+0xcd2>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a1f      	ldr	r2, [pc, #124]	; (8004194 <HAL_DMA_IRQHandler+0xd04>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d022      	beq.n	8004162 <HAL_DMA_IRQHandler+0xcd2>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a1d      	ldr	r2, [pc, #116]	; (8004198 <HAL_DMA_IRQHandler+0xd08>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d01d      	beq.n	8004162 <HAL_DMA_IRQHandler+0xcd2>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a1c      	ldr	r2, [pc, #112]	; (800419c <HAL_DMA_IRQHandler+0xd0c>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d018      	beq.n	8004162 <HAL_DMA_IRQHandler+0xcd2>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a1a      	ldr	r2, [pc, #104]	; (80041a0 <HAL_DMA_IRQHandler+0xd10>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d013      	beq.n	8004162 <HAL_DMA_IRQHandler+0xcd2>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a19      	ldr	r2, [pc, #100]	; (80041a4 <HAL_DMA_IRQHandler+0xd14>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d00e      	beq.n	8004162 <HAL_DMA_IRQHandler+0xcd2>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a17      	ldr	r2, [pc, #92]	; (80041a8 <HAL_DMA_IRQHandler+0xd18>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d009      	beq.n	8004162 <HAL_DMA_IRQHandler+0xcd2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a16      	ldr	r2, [pc, #88]	; (80041ac <HAL_DMA_IRQHandler+0xd1c>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d004      	beq.n	8004162 <HAL_DMA_IRQHandler+0xcd2>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a14      	ldr	r2, [pc, #80]	; (80041b0 <HAL_DMA_IRQHandler+0xd20>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d128      	bne.n	80041b4 <HAL_DMA_IRQHandler+0xd24>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0214 	bic.w	r2, r2, #20
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	e027      	b.n	80041c4 <HAL_DMA_IRQHandler+0xd34>
 8004174:	40020010 	.word	0x40020010
 8004178:	40020028 	.word	0x40020028
 800417c:	40020040 	.word	0x40020040
 8004180:	40020058 	.word	0x40020058
 8004184:	40020070 	.word	0x40020070
 8004188:	40020088 	.word	0x40020088
 800418c:	400200a0 	.word	0x400200a0
 8004190:	400200b8 	.word	0x400200b8
 8004194:	40020410 	.word	0x40020410
 8004198:	40020428 	.word	0x40020428
 800419c:	40020440 	.word	0x40020440
 80041a0:	40020458 	.word	0x40020458
 80041a4:	40020470 	.word	0x40020470
 80041a8:	40020488 	.word	0x40020488
 80041ac:	400204a0 	.word	0x400204a0
 80041b0:	400204b8 	.word	0x400204b8
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 020a 	bic.w	r2, r2, #10
 80041c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 8097 	beq.w	800430c <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041e6:	e091      	b.n	800430c <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ec:	f003 031f 	and.w	r3, r3, #31
 80041f0:	2208      	movs	r2, #8
 80041f2:	409a      	lsls	r2, r3
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	4013      	ands	r3, r2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 8088 	beq.w	800430e <HAL_DMA_IRQHandler+0xe7e>
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 8082 	beq.w	800430e <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a41      	ldr	r2, [pc, #260]	; (8004314 <HAL_DMA_IRQHandler+0xe84>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d04a      	beq.n	80042aa <HAL_DMA_IRQHandler+0xe1a>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a3f      	ldr	r2, [pc, #252]	; (8004318 <HAL_DMA_IRQHandler+0xe88>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d045      	beq.n	80042aa <HAL_DMA_IRQHandler+0xe1a>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a3e      	ldr	r2, [pc, #248]	; (800431c <HAL_DMA_IRQHandler+0xe8c>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d040      	beq.n	80042aa <HAL_DMA_IRQHandler+0xe1a>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a3c      	ldr	r2, [pc, #240]	; (8004320 <HAL_DMA_IRQHandler+0xe90>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d03b      	beq.n	80042aa <HAL_DMA_IRQHandler+0xe1a>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a3b      	ldr	r2, [pc, #236]	; (8004324 <HAL_DMA_IRQHandler+0xe94>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d036      	beq.n	80042aa <HAL_DMA_IRQHandler+0xe1a>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a39      	ldr	r2, [pc, #228]	; (8004328 <HAL_DMA_IRQHandler+0xe98>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d031      	beq.n	80042aa <HAL_DMA_IRQHandler+0xe1a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a38      	ldr	r2, [pc, #224]	; (800432c <HAL_DMA_IRQHandler+0xe9c>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d02c      	beq.n	80042aa <HAL_DMA_IRQHandler+0xe1a>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a36      	ldr	r2, [pc, #216]	; (8004330 <HAL_DMA_IRQHandler+0xea0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d027      	beq.n	80042aa <HAL_DMA_IRQHandler+0xe1a>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a35      	ldr	r2, [pc, #212]	; (8004334 <HAL_DMA_IRQHandler+0xea4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d022      	beq.n	80042aa <HAL_DMA_IRQHandler+0xe1a>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a33      	ldr	r2, [pc, #204]	; (8004338 <HAL_DMA_IRQHandler+0xea8>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d01d      	beq.n	80042aa <HAL_DMA_IRQHandler+0xe1a>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a32      	ldr	r2, [pc, #200]	; (800433c <HAL_DMA_IRQHandler+0xeac>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d018      	beq.n	80042aa <HAL_DMA_IRQHandler+0xe1a>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a30      	ldr	r2, [pc, #192]	; (8004340 <HAL_DMA_IRQHandler+0xeb0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d013      	beq.n	80042aa <HAL_DMA_IRQHandler+0xe1a>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a2f      	ldr	r2, [pc, #188]	; (8004344 <HAL_DMA_IRQHandler+0xeb4>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d00e      	beq.n	80042aa <HAL_DMA_IRQHandler+0xe1a>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a2d      	ldr	r2, [pc, #180]	; (8004348 <HAL_DMA_IRQHandler+0xeb8>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d009      	beq.n	80042aa <HAL_DMA_IRQHandler+0xe1a>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a2c      	ldr	r2, [pc, #176]	; (800434c <HAL_DMA_IRQHandler+0xebc>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d004      	beq.n	80042aa <HAL_DMA_IRQHandler+0xe1a>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a2a      	ldr	r2, [pc, #168]	; (8004350 <HAL_DMA_IRQHandler+0xec0>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d108      	bne.n	80042bc <HAL_DMA_IRQHandler+0xe2c>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 021c 	bic.w	r2, r2, #28
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	e007      	b.n	80042cc <HAL_DMA_IRQHandler+0xe3c>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 020e 	bic.w	r2, r2, #14
 80042ca:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d0:	f003 031f 	and.w	r3, r3, #31
 80042d4:	2201      	movs	r2, #1
 80042d6:	409a      	lsls	r2, r3
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d009      	beq.n	800430e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	4798      	blx	r3
 8004302:	e004      	b.n	800430e <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004304:	bf00      	nop
 8004306:	e002      	b.n	800430e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004308:	bf00      	nop
 800430a:	e000      	b.n	800430e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800430c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800430e:	3728      	adds	r7, #40	; 0x28
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40020010 	.word	0x40020010
 8004318:	40020028 	.word	0x40020028
 800431c:	40020040 	.word	0x40020040
 8004320:	40020058 	.word	0x40020058
 8004324:	40020070 	.word	0x40020070
 8004328:	40020088 	.word	0x40020088
 800432c:	400200a0 	.word	0x400200a0
 8004330:	400200b8 	.word	0x400200b8
 8004334:	40020410 	.word	0x40020410
 8004338:	40020428 	.word	0x40020428
 800433c:	40020440 	.word	0x40020440
 8004340:	40020458 	.word	0x40020458
 8004344:	40020470 	.word	0x40020470
 8004348:	40020488 	.word	0x40020488
 800434c:	400204a0 	.word	0x400204a0
 8004350:	400204b8 	.word	0x400204b8

08004354 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004354:	b480      	push	{r7}
 8004356:	b087      	sub	sp, #28
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
 8004360:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004366:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a7f      	ldr	r2, [pc, #508]	; (8004570 <DMA_SetConfig+0x21c>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d072      	beq.n	800445e <DMA_SetConfig+0x10a>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a7d      	ldr	r2, [pc, #500]	; (8004574 <DMA_SetConfig+0x220>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d06d      	beq.n	800445e <DMA_SetConfig+0x10a>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a7c      	ldr	r2, [pc, #496]	; (8004578 <DMA_SetConfig+0x224>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d068      	beq.n	800445e <DMA_SetConfig+0x10a>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a7a      	ldr	r2, [pc, #488]	; (800457c <DMA_SetConfig+0x228>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d063      	beq.n	800445e <DMA_SetConfig+0x10a>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a79      	ldr	r2, [pc, #484]	; (8004580 <DMA_SetConfig+0x22c>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d05e      	beq.n	800445e <DMA_SetConfig+0x10a>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a77      	ldr	r2, [pc, #476]	; (8004584 <DMA_SetConfig+0x230>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d059      	beq.n	800445e <DMA_SetConfig+0x10a>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a76      	ldr	r2, [pc, #472]	; (8004588 <DMA_SetConfig+0x234>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d054      	beq.n	800445e <DMA_SetConfig+0x10a>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a74      	ldr	r2, [pc, #464]	; (800458c <DMA_SetConfig+0x238>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d04f      	beq.n	800445e <DMA_SetConfig+0x10a>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a73      	ldr	r2, [pc, #460]	; (8004590 <DMA_SetConfig+0x23c>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d04a      	beq.n	800445e <DMA_SetConfig+0x10a>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a71      	ldr	r2, [pc, #452]	; (8004594 <DMA_SetConfig+0x240>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d045      	beq.n	800445e <DMA_SetConfig+0x10a>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a70      	ldr	r2, [pc, #448]	; (8004598 <DMA_SetConfig+0x244>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d040      	beq.n	800445e <DMA_SetConfig+0x10a>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a6e      	ldr	r2, [pc, #440]	; (800459c <DMA_SetConfig+0x248>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d03b      	beq.n	800445e <DMA_SetConfig+0x10a>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a6d      	ldr	r2, [pc, #436]	; (80045a0 <DMA_SetConfig+0x24c>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d036      	beq.n	800445e <DMA_SetConfig+0x10a>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a6b      	ldr	r2, [pc, #428]	; (80045a4 <DMA_SetConfig+0x250>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d031      	beq.n	800445e <DMA_SetConfig+0x10a>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a6a      	ldr	r2, [pc, #424]	; (80045a8 <DMA_SetConfig+0x254>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d02c      	beq.n	800445e <DMA_SetConfig+0x10a>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a68      	ldr	r2, [pc, #416]	; (80045ac <DMA_SetConfig+0x258>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d027      	beq.n	800445e <DMA_SetConfig+0x10a>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a67      	ldr	r2, [pc, #412]	; (80045b0 <DMA_SetConfig+0x25c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d022      	beq.n	800445e <DMA_SetConfig+0x10a>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a65      	ldr	r2, [pc, #404]	; (80045b4 <DMA_SetConfig+0x260>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d01d      	beq.n	800445e <DMA_SetConfig+0x10a>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a64      	ldr	r2, [pc, #400]	; (80045b8 <DMA_SetConfig+0x264>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d018      	beq.n	800445e <DMA_SetConfig+0x10a>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a62      	ldr	r2, [pc, #392]	; (80045bc <DMA_SetConfig+0x268>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d013      	beq.n	800445e <DMA_SetConfig+0x10a>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a61      	ldr	r2, [pc, #388]	; (80045c0 <DMA_SetConfig+0x26c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d00e      	beq.n	800445e <DMA_SetConfig+0x10a>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a5f      	ldr	r2, [pc, #380]	; (80045c4 <DMA_SetConfig+0x270>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d009      	beq.n	800445e <DMA_SetConfig+0x10a>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a5e      	ldr	r2, [pc, #376]	; (80045c8 <DMA_SetConfig+0x274>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d004      	beq.n	800445e <DMA_SetConfig+0x10a>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a5c      	ldr	r2, [pc, #368]	; (80045cc <DMA_SetConfig+0x278>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d101      	bne.n	8004462 <DMA_SetConfig+0x10e>
 800445e:	2301      	movs	r3, #1
 8004460:	e000      	b.n	8004464 <DMA_SetConfig+0x110>
 8004462:	2300      	movs	r3, #0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00d      	beq.n	8004484 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004470:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004476:	2b00      	cmp	r3, #0
 8004478:	d004      	beq.n	8004484 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004482:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a39      	ldr	r2, [pc, #228]	; (8004570 <DMA_SetConfig+0x21c>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d04a      	beq.n	8004524 <DMA_SetConfig+0x1d0>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a38      	ldr	r2, [pc, #224]	; (8004574 <DMA_SetConfig+0x220>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d045      	beq.n	8004524 <DMA_SetConfig+0x1d0>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a36      	ldr	r2, [pc, #216]	; (8004578 <DMA_SetConfig+0x224>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d040      	beq.n	8004524 <DMA_SetConfig+0x1d0>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a35      	ldr	r2, [pc, #212]	; (800457c <DMA_SetConfig+0x228>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d03b      	beq.n	8004524 <DMA_SetConfig+0x1d0>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a33      	ldr	r2, [pc, #204]	; (8004580 <DMA_SetConfig+0x22c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d036      	beq.n	8004524 <DMA_SetConfig+0x1d0>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a32      	ldr	r2, [pc, #200]	; (8004584 <DMA_SetConfig+0x230>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d031      	beq.n	8004524 <DMA_SetConfig+0x1d0>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a30      	ldr	r2, [pc, #192]	; (8004588 <DMA_SetConfig+0x234>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d02c      	beq.n	8004524 <DMA_SetConfig+0x1d0>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a2f      	ldr	r2, [pc, #188]	; (800458c <DMA_SetConfig+0x238>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d027      	beq.n	8004524 <DMA_SetConfig+0x1d0>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a2d      	ldr	r2, [pc, #180]	; (8004590 <DMA_SetConfig+0x23c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d022      	beq.n	8004524 <DMA_SetConfig+0x1d0>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a2c      	ldr	r2, [pc, #176]	; (8004594 <DMA_SetConfig+0x240>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d01d      	beq.n	8004524 <DMA_SetConfig+0x1d0>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a2a      	ldr	r2, [pc, #168]	; (8004598 <DMA_SetConfig+0x244>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d018      	beq.n	8004524 <DMA_SetConfig+0x1d0>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a29      	ldr	r2, [pc, #164]	; (800459c <DMA_SetConfig+0x248>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d013      	beq.n	8004524 <DMA_SetConfig+0x1d0>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a27      	ldr	r2, [pc, #156]	; (80045a0 <DMA_SetConfig+0x24c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d00e      	beq.n	8004524 <DMA_SetConfig+0x1d0>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a26      	ldr	r2, [pc, #152]	; (80045a4 <DMA_SetConfig+0x250>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d009      	beq.n	8004524 <DMA_SetConfig+0x1d0>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a24      	ldr	r2, [pc, #144]	; (80045a8 <DMA_SetConfig+0x254>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d004      	beq.n	8004524 <DMA_SetConfig+0x1d0>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a23      	ldr	r2, [pc, #140]	; (80045ac <DMA_SetConfig+0x258>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d101      	bne.n	8004528 <DMA_SetConfig+0x1d4>
 8004524:	2301      	movs	r3, #1
 8004526:	e000      	b.n	800452a <DMA_SetConfig+0x1d6>
 8004528:	2300      	movs	r3, #0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d059      	beq.n	80045e2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004532:	f003 031f 	and.w	r3, r3, #31
 8004536:	223f      	movs	r2, #63	; 0x3f
 8004538:	409a      	lsls	r2, r3
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800454c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	2b40      	cmp	r3, #64	; 0x40
 800455c:	d138      	bne.n	80045d0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68ba      	ldr	r2, [r7, #8]
 800456c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800456e:	e0ae      	b.n	80046ce <DMA_SetConfig+0x37a>
 8004570:	40020010 	.word	0x40020010
 8004574:	40020028 	.word	0x40020028
 8004578:	40020040 	.word	0x40020040
 800457c:	40020058 	.word	0x40020058
 8004580:	40020070 	.word	0x40020070
 8004584:	40020088 	.word	0x40020088
 8004588:	400200a0 	.word	0x400200a0
 800458c:	400200b8 	.word	0x400200b8
 8004590:	40020410 	.word	0x40020410
 8004594:	40020428 	.word	0x40020428
 8004598:	40020440 	.word	0x40020440
 800459c:	40020458 	.word	0x40020458
 80045a0:	40020470 	.word	0x40020470
 80045a4:	40020488 	.word	0x40020488
 80045a8:	400204a0 	.word	0x400204a0
 80045ac:	400204b8 	.word	0x400204b8
 80045b0:	58025408 	.word	0x58025408
 80045b4:	5802541c 	.word	0x5802541c
 80045b8:	58025430 	.word	0x58025430
 80045bc:	58025444 	.word	0x58025444
 80045c0:	58025458 	.word	0x58025458
 80045c4:	5802546c 	.word	0x5802546c
 80045c8:	58025480 	.word	0x58025480
 80045cc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	60da      	str	r2, [r3, #12]
}
 80045e0:	e075      	b.n	80046ce <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a3d      	ldr	r2, [pc, #244]	; (80046dc <DMA_SetConfig+0x388>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d04a      	beq.n	8004682 <DMA_SetConfig+0x32e>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a3b      	ldr	r2, [pc, #236]	; (80046e0 <DMA_SetConfig+0x38c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d045      	beq.n	8004682 <DMA_SetConfig+0x32e>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a3a      	ldr	r2, [pc, #232]	; (80046e4 <DMA_SetConfig+0x390>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d040      	beq.n	8004682 <DMA_SetConfig+0x32e>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a38      	ldr	r2, [pc, #224]	; (80046e8 <DMA_SetConfig+0x394>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d03b      	beq.n	8004682 <DMA_SetConfig+0x32e>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a37      	ldr	r2, [pc, #220]	; (80046ec <DMA_SetConfig+0x398>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d036      	beq.n	8004682 <DMA_SetConfig+0x32e>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a35      	ldr	r2, [pc, #212]	; (80046f0 <DMA_SetConfig+0x39c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d031      	beq.n	8004682 <DMA_SetConfig+0x32e>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a34      	ldr	r2, [pc, #208]	; (80046f4 <DMA_SetConfig+0x3a0>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d02c      	beq.n	8004682 <DMA_SetConfig+0x32e>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a32      	ldr	r2, [pc, #200]	; (80046f8 <DMA_SetConfig+0x3a4>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d027      	beq.n	8004682 <DMA_SetConfig+0x32e>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a31      	ldr	r2, [pc, #196]	; (80046fc <DMA_SetConfig+0x3a8>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d022      	beq.n	8004682 <DMA_SetConfig+0x32e>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a2f      	ldr	r2, [pc, #188]	; (8004700 <DMA_SetConfig+0x3ac>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d01d      	beq.n	8004682 <DMA_SetConfig+0x32e>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a2e      	ldr	r2, [pc, #184]	; (8004704 <DMA_SetConfig+0x3b0>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d018      	beq.n	8004682 <DMA_SetConfig+0x32e>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a2c      	ldr	r2, [pc, #176]	; (8004708 <DMA_SetConfig+0x3b4>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d013      	beq.n	8004682 <DMA_SetConfig+0x32e>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a2b      	ldr	r2, [pc, #172]	; (800470c <DMA_SetConfig+0x3b8>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d00e      	beq.n	8004682 <DMA_SetConfig+0x32e>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a29      	ldr	r2, [pc, #164]	; (8004710 <DMA_SetConfig+0x3bc>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d009      	beq.n	8004682 <DMA_SetConfig+0x32e>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a28      	ldr	r2, [pc, #160]	; (8004714 <DMA_SetConfig+0x3c0>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d004      	beq.n	8004682 <DMA_SetConfig+0x32e>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a26      	ldr	r2, [pc, #152]	; (8004718 <DMA_SetConfig+0x3c4>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d101      	bne.n	8004686 <DMA_SetConfig+0x332>
 8004682:	2301      	movs	r3, #1
 8004684:	e000      	b.n	8004688 <DMA_SetConfig+0x334>
 8004686:	2300      	movs	r3, #0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d020      	beq.n	80046ce <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004690:	f003 031f 	and.w	r3, r3, #31
 8004694:	2201      	movs	r2, #1
 8004696:	409a      	lsls	r2, r3
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	2b40      	cmp	r3, #64	; 0x40
 80046aa:	d108      	bne.n	80046be <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	60da      	str	r2, [r3, #12]
}
 80046bc:	e007      	b.n	80046ce <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	60da      	str	r2, [r3, #12]
}
 80046ce:	bf00      	nop
 80046d0:	371c      	adds	r7, #28
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	48022c08 	.word	0x48022c08
 80046e0:	48022c1c 	.word	0x48022c1c
 80046e4:	48022c30 	.word	0x48022c30
 80046e8:	48022c44 	.word	0x48022c44
 80046ec:	48022c58 	.word	0x48022c58
 80046f0:	48022c6c 	.word	0x48022c6c
 80046f4:	48022c80 	.word	0x48022c80
 80046f8:	48022c94 	.word	0x48022c94
 80046fc:	58025408 	.word	0x58025408
 8004700:	5802541c 	.word	0x5802541c
 8004704:	58025430 	.word	0x58025430
 8004708:	58025444 	.word	0x58025444
 800470c:	58025458 	.word	0x58025458
 8004710:	5802546c 	.word	0x5802546c
 8004714:	58025480 	.word	0x58025480
 8004718:	58025494 	.word	0x58025494

0800471c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a42      	ldr	r2, [pc, #264]	; (8004834 <DMA_CalcBaseAndBitshift+0x118>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d04a      	beq.n	80047c4 <DMA_CalcBaseAndBitshift+0xa8>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a41      	ldr	r2, [pc, #260]	; (8004838 <DMA_CalcBaseAndBitshift+0x11c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d045      	beq.n	80047c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a3f      	ldr	r2, [pc, #252]	; (800483c <DMA_CalcBaseAndBitshift+0x120>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d040      	beq.n	80047c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a3e      	ldr	r2, [pc, #248]	; (8004840 <DMA_CalcBaseAndBitshift+0x124>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d03b      	beq.n	80047c4 <DMA_CalcBaseAndBitshift+0xa8>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a3c      	ldr	r2, [pc, #240]	; (8004844 <DMA_CalcBaseAndBitshift+0x128>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d036      	beq.n	80047c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a3b      	ldr	r2, [pc, #236]	; (8004848 <DMA_CalcBaseAndBitshift+0x12c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d031      	beq.n	80047c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a39      	ldr	r2, [pc, #228]	; (800484c <DMA_CalcBaseAndBitshift+0x130>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d02c      	beq.n	80047c4 <DMA_CalcBaseAndBitshift+0xa8>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a38      	ldr	r2, [pc, #224]	; (8004850 <DMA_CalcBaseAndBitshift+0x134>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d027      	beq.n	80047c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a36      	ldr	r2, [pc, #216]	; (8004854 <DMA_CalcBaseAndBitshift+0x138>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d022      	beq.n	80047c4 <DMA_CalcBaseAndBitshift+0xa8>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a35      	ldr	r2, [pc, #212]	; (8004858 <DMA_CalcBaseAndBitshift+0x13c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d01d      	beq.n	80047c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a33      	ldr	r2, [pc, #204]	; (800485c <DMA_CalcBaseAndBitshift+0x140>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d018      	beq.n	80047c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a32      	ldr	r2, [pc, #200]	; (8004860 <DMA_CalcBaseAndBitshift+0x144>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d013      	beq.n	80047c4 <DMA_CalcBaseAndBitshift+0xa8>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a30      	ldr	r2, [pc, #192]	; (8004864 <DMA_CalcBaseAndBitshift+0x148>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d00e      	beq.n	80047c4 <DMA_CalcBaseAndBitshift+0xa8>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a2f      	ldr	r2, [pc, #188]	; (8004868 <DMA_CalcBaseAndBitshift+0x14c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d009      	beq.n	80047c4 <DMA_CalcBaseAndBitshift+0xa8>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a2d      	ldr	r2, [pc, #180]	; (800486c <DMA_CalcBaseAndBitshift+0x150>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d004      	beq.n	80047c4 <DMA_CalcBaseAndBitshift+0xa8>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a2c      	ldr	r2, [pc, #176]	; (8004870 <DMA_CalcBaseAndBitshift+0x154>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d101      	bne.n	80047c8 <DMA_CalcBaseAndBitshift+0xac>
 80047c4:	2301      	movs	r3, #1
 80047c6:	e000      	b.n	80047ca <DMA_CalcBaseAndBitshift+0xae>
 80047c8:	2300      	movs	r3, #0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d024      	beq.n	8004818 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	3b10      	subs	r3, #16
 80047d6:	4a27      	ldr	r2, [pc, #156]	; (8004874 <DMA_CalcBaseAndBitshift+0x158>)
 80047d8:	fba2 2303 	umull	r2, r3, r2, r3
 80047dc:	091b      	lsrs	r3, r3, #4
 80047de:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	4a24      	ldr	r2, [pc, #144]	; (8004878 <DMA_CalcBaseAndBitshift+0x15c>)
 80047e8:	5cd3      	ldrb	r3, [r2, r3]
 80047ea:	461a      	mov	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2b03      	cmp	r3, #3
 80047f4:	d908      	bls.n	8004808 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	461a      	mov	r2, r3
 80047fc:	4b1f      	ldr	r3, [pc, #124]	; (800487c <DMA_CalcBaseAndBitshift+0x160>)
 80047fe:	4013      	ands	r3, r2
 8004800:	1d1a      	adds	r2, r3, #4
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	659a      	str	r2, [r3, #88]	; 0x58
 8004806:	e00d      	b.n	8004824 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	461a      	mov	r2, r3
 800480e:	4b1b      	ldr	r3, [pc, #108]	; (800487c <DMA_CalcBaseAndBitshift+0x160>)
 8004810:	4013      	ands	r3, r2
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6593      	str	r3, [r2, #88]	; 0x58
 8004816:	e005      	b.n	8004824 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004828:	4618      	mov	r0, r3
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	40020010 	.word	0x40020010
 8004838:	40020028 	.word	0x40020028
 800483c:	40020040 	.word	0x40020040
 8004840:	40020058 	.word	0x40020058
 8004844:	40020070 	.word	0x40020070
 8004848:	40020088 	.word	0x40020088
 800484c:	400200a0 	.word	0x400200a0
 8004850:	400200b8 	.word	0x400200b8
 8004854:	40020410 	.word	0x40020410
 8004858:	40020428 	.word	0x40020428
 800485c:	40020440 	.word	0x40020440
 8004860:	40020458 	.word	0x40020458
 8004864:	40020470 	.word	0x40020470
 8004868:	40020488 	.word	0x40020488
 800486c:	400204a0 	.word	0x400204a0
 8004870:	400204b8 	.word	0x400204b8
 8004874:	aaaaaaab 	.word	0xaaaaaaab
 8004878:	0800c87c 	.word	0x0800c87c
 800487c:	fffffc00 	.word	0xfffffc00

08004880 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004888:	2300      	movs	r3, #0
 800488a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d120      	bne.n	80048d6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004898:	2b03      	cmp	r3, #3
 800489a:	d858      	bhi.n	800494e <DMA_CheckFifoParam+0xce>
 800489c:	a201      	add	r2, pc, #4	; (adr r2, 80048a4 <DMA_CheckFifoParam+0x24>)
 800489e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a2:	bf00      	nop
 80048a4:	080048b5 	.word	0x080048b5
 80048a8:	080048c7 	.word	0x080048c7
 80048ac:	080048b5 	.word	0x080048b5
 80048b0:	0800494f 	.word	0x0800494f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d048      	beq.n	8004952 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80048c4:	e045      	b.n	8004952 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048ce:	d142      	bne.n	8004956 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80048d4:	e03f      	b.n	8004956 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048de:	d123      	bne.n	8004928 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e4:	2b03      	cmp	r3, #3
 80048e6:	d838      	bhi.n	800495a <DMA_CheckFifoParam+0xda>
 80048e8:	a201      	add	r2, pc, #4	; (adr r2, 80048f0 <DMA_CheckFifoParam+0x70>)
 80048ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ee:	bf00      	nop
 80048f0:	08004901 	.word	0x08004901
 80048f4:	08004907 	.word	0x08004907
 80048f8:	08004901 	.word	0x08004901
 80048fc:	08004919 	.word	0x08004919
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	73fb      	strb	r3, [r7, #15]
        break;
 8004904:	e030      	b.n	8004968 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d025      	beq.n	800495e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004916:	e022      	b.n	800495e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004920:	d11f      	bne.n	8004962 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004926:	e01c      	b.n	8004962 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492c:	2b02      	cmp	r3, #2
 800492e:	d902      	bls.n	8004936 <DMA_CheckFifoParam+0xb6>
 8004930:	2b03      	cmp	r3, #3
 8004932:	d003      	beq.n	800493c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004934:	e018      	b.n	8004968 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	73fb      	strb	r3, [r7, #15]
        break;
 800493a:	e015      	b.n	8004968 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004940:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00e      	beq.n	8004966 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	73fb      	strb	r3, [r7, #15]
    break;
 800494c:	e00b      	b.n	8004966 <DMA_CheckFifoParam+0xe6>
        break;
 800494e:	bf00      	nop
 8004950:	e00a      	b.n	8004968 <DMA_CheckFifoParam+0xe8>
        break;
 8004952:	bf00      	nop
 8004954:	e008      	b.n	8004968 <DMA_CheckFifoParam+0xe8>
        break;
 8004956:	bf00      	nop
 8004958:	e006      	b.n	8004968 <DMA_CheckFifoParam+0xe8>
        break;
 800495a:	bf00      	nop
 800495c:	e004      	b.n	8004968 <DMA_CheckFifoParam+0xe8>
        break;
 800495e:	bf00      	nop
 8004960:	e002      	b.n	8004968 <DMA_CheckFifoParam+0xe8>
        break;
 8004962:	bf00      	nop
 8004964:	e000      	b.n	8004968 <DMA_CheckFifoParam+0xe8>
    break;
 8004966:	bf00      	nop
    }
  }

  return status;
 8004968:	7bfb      	ldrb	r3, [r7, #15]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop

08004978 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a38      	ldr	r2, [pc, #224]	; (8004a6c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d022      	beq.n	80049d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a36      	ldr	r2, [pc, #216]	; (8004a70 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d01d      	beq.n	80049d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a35      	ldr	r2, [pc, #212]	; (8004a74 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d018      	beq.n	80049d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a33      	ldr	r2, [pc, #204]	; (8004a78 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d013      	beq.n	80049d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a32      	ldr	r2, [pc, #200]	; (8004a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d00e      	beq.n	80049d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a30      	ldr	r2, [pc, #192]	; (8004a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d009      	beq.n	80049d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a2f      	ldr	r2, [pc, #188]	; (8004a84 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d004      	beq.n	80049d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a2d      	ldr	r2, [pc, #180]	; (8004a88 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d101      	bne.n	80049da <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80049d6:	2301      	movs	r3, #1
 80049d8:	e000      	b.n	80049dc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80049da:	2300      	movs	r3, #0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d01a      	beq.n	8004a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	3b08      	subs	r3, #8
 80049e8:	4a28      	ldr	r2, [pc, #160]	; (8004a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80049ea:	fba2 2303 	umull	r2, r3, r2, r3
 80049ee:	091b      	lsrs	r3, r3, #4
 80049f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	4b26      	ldr	r3, [pc, #152]	; (8004a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80049f6:	4413      	add	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	461a      	mov	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a24      	ldr	r2, [pc, #144]	; (8004a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004a04:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f003 031f 	and.w	r3, r3, #31
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	409a      	lsls	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004a14:	e024      	b.n	8004a60 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	3b10      	subs	r3, #16
 8004a1e:	4a1e      	ldr	r2, [pc, #120]	; (8004a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004a20:	fba2 2303 	umull	r2, r3, r2, r3
 8004a24:	091b      	lsrs	r3, r3, #4
 8004a26:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	4a1c      	ldr	r2, [pc, #112]	; (8004a9c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d806      	bhi.n	8004a3e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4a1b      	ldr	r2, [pc, #108]	; (8004aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d902      	bls.n	8004a3e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	3308      	adds	r3, #8
 8004a3c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	4b18      	ldr	r3, [pc, #96]	; (8004aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004a42:	4413      	add	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	461a      	mov	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a16      	ldr	r2, [pc, #88]	; (8004aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004a50:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f003 031f 	and.w	r3, r3, #31
 8004a58:	2201      	movs	r2, #1
 8004a5a:	409a      	lsls	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004a60:	bf00      	nop
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	58025408 	.word	0x58025408
 8004a70:	5802541c 	.word	0x5802541c
 8004a74:	58025430 	.word	0x58025430
 8004a78:	58025444 	.word	0x58025444
 8004a7c:	58025458 	.word	0x58025458
 8004a80:	5802546c 	.word	0x5802546c
 8004a84:	58025480 	.word	0x58025480
 8004a88:	58025494 	.word	0x58025494
 8004a8c:	cccccccd 	.word	0xcccccccd
 8004a90:	16009600 	.word	0x16009600
 8004a94:	58025880 	.word	0x58025880
 8004a98:	aaaaaaab 	.word	0xaaaaaaab
 8004a9c:	400204b8 	.word	0x400204b8
 8004aa0:	4002040f 	.word	0x4002040f
 8004aa4:	10008200 	.word	0x10008200
 8004aa8:	40020880 	.word	0x40020880

08004aac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d04a      	beq.n	8004b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	d847      	bhi.n	8004b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a25      	ldr	r2, [pc, #148]	; (8004b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d022      	beq.n	8004b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a24      	ldr	r2, [pc, #144]	; (8004b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d01d      	beq.n	8004b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a22      	ldr	r2, [pc, #136]	; (8004b6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d018      	beq.n	8004b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a21      	ldr	r2, [pc, #132]	; (8004b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d013      	beq.n	8004b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a1f      	ldr	r2, [pc, #124]	; (8004b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d00e      	beq.n	8004b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a1e      	ldr	r2, [pc, #120]	; (8004b78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d009      	beq.n	8004b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a1c      	ldr	r2, [pc, #112]	; (8004b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d004      	beq.n	8004b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a1b      	ldr	r2, [pc, #108]	; (8004b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d101      	bne.n	8004b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e000      	b.n	8004b1e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00a      	beq.n	8004b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	4b17      	ldr	r3, [pc, #92]	; (8004b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004b26:	4413      	add	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a15      	ldr	r2, [pc, #84]	; (8004b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004b34:	671a      	str	r2, [r3, #112]	; 0x70
 8004b36:	e009      	b.n	8004b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	4b14      	ldr	r3, [pc, #80]	; (8004b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004b3c:	4413      	add	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	461a      	mov	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a11      	ldr	r2, [pc, #68]	; (8004b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004b4a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	2201      	movs	r2, #1
 8004b52:	409a      	lsls	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004b58:	bf00      	nop
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	58025408 	.word	0x58025408
 8004b68:	5802541c 	.word	0x5802541c
 8004b6c:	58025430 	.word	0x58025430
 8004b70:	58025444 	.word	0x58025444
 8004b74:	58025458 	.word	0x58025458
 8004b78:	5802546c 	.word	0x5802546c
 8004b7c:	58025480 	.word	0x58025480
 8004b80:	58025494 	.word	0x58025494
 8004b84:	1600963f 	.word	0x1600963f
 8004b88:	58025940 	.word	0x58025940
 8004b8c:	1000823f 	.word	0x1000823f
 8004b90:	40020940 	.word	0x40020940

08004b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b089      	sub	sp, #36	; 0x24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004ba2:	4b89      	ldr	r3, [pc, #548]	; (8004dc8 <HAL_GPIO_Init+0x234>)
 8004ba4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004ba6:	e194      	b.n	8004ed2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	2101      	movs	r1, #1
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f000 8186 	beq.w	8004ecc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f003 0303 	and.w	r3, r3, #3
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d005      	beq.n	8004bd8 <HAL_GPIO_Init+0x44>
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f003 0303 	and.w	r3, r3, #3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d130      	bne.n	8004c3a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	2203      	movs	r2, #3
 8004be4:	fa02 f303 	lsl.w	r3, r2, r3
 8004be8:	43db      	mvns	r3, r3
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	4013      	ands	r3, r2
 8004bee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	68da      	ldr	r2, [r3, #12]
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c0e:	2201      	movs	r2, #1
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	fa02 f303 	lsl.w	r3, r2, r3
 8004c16:	43db      	mvns	r3, r3
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	091b      	lsrs	r3, r3, #4
 8004c24:	f003 0201 	and.w	r2, r3, #1
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	2b03      	cmp	r3, #3
 8004c44:	d017      	beq.n	8004c76 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	005b      	lsls	r3, r3, #1
 8004c50:	2203      	movs	r2, #3
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	43db      	mvns	r3, r3
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	689a      	ldr	r2, [r3, #8]
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	005b      	lsls	r3, r3, #1
 8004c66:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f003 0303 	and.w	r3, r3, #3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d123      	bne.n	8004cca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	08da      	lsrs	r2, r3, #3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	3208      	adds	r2, #8
 8004c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	f003 0307 	and.w	r3, r3, #7
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	220f      	movs	r2, #15
 8004c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9e:	43db      	mvns	r3, r3
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	691a      	ldr	r2, [r3, #16]
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	f003 0307 	and.w	r3, r3, #7
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	08da      	lsrs	r2, r3, #3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3208      	adds	r2, #8
 8004cc4:	69b9      	ldr	r1, [r7, #24]
 8004cc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	005b      	lsls	r3, r3, #1
 8004cd4:	2203      	movs	r2, #3
 8004cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cda:	43db      	mvns	r3, r3
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	4013      	ands	r3, r2
 8004ce0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f003 0203 	and.w	r2, r3, #3
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 80e0 	beq.w	8004ecc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d0c:	4b2f      	ldr	r3, [pc, #188]	; (8004dcc <HAL_GPIO_Init+0x238>)
 8004d0e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004d12:	4a2e      	ldr	r2, [pc, #184]	; (8004dcc <HAL_GPIO_Init+0x238>)
 8004d14:	f043 0302 	orr.w	r3, r3, #2
 8004d18:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8004d1c:	4b2b      	ldr	r3, [pc, #172]	; (8004dcc <HAL_GPIO_Init+0x238>)
 8004d1e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	60fb      	str	r3, [r7, #12]
 8004d28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d2a:	4a29      	ldr	r2, [pc, #164]	; (8004dd0 <HAL_GPIO_Init+0x23c>)
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	089b      	lsrs	r3, r3, #2
 8004d30:	3302      	adds	r3, #2
 8004d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	f003 0303 	and.w	r3, r3, #3
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	220f      	movs	r2, #15
 8004d42:	fa02 f303 	lsl.w	r3, r2, r3
 8004d46:	43db      	mvns	r3, r3
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a20      	ldr	r2, [pc, #128]	; (8004dd4 <HAL_GPIO_Init+0x240>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d052      	beq.n	8004dfc <HAL_GPIO_Init+0x268>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a1f      	ldr	r2, [pc, #124]	; (8004dd8 <HAL_GPIO_Init+0x244>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d031      	beq.n	8004dc2 <HAL_GPIO_Init+0x22e>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a1e      	ldr	r2, [pc, #120]	; (8004ddc <HAL_GPIO_Init+0x248>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d02b      	beq.n	8004dbe <HAL_GPIO_Init+0x22a>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a1d      	ldr	r2, [pc, #116]	; (8004de0 <HAL_GPIO_Init+0x24c>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d025      	beq.n	8004dba <HAL_GPIO_Init+0x226>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a1c      	ldr	r2, [pc, #112]	; (8004de4 <HAL_GPIO_Init+0x250>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d01f      	beq.n	8004db6 <HAL_GPIO_Init+0x222>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a1b      	ldr	r2, [pc, #108]	; (8004de8 <HAL_GPIO_Init+0x254>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d019      	beq.n	8004db2 <HAL_GPIO_Init+0x21e>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a1a      	ldr	r2, [pc, #104]	; (8004dec <HAL_GPIO_Init+0x258>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d013      	beq.n	8004dae <HAL_GPIO_Init+0x21a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a19      	ldr	r2, [pc, #100]	; (8004df0 <HAL_GPIO_Init+0x25c>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d00d      	beq.n	8004daa <HAL_GPIO_Init+0x216>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a18      	ldr	r2, [pc, #96]	; (8004df4 <HAL_GPIO_Init+0x260>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d007      	beq.n	8004da6 <HAL_GPIO_Init+0x212>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a17      	ldr	r2, [pc, #92]	; (8004df8 <HAL_GPIO_Init+0x264>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d101      	bne.n	8004da2 <HAL_GPIO_Init+0x20e>
 8004d9e:	2309      	movs	r3, #9
 8004da0:	e02d      	b.n	8004dfe <HAL_GPIO_Init+0x26a>
 8004da2:	230a      	movs	r3, #10
 8004da4:	e02b      	b.n	8004dfe <HAL_GPIO_Init+0x26a>
 8004da6:	2308      	movs	r3, #8
 8004da8:	e029      	b.n	8004dfe <HAL_GPIO_Init+0x26a>
 8004daa:	2307      	movs	r3, #7
 8004dac:	e027      	b.n	8004dfe <HAL_GPIO_Init+0x26a>
 8004dae:	2306      	movs	r3, #6
 8004db0:	e025      	b.n	8004dfe <HAL_GPIO_Init+0x26a>
 8004db2:	2305      	movs	r3, #5
 8004db4:	e023      	b.n	8004dfe <HAL_GPIO_Init+0x26a>
 8004db6:	2304      	movs	r3, #4
 8004db8:	e021      	b.n	8004dfe <HAL_GPIO_Init+0x26a>
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e01f      	b.n	8004dfe <HAL_GPIO_Init+0x26a>
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	e01d      	b.n	8004dfe <HAL_GPIO_Init+0x26a>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e01b      	b.n	8004dfe <HAL_GPIO_Init+0x26a>
 8004dc6:	bf00      	nop
 8004dc8:	58000080 	.word	0x58000080
 8004dcc:	58024400 	.word	0x58024400
 8004dd0:	58000400 	.word	0x58000400
 8004dd4:	58020000 	.word	0x58020000
 8004dd8:	58020400 	.word	0x58020400
 8004ddc:	58020800 	.word	0x58020800
 8004de0:	58020c00 	.word	0x58020c00
 8004de4:	58021000 	.word	0x58021000
 8004de8:	58021400 	.word	0x58021400
 8004dec:	58021800 	.word	0x58021800
 8004df0:	58021c00 	.word	0x58021c00
 8004df4:	58022000 	.word	0x58022000
 8004df8:	58022400 	.word	0x58022400
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	69fa      	ldr	r2, [r7, #28]
 8004e00:	f002 0203 	and.w	r2, r2, #3
 8004e04:	0092      	lsls	r2, r2, #2
 8004e06:	4093      	lsls	r3, r2
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e0e:	4938      	ldr	r1, [pc, #224]	; (8004ef0 <HAL_GPIO_Init+0x35c>)
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	089b      	lsrs	r3, r3, #2
 8004e14:	3302      	adds	r3, #2
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	43db      	mvns	r3, r3
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004e42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	43db      	mvns	r3, r3
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	4013      	ands	r3, r2
 8004e5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d003      	beq.n	8004e70 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004e70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	43db      	mvns	r3, r3
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	4013      	ands	r3, r2
 8004e86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d003      	beq.n	8004e9c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	43db      	mvns	r3, r3
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	4013      	ands	r3, r2
 8004eb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f47f ae63 	bne.w	8004ba8 <HAL_GPIO_Init+0x14>
  }
}
 8004ee2:	bf00      	nop
 8004ee4:	bf00      	nop
 8004ee6:	3724      	adds	r7, #36	; 0x24
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr
 8004ef0:	58000400 	.word	0x58000400

08004ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	460b      	mov	r3, r1
 8004efe:	807b      	strh	r3, [r7, #2]
 8004f00:	4613      	mov	r3, r2
 8004f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f04:	787b      	ldrb	r3, [r7, #1]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f0a:	887a      	ldrh	r2, [r7, #2]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004f10:	e003      	b.n	8004f1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004f12:	887b      	ldrh	r3, [r7, #2]
 8004f14:	041a      	lsls	r2, r3, #16
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	619a      	str	r2, [r3, #24]
}
 8004f1a:	bf00      	nop
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
	...

08004f28 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004f30:	4b29      	ldr	r3, [pc, #164]	; (8004fd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	2b06      	cmp	r3, #6
 8004f3a:	d00a      	beq.n	8004f52 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004f3c:	4b26      	ldr	r3, [pc, #152]	; (8004fd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d001      	beq.n	8004f4e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e040      	b.n	8004fd0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	e03e      	b.n	8004fd0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004f52:	4b21      	ldr	r3, [pc, #132]	; (8004fd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004f5a:	491f      	ldr	r1, [pc, #124]	; (8004fd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004f62:	f7fc fa81 	bl	8001468 <HAL_GetTick>
 8004f66:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f68:	e009      	b.n	8004f7e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004f6a:	f7fc fa7d 	bl	8001468 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f78:	d901      	bls.n	8004f7e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e028      	b.n	8004fd0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f7e:	4b16      	ldr	r3, [pc, #88]	; (8004fd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f8a:	d1ee      	bne.n	8004f6a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b1e      	cmp	r3, #30
 8004f90:	d008      	beq.n	8004fa4 <HAL_PWREx_ConfigSupply+0x7c>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b2e      	cmp	r3, #46	; 0x2e
 8004f96:	d005      	beq.n	8004fa4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b1d      	cmp	r3, #29
 8004f9c:	d002      	beq.n	8004fa4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b2d      	cmp	r3, #45	; 0x2d
 8004fa2:	d114      	bne.n	8004fce <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004fa4:	f7fc fa60 	bl	8001468 <HAL_GetTick>
 8004fa8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004faa:	e009      	b.n	8004fc0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004fac:	f7fc fa5c 	bl	8001468 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fba:	d901      	bls.n	8004fc0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e007      	b.n	8004fd0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004fc0:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fcc:	d1ee      	bne.n	8004fac <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	58024800 	.word	0x58024800

08004fdc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b08c      	sub	sp, #48	; 0x30
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d102      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	f000 bc1f 	b.w	800582e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 80b3 	beq.w	8005164 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ffe:	4b95      	ldr	r3, [pc, #596]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005006:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005008:	4b92      	ldr	r3, [pc, #584]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 800500a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800500e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005010:	2b10      	cmp	r3, #16
 8005012:	d007      	beq.n	8005024 <HAL_RCC_OscConfig+0x48>
 8005014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005016:	2b18      	cmp	r3, #24
 8005018:	d112      	bne.n	8005040 <HAL_RCC_OscConfig+0x64>
 800501a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501c:	f003 0303 	and.w	r3, r3, #3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d10d      	bne.n	8005040 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005024:	4b8b      	ldr	r3, [pc, #556]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502c:	2b00      	cmp	r3, #0
 800502e:	f000 8098 	beq.w	8005162 <HAL_RCC_OscConfig+0x186>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	f040 8093 	bne.w	8005162 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e3f6      	b.n	800582e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005048:	d106      	bne.n	8005058 <HAL_RCC_OscConfig+0x7c>
 800504a:	4b82      	ldr	r3, [pc, #520]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a81      	ldr	r2, [pc, #516]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 8005050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005054:	6013      	str	r3, [r2, #0]
 8005056:	e058      	b.n	800510a <HAL_RCC_OscConfig+0x12e>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d112      	bne.n	8005086 <HAL_RCC_OscConfig+0xaa>
 8005060:	4b7c      	ldr	r3, [pc, #496]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a7b      	ldr	r2, [pc, #492]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 8005066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800506a:	6013      	str	r3, [r2, #0]
 800506c:	4b79      	ldr	r3, [pc, #484]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a78      	ldr	r2, [pc, #480]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 8005072:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005076:	6013      	str	r3, [r2, #0]
 8005078:	4b76      	ldr	r3, [pc, #472]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a75      	ldr	r2, [pc, #468]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 800507e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005082:	6013      	str	r3, [r2, #0]
 8005084:	e041      	b.n	800510a <HAL_RCC_OscConfig+0x12e>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800508e:	d112      	bne.n	80050b6 <HAL_RCC_OscConfig+0xda>
 8005090:	4b70      	ldr	r3, [pc, #448]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a6f      	ldr	r2, [pc, #444]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 8005096:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800509a:	6013      	str	r3, [r2, #0]
 800509c:	4b6d      	ldr	r3, [pc, #436]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a6c      	ldr	r2, [pc, #432]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 80050a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80050a6:	6013      	str	r3, [r2, #0]
 80050a8:	4b6a      	ldr	r3, [pc, #424]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a69      	ldr	r2, [pc, #420]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 80050ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050b2:	6013      	str	r3, [r2, #0]
 80050b4:	e029      	b.n	800510a <HAL_RCC_OscConfig+0x12e>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80050be:	d112      	bne.n	80050e6 <HAL_RCC_OscConfig+0x10a>
 80050c0:	4b64      	ldr	r3, [pc, #400]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a63      	ldr	r2, [pc, #396]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 80050c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050ca:	6013      	str	r3, [r2, #0]
 80050cc:	4b61      	ldr	r3, [pc, #388]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a60      	ldr	r2, [pc, #384]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 80050d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050d6:	6013      	str	r3, [r2, #0]
 80050d8:	4b5e      	ldr	r3, [pc, #376]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a5d      	ldr	r2, [pc, #372]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 80050de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050e2:	6013      	str	r3, [r2, #0]
 80050e4:	e011      	b.n	800510a <HAL_RCC_OscConfig+0x12e>
 80050e6:	4b5b      	ldr	r3, [pc, #364]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a5a      	ldr	r2, [pc, #360]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 80050ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050f0:	6013      	str	r3, [r2, #0]
 80050f2:	4b58      	ldr	r3, [pc, #352]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a57      	ldr	r2, [pc, #348]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 80050f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	4b55      	ldr	r3, [pc, #340]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a54      	ldr	r2, [pc, #336]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 8005104:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005108:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d013      	beq.n	800513a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005112:	f7fc f9a9 	bl	8001468 <HAL_GetTick>
 8005116:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005118:	e008      	b.n	800512c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800511a:	f7fc f9a5 	bl	8001468 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b64      	cmp	r3, #100	; 0x64
 8005126:	d901      	bls.n	800512c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e380      	b.n	800582e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800512c:	4b49      	ldr	r3, [pc, #292]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0f0      	beq.n	800511a <HAL_RCC_OscConfig+0x13e>
 8005138:	e014      	b.n	8005164 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800513a:	f7fc f995 	bl	8001468 <HAL_GetTick>
 800513e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005140:	e008      	b.n	8005154 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005142:	f7fc f991 	bl	8001468 <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	2b64      	cmp	r3, #100	; 0x64
 800514e:	d901      	bls.n	8005154 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e36c      	b.n	800582e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005154:	4b3f      	ldr	r3, [pc, #252]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1f0      	bne.n	8005142 <HAL_RCC_OscConfig+0x166>
 8005160:	e000      	b.n	8005164 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005162:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0302 	and.w	r3, r3, #2
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 808c 	beq.w	800528a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005172:	4b38      	ldr	r3, [pc, #224]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800517a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800517c:	4b35      	ldr	r3, [pc, #212]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 800517e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005180:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005182:	6a3b      	ldr	r3, [r7, #32]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d007      	beq.n	8005198 <HAL_RCC_OscConfig+0x1bc>
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	2b18      	cmp	r3, #24
 800518c:	d137      	bne.n	80051fe <HAL_RCC_OscConfig+0x222>
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	f003 0303 	and.w	r3, r3, #3
 8005194:	2b00      	cmp	r3, #0
 8005196:	d132      	bne.n	80051fe <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005198:	4b2e      	ldr	r3, [pc, #184]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0304 	and.w	r3, r3, #4
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d005      	beq.n	80051b0 <HAL_RCC_OscConfig+0x1d4>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e33e      	b.n	800582e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80051b0:	4b28      	ldr	r3, [pc, #160]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f023 0219 	bic.w	r2, r3, #25
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	4925      	ldr	r1, [pc, #148]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c2:	f7fc f951 	bl	8001468 <HAL_GetTick>
 80051c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051c8:	e008      	b.n	80051dc <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051ca:	f7fc f94d 	bl	8001468 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d901      	bls.n	80051dc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e328      	b.n	800582e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051dc:	4b1d      	ldr	r3, [pc, #116]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0f0      	beq.n	80051ca <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051e8:	4b1a      	ldr	r3, [pc, #104]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	061b      	lsls	r3, r3, #24
 80051f6:	4917      	ldr	r1, [pc, #92]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051fc:	e045      	b.n	800528a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d028      	beq.n	8005258 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005206:	4b13      	ldr	r3, [pc, #76]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f023 0219 	bic.w	r2, r3, #25
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	4910      	ldr	r1, [pc, #64]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 8005214:	4313      	orrs	r3, r2
 8005216:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005218:	f7fc f926 	bl	8001468 <HAL_GetTick>
 800521c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800521e:	e008      	b.n	8005232 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005220:	f7fc f922 	bl	8001468 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e2fd      	b.n	800582e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005232:	4b08      	ldr	r3, [pc, #32]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0304 	and.w	r3, r3, #4
 800523a:	2b00      	cmp	r3, #0
 800523c:	d0f0      	beq.n	8005220 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800523e:	4b05      	ldr	r3, [pc, #20]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	061b      	lsls	r3, r3, #24
 800524c:	4901      	ldr	r1, [pc, #4]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 800524e:	4313      	orrs	r3, r2
 8005250:	604b      	str	r3, [r1, #4]
 8005252:	e01a      	b.n	800528a <HAL_RCC_OscConfig+0x2ae>
 8005254:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005258:	4b97      	ldr	r3, [pc, #604]	; (80054b8 <HAL_RCC_OscConfig+0x4dc>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a96      	ldr	r2, [pc, #600]	; (80054b8 <HAL_RCC_OscConfig+0x4dc>)
 800525e:	f023 0301 	bic.w	r3, r3, #1
 8005262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005264:	f7fc f900 	bl	8001468 <HAL_GetTick>
 8005268:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800526a:	e008      	b.n	800527e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800526c:	f7fc f8fc 	bl	8001468 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b02      	cmp	r3, #2
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e2d7      	b.n	800582e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800527e:	4b8e      	ldr	r3, [pc, #568]	; (80054b8 <HAL_RCC_OscConfig+0x4dc>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0304 	and.w	r3, r3, #4
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1f0      	bne.n	800526c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0310 	and.w	r3, r3, #16
 8005292:	2b00      	cmp	r3, #0
 8005294:	d06a      	beq.n	800536c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005296:	4b88      	ldr	r3, [pc, #544]	; (80054b8 <HAL_RCC_OscConfig+0x4dc>)
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800529e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052a0:	4b85      	ldr	r3, [pc, #532]	; (80054b8 <HAL_RCC_OscConfig+0x4dc>)
 80052a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	2b08      	cmp	r3, #8
 80052aa:	d007      	beq.n	80052bc <HAL_RCC_OscConfig+0x2e0>
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	2b18      	cmp	r3, #24
 80052b0:	d11b      	bne.n	80052ea <HAL_RCC_OscConfig+0x30e>
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f003 0303 	and.w	r3, r3, #3
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d116      	bne.n	80052ea <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80052bc:	4b7e      	ldr	r3, [pc, #504]	; (80054b8 <HAL_RCC_OscConfig+0x4dc>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d005      	beq.n	80052d4 <HAL_RCC_OscConfig+0x2f8>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	69db      	ldr	r3, [r3, #28]
 80052cc:	2b80      	cmp	r3, #128	; 0x80
 80052ce:	d001      	beq.n	80052d4 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e2ac      	b.n	800582e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80052d4:	4b78      	ldr	r3, [pc, #480]	; (80054b8 <HAL_RCC_OscConfig+0x4dc>)
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	061b      	lsls	r3, r3, #24
 80052e2:	4975      	ldr	r1, [pc, #468]	; (80054b8 <HAL_RCC_OscConfig+0x4dc>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80052e8:	e040      	b.n	800536c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d023      	beq.n	800533a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80052f2:	4b71      	ldr	r3, [pc, #452]	; (80054b8 <HAL_RCC_OscConfig+0x4dc>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a70      	ldr	r2, [pc, #448]	; (80054b8 <HAL_RCC_OscConfig+0x4dc>)
 80052f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052fe:	f7fc f8b3 	bl	8001468 <HAL_GetTick>
 8005302:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005304:	e008      	b.n	8005318 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005306:	f7fc f8af 	bl	8001468 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	2b02      	cmp	r3, #2
 8005312:	d901      	bls.n	8005318 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e28a      	b.n	800582e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005318:	4b67      	ldr	r3, [pc, #412]	; (80054b8 <HAL_RCC_OscConfig+0x4dc>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005320:	2b00      	cmp	r3, #0
 8005322:	d0f0      	beq.n	8005306 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005324:	4b64      	ldr	r3, [pc, #400]	; (80054b8 <HAL_RCC_OscConfig+0x4dc>)
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	061b      	lsls	r3, r3, #24
 8005332:	4961      	ldr	r1, [pc, #388]	; (80054b8 <HAL_RCC_OscConfig+0x4dc>)
 8005334:	4313      	orrs	r3, r2
 8005336:	60cb      	str	r3, [r1, #12]
 8005338:	e018      	b.n	800536c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800533a:	4b5f      	ldr	r3, [pc, #380]	; (80054b8 <HAL_RCC_OscConfig+0x4dc>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a5e      	ldr	r2, [pc, #376]	; (80054b8 <HAL_RCC_OscConfig+0x4dc>)
 8005340:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005346:	f7fc f88f 	bl	8001468 <HAL_GetTick>
 800534a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800534c:	e008      	b.n	8005360 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800534e:	f7fc f88b 	bl	8001468 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	2b02      	cmp	r3, #2
 800535a:	d901      	bls.n	8005360 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e266      	b.n	800582e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005360:	4b55      	ldr	r3, [pc, #340]	; (80054b8 <HAL_RCC_OscConfig+0x4dc>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1f0      	bne.n	800534e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0308 	and.w	r3, r3, #8
 8005374:	2b00      	cmp	r3, #0
 8005376:	d036      	beq.n	80053e6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	695b      	ldr	r3, [r3, #20]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d019      	beq.n	80053b4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005380:	4b4d      	ldr	r3, [pc, #308]	; (80054b8 <HAL_RCC_OscConfig+0x4dc>)
 8005382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005384:	4a4c      	ldr	r2, [pc, #304]	; (80054b8 <HAL_RCC_OscConfig+0x4dc>)
 8005386:	f043 0301 	orr.w	r3, r3, #1
 800538a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800538c:	f7fc f86c 	bl	8001468 <HAL_GetTick>
 8005390:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005392:	e008      	b.n	80053a6 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005394:	f7fc f868 	bl	8001468 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e243      	b.n	800582e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80053a6:	4b44      	ldr	r3, [pc, #272]	; (80054b8 <HAL_RCC_OscConfig+0x4dc>)
 80053a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0f0      	beq.n	8005394 <HAL_RCC_OscConfig+0x3b8>
 80053b2:	e018      	b.n	80053e6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053b4:	4b40      	ldr	r3, [pc, #256]	; (80054b8 <HAL_RCC_OscConfig+0x4dc>)
 80053b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053b8:	4a3f      	ldr	r2, [pc, #252]	; (80054b8 <HAL_RCC_OscConfig+0x4dc>)
 80053ba:	f023 0301 	bic.w	r3, r3, #1
 80053be:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053c0:	f7fc f852 	bl	8001468 <HAL_GetTick>
 80053c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80053c6:	e008      	b.n	80053da <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053c8:	f7fc f84e 	bl	8001468 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d901      	bls.n	80053da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e229      	b.n	800582e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80053da:	4b37      	ldr	r3, [pc, #220]	; (80054b8 <HAL_RCC_OscConfig+0x4dc>)
 80053dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1f0      	bne.n	80053c8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0320 	and.w	r3, r3, #32
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d036      	beq.n	8005460 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d019      	beq.n	800542e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053fa:	4b2f      	ldr	r3, [pc, #188]	; (80054b8 <HAL_RCC_OscConfig+0x4dc>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a2e      	ldr	r2, [pc, #184]	; (80054b8 <HAL_RCC_OscConfig+0x4dc>)
 8005400:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005404:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005406:	f7fc f82f 	bl	8001468 <HAL_GetTick>
 800540a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800540c:	e008      	b.n	8005420 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800540e:	f7fc f82b 	bl	8001468 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	2b02      	cmp	r3, #2
 800541a:	d901      	bls.n	8005420 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e206      	b.n	800582e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005420:	4b25      	ldr	r3, [pc, #148]	; (80054b8 <HAL_RCC_OscConfig+0x4dc>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d0f0      	beq.n	800540e <HAL_RCC_OscConfig+0x432>
 800542c:	e018      	b.n	8005460 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800542e:	4b22      	ldr	r3, [pc, #136]	; (80054b8 <HAL_RCC_OscConfig+0x4dc>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a21      	ldr	r2, [pc, #132]	; (80054b8 <HAL_RCC_OscConfig+0x4dc>)
 8005434:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005438:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800543a:	f7fc f815 	bl	8001468 <HAL_GetTick>
 800543e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005440:	e008      	b.n	8005454 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005442:	f7fc f811 	bl	8001468 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	2b02      	cmp	r3, #2
 800544e:	d901      	bls.n	8005454 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e1ec      	b.n	800582e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005454:	4b18      	ldr	r3, [pc, #96]	; (80054b8 <HAL_RCC_OscConfig+0x4dc>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1f0      	bne.n	8005442 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 80af 	beq.w	80055cc <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800546e:	4b13      	ldr	r3, [pc, #76]	; (80054bc <HAL_RCC_OscConfig+0x4e0>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a12      	ldr	r2, [pc, #72]	; (80054bc <HAL_RCC_OscConfig+0x4e0>)
 8005474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005478:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800547a:	f7fb fff5 	bl	8001468 <HAL_GetTick>
 800547e:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005480:	e008      	b.n	8005494 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005482:	f7fb fff1 	bl	8001468 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	2b64      	cmp	r3, #100	; 0x64
 800548e:	d901      	bls.n	8005494 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e1cc      	b.n	800582e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005494:	4b09      	ldr	r3, [pc, #36]	; (80054bc <HAL_RCC_OscConfig+0x4e0>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549c:	2b00      	cmp	r3, #0
 800549e:	d0f0      	beq.n	8005482 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d10b      	bne.n	80054c0 <HAL_RCC_OscConfig+0x4e4>
 80054a8:	4b03      	ldr	r3, [pc, #12]	; (80054b8 <HAL_RCC_OscConfig+0x4dc>)
 80054aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ac:	4a02      	ldr	r2, [pc, #8]	; (80054b8 <HAL_RCC_OscConfig+0x4dc>)
 80054ae:	f043 0301 	orr.w	r3, r3, #1
 80054b2:	6713      	str	r3, [r2, #112]	; 0x70
 80054b4:	e05b      	b.n	800556e <HAL_RCC_OscConfig+0x592>
 80054b6:	bf00      	nop
 80054b8:	58024400 	.word	0x58024400
 80054bc:	58024800 	.word	0x58024800
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d112      	bne.n	80054ee <HAL_RCC_OscConfig+0x512>
 80054c8:	4b9d      	ldr	r3, [pc, #628]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 80054ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054cc:	4a9c      	ldr	r2, [pc, #624]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 80054ce:	f023 0301 	bic.w	r3, r3, #1
 80054d2:	6713      	str	r3, [r2, #112]	; 0x70
 80054d4:	4b9a      	ldr	r3, [pc, #616]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 80054d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d8:	4a99      	ldr	r2, [pc, #612]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 80054da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054de:	6713      	str	r3, [r2, #112]	; 0x70
 80054e0:	4b97      	ldr	r3, [pc, #604]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 80054e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e4:	4a96      	ldr	r2, [pc, #600]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 80054e6:	f023 0304 	bic.w	r3, r3, #4
 80054ea:	6713      	str	r3, [r2, #112]	; 0x70
 80054ec:	e03f      	b.n	800556e <HAL_RCC_OscConfig+0x592>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	2b05      	cmp	r3, #5
 80054f4:	d112      	bne.n	800551c <HAL_RCC_OscConfig+0x540>
 80054f6:	4b92      	ldr	r3, [pc, #584]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 80054f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fa:	4a91      	ldr	r2, [pc, #580]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 80054fc:	f043 0304 	orr.w	r3, r3, #4
 8005500:	6713      	str	r3, [r2, #112]	; 0x70
 8005502:	4b8f      	ldr	r3, [pc, #572]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 8005504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005506:	4a8e      	ldr	r2, [pc, #568]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 8005508:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800550c:	6713      	str	r3, [r2, #112]	; 0x70
 800550e:	4b8c      	ldr	r3, [pc, #560]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 8005510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005512:	4a8b      	ldr	r2, [pc, #556]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 8005514:	f043 0301 	orr.w	r3, r3, #1
 8005518:	6713      	str	r3, [r2, #112]	; 0x70
 800551a:	e028      	b.n	800556e <HAL_RCC_OscConfig+0x592>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	2b85      	cmp	r3, #133	; 0x85
 8005522:	d112      	bne.n	800554a <HAL_RCC_OscConfig+0x56e>
 8005524:	4b86      	ldr	r3, [pc, #536]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 8005526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005528:	4a85      	ldr	r2, [pc, #532]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 800552a:	f043 0304 	orr.w	r3, r3, #4
 800552e:	6713      	str	r3, [r2, #112]	; 0x70
 8005530:	4b83      	ldr	r3, [pc, #524]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 8005532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005534:	4a82      	ldr	r2, [pc, #520]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 8005536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800553a:	6713      	str	r3, [r2, #112]	; 0x70
 800553c:	4b80      	ldr	r3, [pc, #512]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 800553e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005540:	4a7f      	ldr	r2, [pc, #508]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 8005542:	f043 0301 	orr.w	r3, r3, #1
 8005546:	6713      	str	r3, [r2, #112]	; 0x70
 8005548:	e011      	b.n	800556e <HAL_RCC_OscConfig+0x592>
 800554a:	4b7d      	ldr	r3, [pc, #500]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 800554c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554e:	4a7c      	ldr	r2, [pc, #496]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 8005550:	f023 0301 	bic.w	r3, r3, #1
 8005554:	6713      	str	r3, [r2, #112]	; 0x70
 8005556:	4b7a      	ldr	r3, [pc, #488]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 8005558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555a:	4a79      	ldr	r2, [pc, #484]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 800555c:	f023 0304 	bic.w	r3, r3, #4
 8005560:	6713      	str	r3, [r2, #112]	; 0x70
 8005562:	4b77      	ldr	r3, [pc, #476]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 8005564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005566:	4a76      	ldr	r2, [pc, #472]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 8005568:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800556c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d015      	beq.n	80055a2 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005576:	f7fb ff77 	bl	8001468 <HAL_GetTick>
 800557a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800557c:	e00a      	b.n	8005594 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800557e:	f7fb ff73 	bl	8001468 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	f241 3288 	movw	r2, #5000	; 0x1388
 800558c:	4293      	cmp	r3, r2
 800558e:	d901      	bls.n	8005594 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e14c      	b.n	800582e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005594:	4b6a      	ldr	r3, [pc, #424]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 8005596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005598:	f003 0302 	and.w	r3, r3, #2
 800559c:	2b00      	cmp	r3, #0
 800559e:	d0ee      	beq.n	800557e <HAL_RCC_OscConfig+0x5a2>
 80055a0:	e014      	b.n	80055cc <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055a2:	f7fb ff61 	bl	8001468 <HAL_GetTick>
 80055a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80055a8:	e00a      	b.n	80055c0 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055aa:	f7fb ff5d 	bl	8001468 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d901      	bls.n	80055c0 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e136      	b.n	800582e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80055c0:	4b5f      	ldr	r3, [pc, #380]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 80055c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c4:	f003 0302 	and.w	r3, r3, #2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1ee      	bne.n	80055aa <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 812b 	beq.w	800582c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80055d6:	4b5a      	ldr	r3, [pc, #360]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055de:	2b18      	cmp	r3, #24
 80055e0:	f000 80bb 	beq.w	800575a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	f040 8095 	bne.w	8005718 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ee:	4b54      	ldr	r3, [pc, #336]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a53      	ldr	r2, [pc, #332]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 80055f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055fa:	f7fb ff35 	bl	8001468 <HAL_GetTick>
 80055fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005600:	e008      	b.n	8005614 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005602:	f7fb ff31 	bl	8001468 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d901      	bls.n	8005614 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e10c      	b.n	800582e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005614:	4b4a      	ldr	r3, [pc, #296]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1f0      	bne.n	8005602 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005620:	4b47      	ldr	r3, [pc, #284]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 8005622:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005624:	4b47      	ldr	r3, [pc, #284]	; (8005744 <HAL_RCC_OscConfig+0x768>)
 8005626:	4013      	ands	r3, r2
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005630:	0112      	lsls	r2, r2, #4
 8005632:	430a      	orrs	r2, r1
 8005634:	4942      	ldr	r1, [pc, #264]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 8005636:	4313      	orrs	r3, r2
 8005638:	628b      	str	r3, [r1, #40]	; 0x28
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563e:	3b01      	subs	r3, #1
 8005640:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005648:	3b01      	subs	r3, #1
 800564a:	025b      	lsls	r3, r3, #9
 800564c:	b29b      	uxth	r3, r3
 800564e:	431a      	orrs	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005654:	3b01      	subs	r3, #1
 8005656:	041b      	lsls	r3, r3, #16
 8005658:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800565c:	431a      	orrs	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005662:	3b01      	subs	r3, #1
 8005664:	061b      	lsls	r3, r3, #24
 8005666:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800566a:	4935      	ldr	r1, [pc, #212]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 800566c:	4313      	orrs	r3, r2
 800566e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005670:	4b33      	ldr	r3, [pc, #204]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 8005672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005674:	4a32      	ldr	r2, [pc, #200]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 8005676:	f023 0301 	bic.w	r3, r3, #1
 800567a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800567c:	4b30      	ldr	r3, [pc, #192]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 800567e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005680:	4b31      	ldr	r3, [pc, #196]	; (8005748 <HAL_RCC_OscConfig+0x76c>)
 8005682:	4013      	ands	r3, r2
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005688:	00d2      	lsls	r2, r2, #3
 800568a:	492d      	ldr	r1, [pc, #180]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 800568c:	4313      	orrs	r3, r2
 800568e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005690:	4b2b      	ldr	r3, [pc, #172]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 8005692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005694:	f023 020c 	bic.w	r2, r3, #12
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569c:	4928      	ldr	r1, [pc, #160]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80056a2:	4b27      	ldr	r3, [pc, #156]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 80056a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a6:	f023 0202 	bic.w	r2, r3, #2
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ae:	4924      	ldr	r1, [pc, #144]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80056b4:	4b22      	ldr	r3, [pc, #136]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 80056b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b8:	4a21      	ldr	r2, [pc, #132]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 80056ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056c0:	4b1f      	ldr	r3, [pc, #124]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 80056c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c4:	4a1e      	ldr	r2, [pc, #120]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 80056c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80056cc:	4b1c      	ldr	r3, [pc, #112]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 80056ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d0:	4a1b      	ldr	r2, [pc, #108]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 80056d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80056d8:	4b19      	ldr	r3, [pc, #100]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 80056da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056dc:	4a18      	ldr	r2, [pc, #96]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 80056de:	f043 0301 	orr.w	r3, r3, #1
 80056e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056e4:	4b16      	ldr	r3, [pc, #88]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a15      	ldr	r2, [pc, #84]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 80056ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f0:	f7fb feba 	bl	8001468 <HAL_GetTick>
 80056f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80056f6:	e008      	b.n	800570a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056f8:	f7fb feb6 	bl	8001468 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e091      	b.n	800582e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800570a:	4b0d      	ldr	r3, [pc, #52]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d0f0      	beq.n	80056f8 <HAL_RCC_OscConfig+0x71c>
 8005716:	e089      	b.n	800582c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005718:	4b09      	ldr	r3, [pc, #36]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a08      	ldr	r2, [pc, #32]	; (8005740 <HAL_RCC_OscConfig+0x764>)
 800571e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005724:	f7fb fea0 	bl	8001468 <HAL_GetTick>
 8005728:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800572a:	e00f      	b.n	800574c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800572c:	f7fb fe9c 	bl	8001468 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d908      	bls.n	800574c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e077      	b.n	800582e <HAL_RCC_OscConfig+0x852>
 800573e:	bf00      	nop
 8005740:	58024400 	.word	0x58024400
 8005744:	fffffc0c 	.word	0xfffffc0c
 8005748:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800574c:	4b3a      	ldr	r3, [pc, #232]	; (8005838 <HAL_RCC_OscConfig+0x85c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1e9      	bne.n	800572c <HAL_RCC_OscConfig+0x750>
 8005758:	e068      	b.n	800582c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800575a:	4b37      	ldr	r3, [pc, #220]	; (8005838 <HAL_RCC_OscConfig+0x85c>)
 800575c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005760:	4b35      	ldr	r3, [pc, #212]	; (8005838 <HAL_RCC_OscConfig+0x85c>)
 8005762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005764:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576a:	2b01      	cmp	r3, #1
 800576c:	d031      	beq.n	80057d2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	f003 0203 	and.w	r2, r3, #3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005778:	429a      	cmp	r2, r3
 800577a:	d12a      	bne.n	80057d2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	091b      	lsrs	r3, r3, #4
 8005780:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005788:	429a      	cmp	r2, r3
 800578a:	d122      	bne.n	80057d2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005796:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005798:	429a      	cmp	r2, r3
 800579a:	d11a      	bne.n	80057d2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	0a5b      	lsrs	r3, r3, #9
 80057a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d111      	bne.n	80057d2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	0c1b      	lsrs	r3, r3, #16
 80057b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80057bc:	429a      	cmp	r2, r3
 80057be:	d108      	bne.n	80057d2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	0e1b      	lsrs	r3, r3, #24
 80057c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d001      	beq.n	80057d6 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e02b      	b.n	800582e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80057d6:	4b18      	ldr	r3, [pc, #96]	; (8005838 <HAL_RCC_OscConfig+0x85c>)
 80057d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057da:	08db      	lsrs	r3, r3, #3
 80057dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057e0:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d01f      	beq.n	800582c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80057ec:	4b12      	ldr	r3, [pc, #72]	; (8005838 <HAL_RCC_OscConfig+0x85c>)
 80057ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f0:	4a11      	ldr	r2, [pc, #68]	; (8005838 <HAL_RCC_OscConfig+0x85c>)
 80057f2:	f023 0301 	bic.w	r3, r3, #1
 80057f6:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80057f8:	f7fb fe36 	bl	8001468 <HAL_GetTick>
 80057fc:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80057fe:	bf00      	nop
 8005800:	f7fb fe32 	bl	8001468 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	4293      	cmp	r3, r2
 800580a:	d0f9      	beq.n	8005800 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800580c:	4b0a      	ldr	r3, [pc, #40]	; (8005838 <HAL_RCC_OscConfig+0x85c>)
 800580e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005810:	4b0a      	ldr	r3, [pc, #40]	; (800583c <HAL_RCC_OscConfig+0x860>)
 8005812:	4013      	ands	r3, r2
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005818:	00d2      	lsls	r2, r2, #3
 800581a:	4907      	ldr	r1, [pc, #28]	; (8005838 <HAL_RCC_OscConfig+0x85c>)
 800581c:	4313      	orrs	r3, r2
 800581e:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005820:	4b05      	ldr	r3, [pc, #20]	; (8005838 <HAL_RCC_OscConfig+0x85c>)
 8005822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005824:	4a04      	ldr	r2, [pc, #16]	; (8005838 <HAL_RCC_OscConfig+0x85c>)
 8005826:	f043 0301 	orr.w	r3, r3, #1
 800582a:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3730      	adds	r7, #48	; 0x30
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	58024400 	.word	0x58024400
 800583c:	ffff0007 	.word	0xffff0007

08005840 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e19c      	b.n	8005b8e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005854:	4b8a      	ldr	r3, [pc, #552]	; (8005a80 <HAL_RCC_ClockConfig+0x240>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 030f 	and.w	r3, r3, #15
 800585c:	683a      	ldr	r2, [r7, #0]
 800585e:	429a      	cmp	r2, r3
 8005860:	d910      	bls.n	8005884 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005862:	4b87      	ldr	r3, [pc, #540]	; (8005a80 <HAL_RCC_ClockConfig+0x240>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f023 020f 	bic.w	r2, r3, #15
 800586a:	4985      	ldr	r1, [pc, #532]	; (8005a80 <HAL_RCC_ClockConfig+0x240>)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	4313      	orrs	r3, r2
 8005870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005872:	4b83      	ldr	r3, [pc, #524]	; (8005a80 <HAL_RCC_ClockConfig+0x240>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 030f 	and.w	r3, r3, #15
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	429a      	cmp	r2, r3
 800587e:	d001      	beq.n	8005884 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e184      	b.n	8005b8e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0304 	and.w	r3, r3, #4
 800588c:	2b00      	cmp	r3, #0
 800588e:	d010      	beq.n	80058b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	691a      	ldr	r2, [r3, #16]
 8005894:	4b7b      	ldr	r3, [pc, #492]	; (8005a84 <HAL_RCC_ClockConfig+0x244>)
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800589c:	429a      	cmp	r2, r3
 800589e:	d908      	bls.n	80058b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80058a0:	4b78      	ldr	r3, [pc, #480]	; (8005a84 <HAL_RCC_ClockConfig+0x244>)
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	4975      	ldr	r1, [pc, #468]	; (8005a84 <HAL_RCC_ClockConfig+0x244>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0308 	and.w	r3, r3, #8
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d010      	beq.n	80058e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	695a      	ldr	r2, [r3, #20]
 80058c2:	4b70      	ldr	r3, [pc, #448]	; (8005a84 <HAL_RCC_ClockConfig+0x244>)
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d908      	bls.n	80058e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80058ce:	4b6d      	ldr	r3, [pc, #436]	; (8005a84 <HAL_RCC_ClockConfig+0x244>)
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	496a      	ldr	r1, [pc, #424]	; (8005a84 <HAL_RCC_ClockConfig+0x244>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0310 	and.w	r3, r3, #16
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d010      	beq.n	800590e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	699a      	ldr	r2, [r3, #24]
 80058f0:	4b64      	ldr	r3, [pc, #400]	; (8005a84 <HAL_RCC_ClockConfig+0x244>)
 80058f2:	69db      	ldr	r3, [r3, #28]
 80058f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d908      	bls.n	800590e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80058fc:	4b61      	ldr	r3, [pc, #388]	; (8005a84 <HAL_RCC_ClockConfig+0x244>)
 80058fe:	69db      	ldr	r3, [r3, #28]
 8005900:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	495e      	ldr	r1, [pc, #376]	; (8005a84 <HAL_RCC_ClockConfig+0x244>)
 800590a:	4313      	orrs	r3, r2
 800590c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0320 	and.w	r3, r3, #32
 8005916:	2b00      	cmp	r3, #0
 8005918:	d010      	beq.n	800593c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	69da      	ldr	r2, [r3, #28]
 800591e:	4b59      	ldr	r3, [pc, #356]	; (8005a84 <HAL_RCC_ClockConfig+0x244>)
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005926:	429a      	cmp	r2, r3
 8005928:	d908      	bls.n	800593c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800592a:	4b56      	ldr	r3, [pc, #344]	; (8005a84 <HAL_RCC_ClockConfig+0x244>)
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	4953      	ldr	r1, [pc, #332]	; (8005a84 <HAL_RCC_ClockConfig+0x244>)
 8005938:	4313      	orrs	r3, r2
 800593a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0302 	and.w	r3, r3, #2
 8005944:	2b00      	cmp	r3, #0
 8005946:	d010      	beq.n	800596a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	68da      	ldr	r2, [r3, #12]
 800594c:	4b4d      	ldr	r3, [pc, #308]	; (8005a84 <HAL_RCC_ClockConfig+0x244>)
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	f003 030f 	and.w	r3, r3, #15
 8005954:	429a      	cmp	r2, r3
 8005956:	d908      	bls.n	800596a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005958:	4b4a      	ldr	r3, [pc, #296]	; (8005a84 <HAL_RCC_ClockConfig+0x244>)
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	f023 020f 	bic.w	r2, r3, #15
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	4947      	ldr	r1, [pc, #284]	; (8005a84 <HAL_RCC_ClockConfig+0x244>)
 8005966:	4313      	orrs	r3, r2
 8005968:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d055      	beq.n	8005a22 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005976:	4b43      	ldr	r3, [pc, #268]	; (8005a84 <HAL_RCC_ClockConfig+0x244>)
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	4940      	ldr	r1, [pc, #256]	; (8005a84 <HAL_RCC_ClockConfig+0x244>)
 8005984:	4313      	orrs	r3, r2
 8005986:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	2b02      	cmp	r3, #2
 800598e:	d107      	bne.n	80059a0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005990:	4b3c      	ldr	r3, [pc, #240]	; (8005a84 <HAL_RCC_ClockConfig+0x244>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d121      	bne.n	80059e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e0f6      	b.n	8005b8e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	2b03      	cmp	r3, #3
 80059a6:	d107      	bne.n	80059b8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059a8:	4b36      	ldr	r3, [pc, #216]	; (8005a84 <HAL_RCC_ClockConfig+0x244>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d115      	bne.n	80059e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e0ea      	b.n	8005b8e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d107      	bne.n	80059d0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80059c0:	4b30      	ldr	r3, [pc, #192]	; (8005a84 <HAL_RCC_ClockConfig+0x244>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d109      	bne.n	80059e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e0de      	b.n	8005b8e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059d0:	4b2c      	ldr	r3, [pc, #176]	; (8005a84 <HAL_RCC_ClockConfig+0x244>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0304 	and.w	r3, r3, #4
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d101      	bne.n	80059e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e0d6      	b.n	8005b8e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80059e0:	4b28      	ldr	r3, [pc, #160]	; (8005a84 <HAL_RCC_ClockConfig+0x244>)
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	f023 0207 	bic.w	r2, r3, #7
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	4925      	ldr	r1, [pc, #148]	; (8005a84 <HAL_RCC_ClockConfig+0x244>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059f2:	f7fb fd39 	bl	8001468 <HAL_GetTick>
 80059f6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059f8:	e00a      	b.n	8005a10 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059fa:	f7fb fd35 	bl	8001468 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d901      	bls.n	8005a10 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e0be      	b.n	8005b8e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a10:	4b1c      	ldr	r3, [pc, #112]	; (8005a84 <HAL_RCC_ClockConfig+0x244>)
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	00db      	lsls	r3, r3, #3
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d1eb      	bne.n	80059fa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d010      	beq.n	8005a50 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68da      	ldr	r2, [r3, #12]
 8005a32:	4b14      	ldr	r3, [pc, #80]	; (8005a84 <HAL_RCC_ClockConfig+0x244>)
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	f003 030f 	and.w	r3, r3, #15
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d208      	bcs.n	8005a50 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a3e:	4b11      	ldr	r3, [pc, #68]	; (8005a84 <HAL_RCC_ClockConfig+0x244>)
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	f023 020f 	bic.w	r2, r3, #15
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	490e      	ldr	r1, [pc, #56]	; (8005a84 <HAL_RCC_ClockConfig+0x244>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a50:	4b0b      	ldr	r3, [pc, #44]	; (8005a80 <HAL_RCC_ClockConfig+0x240>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 030f 	and.w	r3, r3, #15
 8005a58:	683a      	ldr	r2, [r7, #0]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d214      	bcs.n	8005a88 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a5e:	4b08      	ldr	r3, [pc, #32]	; (8005a80 <HAL_RCC_ClockConfig+0x240>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f023 020f 	bic.w	r2, r3, #15
 8005a66:	4906      	ldr	r1, [pc, #24]	; (8005a80 <HAL_RCC_ClockConfig+0x240>)
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a6e:	4b04      	ldr	r3, [pc, #16]	; (8005a80 <HAL_RCC_ClockConfig+0x240>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 030f 	and.w	r3, r3, #15
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d005      	beq.n	8005a88 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e086      	b.n	8005b8e <HAL_RCC_ClockConfig+0x34e>
 8005a80:	52002000 	.word	0x52002000
 8005a84:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0304 	and.w	r3, r3, #4
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d010      	beq.n	8005ab6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	691a      	ldr	r2, [r3, #16]
 8005a98:	4b3f      	ldr	r3, [pc, #252]	; (8005b98 <HAL_RCC_ClockConfig+0x358>)
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d208      	bcs.n	8005ab6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005aa4:	4b3c      	ldr	r3, [pc, #240]	; (8005b98 <HAL_RCC_ClockConfig+0x358>)
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	4939      	ldr	r1, [pc, #228]	; (8005b98 <HAL_RCC_ClockConfig+0x358>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0308 	and.w	r3, r3, #8
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d010      	beq.n	8005ae4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	695a      	ldr	r2, [r3, #20]
 8005ac6:	4b34      	ldr	r3, [pc, #208]	; (8005b98 <HAL_RCC_ClockConfig+0x358>)
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d208      	bcs.n	8005ae4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005ad2:	4b31      	ldr	r3, [pc, #196]	; (8005b98 <HAL_RCC_ClockConfig+0x358>)
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	492e      	ldr	r1, [pc, #184]	; (8005b98 <HAL_RCC_ClockConfig+0x358>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0310 	and.w	r3, r3, #16
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d010      	beq.n	8005b12 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	699a      	ldr	r2, [r3, #24]
 8005af4:	4b28      	ldr	r3, [pc, #160]	; (8005b98 <HAL_RCC_ClockConfig+0x358>)
 8005af6:	69db      	ldr	r3, [r3, #28]
 8005af8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d208      	bcs.n	8005b12 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b00:	4b25      	ldr	r3, [pc, #148]	; (8005b98 <HAL_RCC_ClockConfig+0x358>)
 8005b02:	69db      	ldr	r3, [r3, #28]
 8005b04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	4922      	ldr	r1, [pc, #136]	; (8005b98 <HAL_RCC_ClockConfig+0x358>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0320 	and.w	r3, r3, #32
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d010      	beq.n	8005b40 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	69da      	ldr	r2, [r3, #28]
 8005b22:	4b1d      	ldr	r3, [pc, #116]	; (8005b98 <HAL_RCC_ClockConfig+0x358>)
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d208      	bcs.n	8005b40 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005b2e:	4b1a      	ldr	r3, [pc, #104]	; (8005b98 <HAL_RCC_ClockConfig+0x358>)
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	4917      	ldr	r1, [pc, #92]	; (8005b98 <HAL_RCC_ClockConfig+0x358>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005b40:	f000 f834 	bl	8005bac <HAL_RCC_GetSysClockFreq>
 8005b44:	4602      	mov	r2, r0
 8005b46:	4b14      	ldr	r3, [pc, #80]	; (8005b98 <HAL_RCC_ClockConfig+0x358>)
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	0a1b      	lsrs	r3, r3, #8
 8005b4c:	f003 030f 	and.w	r3, r3, #15
 8005b50:	4912      	ldr	r1, [pc, #72]	; (8005b9c <HAL_RCC_ClockConfig+0x35c>)
 8005b52:	5ccb      	ldrb	r3, [r1, r3]
 8005b54:	f003 031f 	and.w	r3, r3, #31
 8005b58:	fa22 f303 	lsr.w	r3, r2, r3
 8005b5c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005b5e:	4b0e      	ldr	r3, [pc, #56]	; (8005b98 <HAL_RCC_ClockConfig+0x358>)
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	f003 030f 	and.w	r3, r3, #15
 8005b66:	4a0d      	ldr	r2, [pc, #52]	; (8005b9c <HAL_RCC_ClockConfig+0x35c>)
 8005b68:	5cd3      	ldrb	r3, [r2, r3]
 8005b6a:	f003 031f 	and.w	r3, r3, #31
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	fa22 f303 	lsr.w	r3, r2, r3
 8005b74:	4a0a      	ldr	r2, [pc, #40]	; (8005ba0 <HAL_RCC_ClockConfig+0x360>)
 8005b76:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005b78:	4a0a      	ldr	r2, [pc, #40]	; (8005ba4 <HAL_RCC_ClockConfig+0x364>)
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005b7e:	4b0a      	ldr	r3, [pc, #40]	; (8005ba8 <HAL_RCC_ClockConfig+0x368>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7fb fc26 	bl	80013d4 <HAL_InitTick>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3718      	adds	r7, #24
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	58024400 	.word	0x58024400
 8005b9c:	0800c86c 	.word	0x0800c86c
 8005ba0:	2400000c 	.word	0x2400000c
 8005ba4:	24000008 	.word	0x24000008
 8005ba8:	24000010 	.word	0x24000010

08005bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b089      	sub	sp, #36	; 0x24
 8005bb0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bb2:	4bb3      	ldr	r3, [pc, #716]	; (8005e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bba:	2b18      	cmp	r3, #24
 8005bbc:	f200 8155 	bhi.w	8005e6a <HAL_RCC_GetSysClockFreq+0x2be>
 8005bc0:	a201      	add	r2, pc, #4	; (adr r2, 8005bc8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc6:	bf00      	nop
 8005bc8:	08005c2d 	.word	0x08005c2d
 8005bcc:	08005e6b 	.word	0x08005e6b
 8005bd0:	08005e6b 	.word	0x08005e6b
 8005bd4:	08005e6b 	.word	0x08005e6b
 8005bd8:	08005e6b 	.word	0x08005e6b
 8005bdc:	08005e6b 	.word	0x08005e6b
 8005be0:	08005e6b 	.word	0x08005e6b
 8005be4:	08005e6b 	.word	0x08005e6b
 8005be8:	08005c53 	.word	0x08005c53
 8005bec:	08005e6b 	.word	0x08005e6b
 8005bf0:	08005e6b 	.word	0x08005e6b
 8005bf4:	08005e6b 	.word	0x08005e6b
 8005bf8:	08005e6b 	.word	0x08005e6b
 8005bfc:	08005e6b 	.word	0x08005e6b
 8005c00:	08005e6b 	.word	0x08005e6b
 8005c04:	08005e6b 	.word	0x08005e6b
 8005c08:	08005c59 	.word	0x08005c59
 8005c0c:	08005e6b 	.word	0x08005e6b
 8005c10:	08005e6b 	.word	0x08005e6b
 8005c14:	08005e6b 	.word	0x08005e6b
 8005c18:	08005e6b 	.word	0x08005e6b
 8005c1c:	08005e6b 	.word	0x08005e6b
 8005c20:	08005e6b 	.word	0x08005e6b
 8005c24:	08005e6b 	.word	0x08005e6b
 8005c28:	08005c5f 	.word	0x08005c5f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c2c:	4b94      	ldr	r3, [pc, #592]	; (8005e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0320 	and.w	r3, r3, #32
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d009      	beq.n	8005c4c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c38:	4b91      	ldr	r3, [pc, #580]	; (8005e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	08db      	lsrs	r3, r3, #3
 8005c3e:	f003 0303 	and.w	r3, r3, #3
 8005c42:	4a90      	ldr	r2, [pc, #576]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c44:	fa22 f303 	lsr.w	r3, r2, r3
 8005c48:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005c4a:	e111      	b.n	8005e70 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005c4c:	4b8d      	ldr	r3, [pc, #564]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c4e:	61bb      	str	r3, [r7, #24]
      break;
 8005c50:	e10e      	b.n	8005e70 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005c52:	4b8d      	ldr	r3, [pc, #564]	; (8005e88 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005c54:	61bb      	str	r3, [r7, #24]
      break;
 8005c56:	e10b      	b.n	8005e70 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005c58:	4b8c      	ldr	r3, [pc, #560]	; (8005e8c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005c5a:	61bb      	str	r3, [r7, #24]
      break;
 8005c5c:	e108      	b.n	8005e70 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c5e:	4b88      	ldr	r3, [pc, #544]	; (8005e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c62:	f003 0303 	and.w	r3, r3, #3
 8005c66:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005c68:	4b85      	ldr	r3, [pc, #532]	; (8005e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6c:	091b      	lsrs	r3, r3, #4
 8005c6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c72:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005c74:	4b82      	ldr	r3, [pc, #520]	; (8005e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005c7e:	4b80      	ldr	r3, [pc, #512]	; (8005e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c82:	08db      	lsrs	r3, r3, #3
 8005c84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	fb02 f303 	mul.w	r3, r2, r3
 8005c8e:	ee07 3a90 	vmov	s15, r3
 8005c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c96:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f000 80e1 	beq.w	8005e64 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	f000 8083 	beq.w	8005db0 <HAL_RCC_GetSysClockFreq+0x204>
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	f200 80a1 	bhi.w	8005df4 <HAL_RCC_GetSysClockFreq+0x248>
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d003      	beq.n	8005cc0 <HAL_RCC_GetSysClockFreq+0x114>
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d056      	beq.n	8005d6c <HAL_RCC_GetSysClockFreq+0x1c0>
 8005cbe:	e099      	b.n	8005df4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cc0:	4b6f      	ldr	r3, [pc, #444]	; (8005e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0320 	and.w	r3, r3, #32
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d02d      	beq.n	8005d28 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ccc:	4b6c      	ldr	r3, [pc, #432]	; (8005e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	08db      	lsrs	r3, r3, #3
 8005cd2:	f003 0303 	and.w	r3, r3, #3
 8005cd6:	4a6b      	ldr	r2, [pc, #428]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8005cdc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	ee07 3a90 	vmov	s15, r3
 8005ce4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	ee07 3a90 	vmov	s15, r3
 8005cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cf6:	4b62      	ldr	r3, [pc, #392]	; (8005e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cfe:	ee07 3a90 	vmov	s15, r3
 8005d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d06:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d0a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005e90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d22:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005d26:	e087      	b.n	8005e38 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	ee07 3a90 	vmov	s15, r3
 8005d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d32:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005e94 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d3a:	4b51      	ldr	r3, [pc, #324]	; (8005e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d42:	ee07 3a90 	vmov	s15, r3
 8005d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d4e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005e90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d6a:	e065      	b.n	8005e38 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	ee07 3a90 	vmov	s15, r3
 8005d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d76:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005e98 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d7e:	4b40      	ldr	r3, [pc, #256]	; (8005e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d86:	ee07 3a90 	vmov	s15, r3
 8005d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d92:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005e90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005daa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005dae:	e043      	b.n	8005e38 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	ee07 3a90 	vmov	s15, r3
 8005db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dba:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005e9c <HAL_RCC_GetSysClockFreq+0x2f0>
 8005dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dc2:	4b2f      	ldr	r3, [pc, #188]	; (8005e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dca:	ee07 3a90 	vmov	s15, r3
 8005dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dd6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005e90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005de2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005df2:	e021      	b.n	8005e38 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	ee07 3a90 	vmov	s15, r3
 8005dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dfe:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005e98 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e06:	4b1e      	ldr	r3, [pc, #120]	; (8005e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e0e:	ee07 3a90 	vmov	s15, r3
 8005e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e16:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e1a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005e90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e36:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005e38:	4b11      	ldr	r3, [pc, #68]	; (8005e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3c:	0a5b      	lsrs	r3, r3, #9
 8005e3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e42:	3301      	adds	r3, #1
 8005e44:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	ee07 3a90 	vmov	s15, r3
 8005e4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e50:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e5c:	ee17 3a90 	vmov	r3, s15
 8005e60:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005e62:	e005      	b.n	8005e70 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005e64:	2300      	movs	r3, #0
 8005e66:	61bb      	str	r3, [r7, #24]
      break;
 8005e68:	e002      	b.n	8005e70 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005e6a:	4b07      	ldr	r3, [pc, #28]	; (8005e88 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e6c:	61bb      	str	r3, [r7, #24]
      break;
 8005e6e:	bf00      	nop
  }

  return sysclockfreq;
 8005e70:	69bb      	ldr	r3, [r7, #24]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3724      	adds	r7, #36	; 0x24
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	58024400 	.word	0x58024400
 8005e84:	03d09000 	.word	0x03d09000
 8005e88:	003d0900 	.word	0x003d0900
 8005e8c:	016e3600 	.word	0x016e3600
 8005e90:	46000000 	.word	0x46000000
 8005e94:	4c742400 	.word	0x4c742400
 8005e98:	4a742400 	.word	0x4a742400
 8005e9c:	4bb71b00 	.word	0x4bb71b00

08005ea0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8005ea6:	f7ff fe81 	bl	8005bac <HAL_RCC_GetSysClockFreq>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	4b10      	ldr	r3, [pc, #64]	; (8005ef0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	0a1b      	lsrs	r3, r3, #8
 8005eb2:	f003 030f 	and.w	r3, r3, #15
 8005eb6:	490f      	ldr	r1, [pc, #60]	; (8005ef4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005eb8:	5ccb      	ldrb	r3, [r1, r3]
 8005eba:	f003 031f 	and.w	r3, r3, #31
 8005ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005ec4:	4b0a      	ldr	r3, [pc, #40]	; (8005ef0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	f003 030f 	and.w	r3, r3, #15
 8005ecc:	4a09      	ldr	r2, [pc, #36]	; (8005ef4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005ece:	5cd3      	ldrb	r3, [r2, r3]
 8005ed0:	f003 031f 	and.w	r3, r3, #31
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8005eda:	4a07      	ldr	r2, [pc, #28]	; (8005ef8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005edc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ede:	4a07      	ldr	r2, [pc, #28]	; (8005efc <HAL_RCC_GetHCLKFreq+0x5c>)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005ee4:	4b04      	ldr	r3, [pc, #16]	; (8005ef8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3708      	adds	r7, #8
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	58024400 	.word	0x58024400
 8005ef4:	0800c86c 	.word	0x0800c86c
 8005ef8:	2400000c 	.word	0x2400000c
 8005efc:	24000008 	.word	0x24000008

08005f00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005f04:	f7ff ffcc 	bl	8005ea0 <HAL_RCC_GetHCLKFreq>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	4b06      	ldr	r3, [pc, #24]	; (8005f24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f0c:	69db      	ldr	r3, [r3, #28]
 8005f0e:	091b      	lsrs	r3, r3, #4
 8005f10:	f003 0307 	and.w	r3, r3, #7
 8005f14:	4904      	ldr	r1, [pc, #16]	; (8005f28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f16:	5ccb      	ldrb	r3, [r1, r3]
 8005f18:	f003 031f 	and.w	r3, r3, #31
 8005f1c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	58024400 	.word	0x58024400
 8005f28:	0800c86c 	.word	0x0800c86c

08005f2c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f30:	b0c8      	sub	sp, #288	; 0x120
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f38:	2300      	movs	r3, #0
 8005f3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f3e:	2300      	movs	r3, #0
 8005f40:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005f50:	2500      	movs	r5, #0
 8005f52:	ea54 0305 	orrs.w	r3, r4, r5
 8005f56:	d049      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005f58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f5e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f62:	d02f      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005f64:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f68:	d828      	bhi.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005f6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f6e:	d01a      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005f70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f74:	d822      	bhi.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d003      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005f7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f7e:	d007      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005f80:	e01c      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f82:	4ba7      	ldr	r3, [pc, #668]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f86:	4aa6      	ldr	r2, [pc, #664]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005f8e:	e01a      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f94:	3308      	adds	r3, #8
 8005f96:	2102      	movs	r1, #2
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f002 fa6d 	bl	8008478 <RCCEx_PLL2_Config>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005fa4:	e00f      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005faa:	3328      	adds	r3, #40	; 0x28
 8005fac:	2102      	movs	r1, #2
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f002 fb14 	bl	80085dc <RCCEx_PLL3_Config>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005fba:	e004      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005fc2:	e000      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005fc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fc6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10a      	bne.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005fce:	4b94      	ldr	r3, [pc, #592]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fd2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005fd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fdc:	4a90      	ldr	r2, [pc, #576]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005fde:	430b      	orrs	r3, r1
 8005fe0:	6513      	str	r3, [r2, #80]	; 0x50
 8005fe2:	e003      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fe4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005fe8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005ff8:	f04f 0900 	mov.w	r9, #0
 8005ffc:	ea58 0309 	orrs.w	r3, r8, r9
 8006000:	d047      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006002:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006008:	2b04      	cmp	r3, #4
 800600a:	d82a      	bhi.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800600c:	a201      	add	r2, pc, #4	; (adr r2, 8006014 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800600e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006012:	bf00      	nop
 8006014:	08006029 	.word	0x08006029
 8006018:	08006037 	.word	0x08006037
 800601c:	0800604d 	.word	0x0800604d
 8006020:	0800606b 	.word	0x0800606b
 8006024:	0800606b 	.word	0x0800606b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006028:	4b7d      	ldr	r3, [pc, #500]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800602a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602c:	4a7c      	ldr	r2, [pc, #496]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800602e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006032:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006034:	e01a      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006036:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800603a:	3308      	adds	r3, #8
 800603c:	2100      	movs	r1, #0
 800603e:	4618      	mov	r0, r3
 8006040:	f002 fa1a 	bl	8008478 <RCCEx_PLL2_Config>
 8006044:	4603      	mov	r3, r0
 8006046:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800604a:	e00f      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800604c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006050:	3328      	adds	r3, #40	; 0x28
 8006052:	2100      	movs	r1, #0
 8006054:	4618      	mov	r0, r3
 8006056:	f002 fac1 	bl	80085dc <RCCEx_PLL3_Config>
 800605a:	4603      	mov	r3, r0
 800605c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006060:	e004      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006068:	e000      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800606a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800606c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10a      	bne.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006074:	4b6a      	ldr	r3, [pc, #424]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006078:	f023 0107 	bic.w	r1, r3, #7
 800607c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006082:	4a67      	ldr	r2, [pc, #412]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006084:	430b      	orrs	r3, r1
 8006086:	6513      	str	r3, [r2, #80]	; 0x50
 8006088:	e003      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800608a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800608e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8006092:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800609e:	f04f 0b00 	mov.w	fp, #0
 80060a2:	ea5a 030b 	orrs.w	r3, sl, fp
 80060a6:	d054      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80060a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ae:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80060b2:	d036      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80060b4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80060b8:	d82f      	bhi.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80060ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060be:	d032      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80060c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060c4:	d829      	bhi.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80060c6:	2bc0      	cmp	r3, #192	; 0xc0
 80060c8:	d02f      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80060ca:	2bc0      	cmp	r3, #192	; 0xc0
 80060cc:	d825      	bhi.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80060ce:	2b80      	cmp	r3, #128	; 0x80
 80060d0:	d018      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80060d2:	2b80      	cmp	r3, #128	; 0x80
 80060d4:	d821      	bhi.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d002      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80060da:	2b40      	cmp	r3, #64	; 0x40
 80060dc:	d007      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80060de:	e01c      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060e0:	4b4f      	ldr	r3, [pc, #316]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80060e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e4:	4a4e      	ldr	r2, [pc, #312]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80060e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80060ec:	e01e      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060f2:	3308      	adds	r3, #8
 80060f4:	2100      	movs	r1, #0
 80060f6:	4618      	mov	r0, r3
 80060f8:	f002 f9be 	bl	8008478 <RCCEx_PLL2_Config>
 80060fc:	4603      	mov	r3, r0
 80060fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006102:	e013      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006104:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006108:	3328      	adds	r3, #40	; 0x28
 800610a:	2100      	movs	r1, #0
 800610c:	4618      	mov	r0, r3
 800610e:	f002 fa65 	bl	80085dc <RCCEx_PLL3_Config>
 8006112:	4603      	mov	r3, r0
 8006114:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006118:	e008      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006120:	e004      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006122:	bf00      	nop
 8006124:	e002      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006126:	bf00      	nop
 8006128:	e000      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800612a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800612c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10a      	bne.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8006134:	4b3a      	ldr	r3, [pc, #232]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006138:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800613c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006142:	4a37      	ldr	r2, [pc, #220]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006144:	430b      	orrs	r3, r1
 8006146:	6513      	str	r3, [r2, #80]	; 0x50
 8006148:	e003      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800614a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800614e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8006152:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800615e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006162:	2300      	movs	r3, #0
 8006164:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006168:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800616c:	460b      	mov	r3, r1
 800616e:	4313      	orrs	r3, r2
 8006170:	d05c      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8006172:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006178:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800617c:	d03b      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800617e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006182:	d834      	bhi.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006188:	d037      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800618a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800618e:	d82e      	bhi.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006190:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006194:	d033      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006196:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800619a:	d828      	bhi.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800619c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061a0:	d01a      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80061a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061a6:	d822      	bhi.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d003      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80061ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061b0:	d007      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80061b2:	e01c      	b.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061b4:	4b1a      	ldr	r3, [pc, #104]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b8:	4a19      	ldr	r2, [pc, #100]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80061c0:	e01e      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061c6:	3308      	adds	r3, #8
 80061c8:	2100      	movs	r1, #0
 80061ca:	4618      	mov	r0, r3
 80061cc:	f002 f954 	bl	8008478 <RCCEx_PLL2_Config>
 80061d0:	4603      	mov	r3, r0
 80061d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80061d6:	e013      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061dc:	3328      	adds	r3, #40	; 0x28
 80061de:	2100      	movs	r1, #0
 80061e0:	4618      	mov	r0, r3
 80061e2:	f002 f9fb 	bl	80085dc <RCCEx_PLL3_Config>
 80061e6:	4603      	mov	r3, r0
 80061e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80061ec:	e008      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80061f4:	e004      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80061f6:	bf00      	nop
 80061f8:	e002      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80061fa:	bf00      	nop
 80061fc:	e000      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80061fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006200:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10d      	bne.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8006208:	4b05      	ldr	r3, [pc, #20]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800620a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800620c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8006210:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006216:	4a02      	ldr	r2, [pc, #8]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006218:	430b      	orrs	r3, r1
 800621a:	6513      	str	r3, [r2, #80]	; 0x50
 800621c:	e006      	b.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800621e:	bf00      	nop
 8006220:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006224:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006228:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800622c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006234:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006238:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800623c:	2300      	movs	r3, #0
 800623e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006242:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006246:	460b      	mov	r3, r1
 8006248:	4313      	orrs	r3, r2
 800624a:	d03a      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800624c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006252:	2b30      	cmp	r3, #48	; 0x30
 8006254:	d01f      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8006256:	2b30      	cmp	r3, #48	; 0x30
 8006258:	d819      	bhi.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800625a:	2b20      	cmp	r3, #32
 800625c:	d00c      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800625e:	2b20      	cmp	r3, #32
 8006260:	d815      	bhi.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006262:	2b00      	cmp	r3, #0
 8006264:	d019      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006266:	2b10      	cmp	r3, #16
 8006268:	d111      	bne.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800626a:	4bae      	ldr	r3, [pc, #696]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800626c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626e:	4aad      	ldr	r2, [pc, #692]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006274:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006276:	e011      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006278:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800627c:	3308      	adds	r3, #8
 800627e:	2102      	movs	r1, #2
 8006280:	4618      	mov	r0, r3
 8006282:	f002 f8f9 	bl	8008478 <RCCEx_PLL2_Config>
 8006286:	4603      	mov	r3, r0
 8006288:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800628c:	e006      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006294:	e002      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8006296:	bf00      	nop
 8006298:	e000      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800629a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800629c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10a      	bne.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80062a4:	4b9f      	ldr	r3, [pc, #636]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062a8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80062ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062b2:	4a9c      	ldr	r2, [pc, #624]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062b4:	430b      	orrs	r3, r1
 80062b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80062b8:	e003      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80062be:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80062c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ca:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80062ce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80062d2:	2300      	movs	r3, #0
 80062d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80062d8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80062dc:	460b      	mov	r3, r1
 80062de:	4313      	orrs	r3, r2
 80062e0:	d051      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80062e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062ec:	d035      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80062ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062f2:	d82e      	bhi.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80062f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062f8:	d031      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x432>
 80062fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062fe:	d828      	bhi.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006304:	d01a      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800630a:	d822      	bhi.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800630c:	2b00      	cmp	r3, #0
 800630e:	d003      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8006310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006314:	d007      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8006316:	e01c      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006318:	4b82      	ldr	r3, [pc, #520]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800631a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631c:	4a81      	ldr	r2, [pc, #516]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800631e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006322:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006324:	e01c      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006326:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800632a:	3308      	adds	r3, #8
 800632c:	2100      	movs	r1, #0
 800632e:	4618      	mov	r0, r3
 8006330:	f002 f8a2 	bl	8008478 <RCCEx_PLL2_Config>
 8006334:	4603      	mov	r3, r0
 8006336:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800633a:	e011      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800633c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006340:	3328      	adds	r3, #40	; 0x28
 8006342:	2100      	movs	r1, #0
 8006344:	4618      	mov	r0, r3
 8006346:	f002 f949 	bl	80085dc <RCCEx_PLL3_Config>
 800634a:	4603      	mov	r3, r0
 800634c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006350:	e006      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006358:	e002      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800635a:	bf00      	nop
 800635c:	e000      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800635e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006360:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10a      	bne.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006368:	4b6e      	ldr	r3, [pc, #440]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800636a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800636c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006370:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006376:	4a6b      	ldr	r2, [pc, #428]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006378:	430b      	orrs	r3, r1
 800637a:	6513      	str	r3, [r2, #80]	; 0x50
 800637c:	e003      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800637e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006382:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006386:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800638a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006392:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006396:	2300      	movs	r3, #0
 8006398:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800639c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80063a0:	460b      	mov	r3, r1
 80063a2:	4313      	orrs	r3, r2
 80063a4:	d053      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80063a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063b0:	d033      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80063b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063b6:	d82c      	bhi.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80063b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063bc:	d02f      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80063be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063c2:	d826      	bhi.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80063c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80063c8:	d02b      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80063ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80063ce:	d820      	bhi.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80063d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063d4:	d012      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80063d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063da:	d81a      	bhi.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d022      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80063e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063e4:	d115      	bne.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063ea:	3308      	adds	r3, #8
 80063ec:	2101      	movs	r1, #1
 80063ee:	4618      	mov	r0, r3
 80063f0:	f002 f842 	bl	8008478 <RCCEx_PLL2_Config>
 80063f4:	4603      	mov	r3, r0
 80063f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80063fa:	e015      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006400:	3328      	adds	r3, #40	; 0x28
 8006402:	2101      	movs	r1, #1
 8006404:	4618      	mov	r0, r3
 8006406:	f002 f8e9 	bl	80085dc <RCCEx_PLL3_Config>
 800640a:	4603      	mov	r3, r0
 800640c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006410:	e00a      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006418:	e006      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800641a:	bf00      	nop
 800641c:	e004      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800641e:	bf00      	nop
 8006420:	e002      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006422:	bf00      	nop
 8006424:	e000      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006426:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006428:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10a      	bne.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006430:	4b3c      	ldr	r3, [pc, #240]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006434:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006438:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800643c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800643e:	4a39      	ldr	r2, [pc, #228]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006440:	430b      	orrs	r3, r1
 8006442:	6513      	str	r3, [r2, #80]	; 0x50
 8006444:	e003      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006446:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800644a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800644e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006456:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800645a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800645e:	2300      	movs	r3, #0
 8006460:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006464:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006468:	460b      	mov	r3, r1
 800646a:	4313      	orrs	r3, r2
 800646c:	d060      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800646e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006472:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006476:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800647a:	d039      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800647c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006480:	d832      	bhi.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006482:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006486:	d035      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006488:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800648c:	d82c      	bhi.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800648e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006492:	d031      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006498:	d826      	bhi.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800649a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800649e:	d02d      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80064a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80064a4:	d820      	bhi.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80064a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064aa:	d012      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80064ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064b0:	d81a      	bhi.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d024      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80064b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064ba:	d115      	bne.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064c0:	3308      	adds	r3, #8
 80064c2:	2101      	movs	r1, #1
 80064c4:	4618      	mov	r0, r3
 80064c6:	f001 ffd7 	bl	8008478 <RCCEx_PLL2_Config>
 80064ca:	4603      	mov	r3, r0
 80064cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80064d0:	e017      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064d6:	3328      	adds	r3, #40	; 0x28
 80064d8:	2101      	movs	r1, #1
 80064da:	4618      	mov	r0, r3
 80064dc:	f002 f87e 	bl	80085dc <RCCEx_PLL3_Config>
 80064e0:	4603      	mov	r3, r0
 80064e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80064e6:	e00c      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80064ee:	e008      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80064f0:	bf00      	nop
 80064f2:	e006      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80064f4:	bf00      	nop
 80064f6:	e004      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80064f8:	bf00      	nop
 80064fa:	e002      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80064fc:	bf00      	nop
 80064fe:	e000      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006502:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10e      	bne.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800650a:	4b06      	ldr	r3, [pc, #24]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800650c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800650e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006512:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006516:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800651a:	4a02      	ldr	r2, [pc, #8]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800651c:	430b      	orrs	r3, r1
 800651e:	6593      	str	r3, [r2, #88]	; 0x58
 8006520:	e006      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006522:	bf00      	nop
 8006524:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006528:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800652c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006530:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006538:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800653c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006540:	2300      	movs	r3, #0
 8006542:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006546:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800654a:	460b      	mov	r3, r1
 800654c:	4313      	orrs	r3, r2
 800654e:	d037      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006550:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006554:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006556:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800655a:	d00e      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800655c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006560:	d816      	bhi.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006562:	2b00      	cmp	r3, #0
 8006564:	d018      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006566:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800656a:	d111      	bne.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800656c:	4bc4      	ldr	r3, [pc, #784]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800656e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006570:	4ac3      	ldr	r2, [pc, #780]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006576:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006578:	e00f      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800657a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800657e:	3308      	adds	r3, #8
 8006580:	2101      	movs	r1, #1
 8006582:	4618      	mov	r0, r3
 8006584:	f001 ff78 	bl	8008478 <RCCEx_PLL2_Config>
 8006588:	4603      	mov	r3, r0
 800658a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800658e:	e004      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006596:	e000      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006598:	bf00      	nop
    }

    if (ret == HAL_OK)
 800659a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10a      	bne.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80065a2:	4bb7      	ldr	r3, [pc, #732]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065a6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80065aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065b0:	4ab3      	ldr	r2, [pc, #716]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065b2:	430b      	orrs	r3, r1
 80065b4:	6513      	str	r3, [r2, #80]	; 0x50
 80065b6:	e003      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80065bc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80065c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80065cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065d0:	2300      	movs	r3, #0
 80065d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80065d6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80065da:	460b      	mov	r3, r1
 80065dc:	4313      	orrs	r3, r2
 80065de:	d039      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80065e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	d81c      	bhi.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80065ea:	a201      	add	r2, pc, #4	; (adr r2, 80065f0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80065ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f0:	0800662d 	.word	0x0800662d
 80065f4:	08006601 	.word	0x08006601
 80065f8:	0800660f 	.word	0x0800660f
 80065fc:	0800662d 	.word	0x0800662d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006600:	4b9f      	ldr	r3, [pc, #636]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006604:	4a9e      	ldr	r2, [pc, #632]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800660a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800660c:	e00f      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800660e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006612:	3308      	adds	r3, #8
 8006614:	2102      	movs	r1, #2
 8006616:	4618      	mov	r0, r3
 8006618:	f001 ff2e 	bl	8008478 <RCCEx_PLL2_Config>
 800661c:	4603      	mov	r3, r0
 800661e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006622:	e004      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800662a:	e000      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800662c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800662e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10a      	bne.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006636:	4b92      	ldr	r3, [pc, #584]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800663a:	f023 0103 	bic.w	r1, r3, #3
 800663e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006644:	4a8e      	ldr	r2, [pc, #568]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006646:	430b      	orrs	r3, r1
 8006648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800664a:	e003      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800664c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006650:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006654:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006660:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006664:	2300      	movs	r3, #0
 8006666:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800666a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800666e:	460b      	mov	r3, r1
 8006670:	4313      	orrs	r3, r2
 8006672:	f000 8099 	beq.w	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006676:	4b83      	ldr	r3, [pc, #524]	; (8006884 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a82      	ldr	r2, [pc, #520]	; (8006884 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800667c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006680:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006682:	f7fa fef1 	bl	8001468 <HAL_GetTick>
 8006686:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800668a:	e00b      	b.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800668c:	f7fa feec 	bl	8001468 <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	2b64      	cmp	r3, #100	; 0x64
 800669a:	d903      	bls.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80066a2:	e005      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066a4:	4b77      	ldr	r3, [pc, #476]	; (8006884 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d0ed      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80066b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d173      	bne.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80066b8:	4b71      	ldr	r3, [pc, #452]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80066c4:	4053      	eors	r3, r2
 80066c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d015      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066ce:	4b6c      	ldr	r3, [pc, #432]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066d6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80066da:	4b69      	ldr	r3, [pc, #420]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066de:	4a68      	ldr	r2, [pc, #416]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066e4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80066e6:	4b66      	ldr	r3, [pc, #408]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ea:	4a65      	ldr	r2, [pc, #404]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066f0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80066f2:	4a63      	ldr	r2, [pc, #396]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066f8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80066fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006706:	d118      	bne.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006708:	f7fa feae 	bl	8001468 <HAL_GetTick>
 800670c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006710:	e00d      	b.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006712:	f7fa fea9 	bl	8001468 <HAL_GetTick>
 8006716:	4602      	mov	r2, r0
 8006718:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800671c:	1ad2      	subs	r2, r2, r3
 800671e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006722:	429a      	cmp	r2, r3
 8006724:	d903      	bls.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800672c:	e005      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800672e:	4b54      	ldr	r3, [pc, #336]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	2b00      	cmp	r3, #0
 8006738:	d0eb      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800673a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800673e:	2b00      	cmp	r3, #0
 8006740:	d129      	bne.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006742:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006746:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800674a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800674e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006752:	d10e      	bne.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006754:	4b4a      	ldr	r3, [pc, #296]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800675c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006760:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006764:	091a      	lsrs	r2, r3, #4
 8006766:	4b48      	ldr	r3, [pc, #288]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006768:	4013      	ands	r3, r2
 800676a:	4a45      	ldr	r2, [pc, #276]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800676c:	430b      	orrs	r3, r1
 800676e:	6113      	str	r3, [r2, #16]
 8006770:	e005      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006772:	4b43      	ldr	r3, [pc, #268]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	4a42      	ldr	r2, [pc, #264]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006778:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800677c:	6113      	str	r3, [r2, #16]
 800677e:	4b40      	ldr	r3, [pc, #256]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006780:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006782:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006786:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800678a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800678e:	4a3c      	ldr	r2, [pc, #240]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006790:	430b      	orrs	r3, r1
 8006792:	6713      	str	r3, [r2, #112]	; 0x70
 8006794:	e008      	b.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006796:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800679a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800679e:	e003      	b.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80067a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80067a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b0:	f002 0301 	and.w	r3, r2, #1
 80067b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067b8:	2300      	movs	r3, #0
 80067ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067be:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80067c2:	460b      	mov	r3, r1
 80067c4:	4313      	orrs	r3, r2
 80067c6:	f000 8090 	beq.w	80068ea <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80067ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067d2:	2b28      	cmp	r3, #40	; 0x28
 80067d4:	d870      	bhi.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80067d6:	a201      	add	r2, pc, #4	; (adr r2, 80067dc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80067d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067dc:	080068c1 	.word	0x080068c1
 80067e0:	080068b9 	.word	0x080068b9
 80067e4:	080068b9 	.word	0x080068b9
 80067e8:	080068b9 	.word	0x080068b9
 80067ec:	080068b9 	.word	0x080068b9
 80067f0:	080068b9 	.word	0x080068b9
 80067f4:	080068b9 	.word	0x080068b9
 80067f8:	080068b9 	.word	0x080068b9
 80067fc:	0800688d 	.word	0x0800688d
 8006800:	080068b9 	.word	0x080068b9
 8006804:	080068b9 	.word	0x080068b9
 8006808:	080068b9 	.word	0x080068b9
 800680c:	080068b9 	.word	0x080068b9
 8006810:	080068b9 	.word	0x080068b9
 8006814:	080068b9 	.word	0x080068b9
 8006818:	080068b9 	.word	0x080068b9
 800681c:	080068a3 	.word	0x080068a3
 8006820:	080068b9 	.word	0x080068b9
 8006824:	080068b9 	.word	0x080068b9
 8006828:	080068b9 	.word	0x080068b9
 800682c:	080068b9 	.word	0x080068b9
 8006830:	080068b9 	.word	0x080068b9
 8006834:	080068b9 	.word	0x080068b9
 8006838:	080068b9 	.word	0x080068b9
 800683c:	080068c1 	.word	0x080068c1
 8006840:	080068b9 	.word	0x080068b9
 8006844:	080068b9 	.word	0x080068b9
 8006848:	080068b9 	.word	0x080068b9
 800684c:	080068b9 	.word	0x080068b9
 8006850:	080068b9 	.word	0x080068b9
 8006854:	080068b9 	.word	0x080068b9
 8006858:	080068b9 	.word	0x080068b9
 800685c:	080068c1 	.word	0x080068c1
 8006860:	080068b9 	.word	0x080068b9
 8006864:	080068b9 	.word	0x080068b9
 8006868:	080068b9 	.word	0x080068b9
 800686c:	080068b9 	.word	0x080068b9
 8006870:	080068b9 	.word	0x080068b9
 8006874:	080068b9 	.word	0x080068b9
 8006878:	080068b9 	.word	0x080068b9
 800687c:	080068c1 	.word	0x080068c1
 8006880:	58024400 	.word	0x58024400
 8006884:	58024800 	.word	0x58024800
 8006888:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800688c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006890:	3308      	adds	r3, #8
 8006892:	2101      	movs	r1, #1
 8006894:	4618      	mov	r0, r3
 8006896:	f001 fdef 	bl	8008478 <RCCEx_PLL2_Config>
 800689a:	4603      	mov	r3, r0
 800689c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80068a0:	e00f      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80068a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068a6:	3328      	adds	r3, #40	; 0x28
 80068a8:	2101      	movs	r1, #1
 80068aa:	4618      	mov	r0, r3
 80068ac:	f001 fe96 	bl	80085dc <RCCEx_PLL3_Config>
 80068b0:	4603      	mov	r3, r0
 80068b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80068b6:	e004      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80068be:	e000      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80068c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d10b      	bne.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80068ca:	4bc0      	ldr	r3, [pc, #768]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80068cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ce:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80068d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068da:	4abc      	ldr	r2, [pc, #752]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80068dc:	430b      	orrs	r3, r1
 80068de:	6553      	str	r3, [r2, #84]	; 0x54
 80068e0:	e003      	b.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80068e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80068ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f2:	f002 0302 	and.w	r3, r2, #2
 80068f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068fa:	2300      	movs	r3, #0
 80068fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006900:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006904:	460b      	mov	r3, r1
 8006906:	4313      	orrs	r3, r2
 8006908:	d043      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800690a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800690e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006912:	2b05      	cmp	r3, #5
 8006914:	d824      	bhi.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8006916:	a201      	add	r2, pc, #4	; (adr r2, 800691c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8006918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800691c:	08006969 	.word	0x08006969
 8006920:	08006935 	.word	0x08006935
 8006924:	0800694b 	.word	0x0800694b
 8006928:	08006969 	.word	0x08006969
 800692c:	08006969 	.word	0x08006969
 8006930:	08006969 	.word	0x08006969
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006934:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006938:	3308      	adds	r3, #8
 800693a:	2101      	movs	r1, #1
 800693c:	4618      	mov	r0, r3
 800693e:	f001 fd9b 	bl	8008478 <RCCEx_PLL2_Config>
 8006942:	4603      	mov	r3, r0
 8006944:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006948:	e00f      	b.n	800696a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800694a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800694e:	3328      	adds	r3, #40	; 0x28
 8006950:	2101      	movs	r1, #1
 8006952:	4618      	mov	r0, r3
 8006954:	f001 fe42 	bl	80085dc <RCCEx_PLL3_Config>
 8006958:	4603      	mov	r3, r0
 800695a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800695e:	e004      	b.n	800696a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006966:	e000      	b.n	800696a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8006968:	bf00      	nop
    }

    if (ret == HAL_OK)
 800696a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10b      	bne.n	800698a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006972:	4b96      	ldr	r3, [pc, #600]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006976:	f023 0107 	bic.w	r1, r3, #7
 800697a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800697e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006982:	4a92      	ldr	r2, [pc, #584]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006984:	430b      	orrs	r3, r1
 8006986:	6553      	str	r3, [r2, #84]	; 0x54
 8006988:	e003      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800698a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800698e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006992:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699a:	f002 0304 	and.w	r3, r2, #4
 800699e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069a2:	2300      	movs	r3, #0
 80069a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069a8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80069ac:	460b      	mov	r3, r1
 80069ae:	4313      	orrs	r3, r2
 80069b0:	d043      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80069b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069ba:	2b05      	cmp	r3, #5
 80069bc:	d824      	bhi.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80069be:	a201      	add	r2, pc, #4	; (adr r2, 80069c4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80069c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c4:	08006a11 	.word	0x08006a11
 80069c8:	080069dd 	.word	0x080069dd
 80069cc:	080069f3 	.word	0x080069f3
 80069d0:	08006a11 	.word	0x08006a11
 80069d4:	08006a11 	.word	0x08006a11
 80069d8:	08006a11 	.word	0x08006a11
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069e0:	3308      	adds	r3, #8
 80069e2:	2101      	movs	r1, #1
 80069e4:	4618      	mov	r0, r3
 80069e6:	f001 fd47 	bl	8008478 <RCCEx_PLL2_Config>
 80069ea:	4603      	mov	r3, r0
 80069ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80069f0:	e00f      	b.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069f6:	3328      	adds	r3, #40	; 0x28
 80069f8:	2101      	movs	r1, #1
 80069fa:	4618      	mov	r0, r3
 80069fc:	f001 fdee 	bl	80085dc <RCCEx_PLL3_Config>
 8006a00:	4603      	mov	r3, r0
 8006a02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006a06:	e004      	b.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006a0e:	e000      	b.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8006a10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a12:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10b      	bne.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a1a:	4b6c      	ldr	r3, [pc, #432]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a1e:	f023 0107 	bic.w	r1, r3, #7
 8006a22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a2a:	4a68      	ldr	r2, [pc, #416]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006a2c:	430b      	orrs	r3, r1
 8006a2e:	6593      	str	r3, [r2, #88]	; 0x58
 8006a30:	e003      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a32:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006a36:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a42:	f002 0320 	and.w	r3, r2, #32
 8006a46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a54:	460b      	mov	r3, r1
 8006a56:	4313      	orrs	r3, r2
 8006a58:	d055      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006a5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a66:	d033      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006a68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a6c:	d82c      	bhi.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a72:	d02f      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a78:	d826      	bhi.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006a7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a7e:	d02b      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006a80:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a84:	d820      	bhi.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006a86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a8a:	d012      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8006a8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a90:	d81a      	bhi.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d022      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006a96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a9a:	d115      	bne.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006aa0:	3308      	adds	r3, #8
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f001 fce7 	bl	8008478 <RCCEx_PLL2_Config>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006ab0:	e015      	b.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ab6:	3328      	adds	r3, #40	; 0x28
 8006ab8:	2102      	movs	r1, #2
 8006aba:	4618      	mov	r0, r3
 8006abc:	f001 fd8e 	bl	80085dc <RCCEx_PLL3_Config>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006ac6:	e00a      	b.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006ace:	e006      	b.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006ad0:	bf00      	nop
 8006ad2:	e004      	b.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006ad4:	bf00      	nop
 8006ad6:	e002      	b.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006ad8:	bf00      	nop
 8006ada:	e000      	b.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006adc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ade:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10b      	bne.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ae6:	4b39      	ldr	r3, [pc, #228]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aea:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006aee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006af2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006af6:	4a35      	ldr	r2, [pc, #212]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006af8:	430b      	orrs	r3, r1
 8006afa:	6553      	str	r3, [r2, #84]	; 0x54
 8006afc:	e003      	b.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006afe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006b02:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006b06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006b12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006b16:	2300      	movs	r3, #0
 8006b18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006b1c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006b20:	460b      	mov	r3, r1
 8006b22:	4313      	orrs	r3, r2
 8006b24:	d058      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b2e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006b32:	d033      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006b34:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006b38:	d82c      	bhi.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b3e:	d02f      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b44:	d826      	bhi.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006b46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b4a:	d02b      	beq.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006b4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b50:	d820      	bhi.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006b52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b56:	d012      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8006b58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b5c:	d81a      	bhi.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d022      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8006b62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b66:	d115      	bne.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b6c:	3308      	adds	r3, #8
 8006b6e:	2100      	movs	r1, #0
 8006b70:	4618      	mov	r0, r3
 8006b72:	f001 fc81 	bl	8008478 <RCCEx_PLL2_Config>
 8006b76:	4603      	mov	r3, r0
 8006b78:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006b7c:	e015      	b.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b82:	3328      	adds	r3, #40	; 0x28
 8006b84:	2102      	movs	r1, #2
 8006b86:	4618      	mov	r0, r3
 8006b88:	f001 fd28 	bl	80085dc <RCCEx_PLL3_Config>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006b92:	e00a      	b.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006b9a:	e006      	b.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006b9c:	bf00      	nop
 8006b9e:	e004      	b.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006ba0:	bf00      	nop
 8006ba2:	e002      	b.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006ba4:	bf00      	nop
 8006ba6:	e000      	b.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006ba8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006baa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10e      	bne.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006bb2:	4b06      	ldr	r3, [pc, #24]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bb6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006bba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006bc2:	4a02      	ldr	r2, [pc, #8]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006bc4:	430b      	orrs	r3, r1
 8006bc6:	6593      	str	r3, [r2, #88]	; 0x58
 8006bc8:	e006      	b.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8006bca:	bf00      	nop
 8006bcc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bd0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006bd4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006be4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006be8:	2300      	movs	r3, #0
 8006bea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006bee:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	d055      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006bf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bfc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006c00:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006c04:	d033      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006c06:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006c0a:	d82c      	bhi.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c10:	d02f      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006c12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c16:	d826      	bhi.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006c18:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006c1c:	d02b      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006c1e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006c22:	d820      	bhi.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006c24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c28:	d012      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8006c2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c2e:	d81a      	bhi.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d022      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8006c34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c38:	d115      	bne.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c3e:	3308      	adds	r3, #8
 8006c40:	2100      	movs	r1, #0
 8006c42:	4618      	mov	r0, r3
 8006c44:	f001 fc18 	bl	8008478 <RCCEx_PLL2_Config>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006c4e:	e015      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c54:	3328      	adds	r3, #40	; 0x28
 8006c56:	2102      	movs	r1, #2
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f001 fcbf 	bl	80085dc <RCCEx_PLL3_Config>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006c64:	e00a      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006c6c:	e006      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006c6e:	bf00      	nop
 8006c70:	e004      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006c72:	bf00      	nop
 8006c74:	e002      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006c76:	bf00      	nop
 8006c78:	e000      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006c7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c7c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10b      	bne.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006c84:	4ba1      	ldr	r3, [pc, #644]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c88:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006c8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c90:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006c94:	4a9d      	ldr	r2, [pc, #628]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006c96:	430b      	orrs	r3, r1
 8006c98:	6593      	str	r3, [r2, #88]	; 0x58
 8006c9a:	e003      	b.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c9c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006ca0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cac:	f002 0308 	and.w	r3, r2, #8
 8006cb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006cba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	d01e      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cd0:	d10c      	bne.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cd6:	3328      	adds	r3, #40	; 0x28
 8006cd8:	2102      	movs	r1, #2
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f001 fc7e 	bl	80085dc <RCCEx_PLL3_Config>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d002      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006cec:	4b87      	ldr	r3, [pc, #540]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cf0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006cf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cfc:	4a83      	ldr	r2, [pc, #524]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006cfe:	430b      	orrs	r3, r1
 8006d00:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0a:	f002 0310 	and.w	r3, r2, #16
 8006d0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d12:	2300      	movs	r3, #0
 8006d14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006d18:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	d01e      	beq.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006d22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d2e:	d10c      	bne.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006d30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d34:	3328      	adds	r3, #40	; 0x28
 8006d36:	2102      	movs	r1, #2
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f001 fc4f 	bl	80085dc <RCCEx_PLL3_Config>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d002      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d4a:	4b70      	ldr	r3, [pc, #448]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006d52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d5a:	4a6c      	ldr	r2, [pc, #432]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d5c:	430b      	orrs	r3, r1
 8006d5e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d68:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006d6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d70:	2300      	movs	r3, #0
 8006d72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d76:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	d03e      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006d80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d84:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006d88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d8c:	d022      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8006d8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d92:	d81b      	bhi.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d003      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8006d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d9c:	d00b      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8006d9e:	e015      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006da0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006da4:	3308      	adds	r3, #8
 8006da6:	2100      	movs	r1, #0
 8006da8:	4618      	mov	r0, r3
 8006daa:	f001 fb65 	bl	8008478 <RCCEx_PLL2_Config>
 8006dae:	4603      	mov	r3, r0
 8006db0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006db4:	e00f      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006db6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dba:	3328      	adds	r3, #40	; 0x28
 8006dbc:	2102      	movs	r1, #2
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f001 fc0c 	bl	80085dc <RCCEx_PLL3_Config>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006dca:	e004      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006dd2:	e000      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8006dd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dd6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10b      	bne.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006dde:	4b4b      	ldr	r3, [pc, #300]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006de2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006de6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006dee:	4a47      	ldr	r2, [pc, #284]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006df0:	430b      	orrs	r3, r1
 8006df2:	6593      	str	r3, [r2, #88]	; 0x58
 8006df4:	e003      	b.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006dfa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006dfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e06:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006e0a:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e10:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006e14:	460b      	mov	r3, r1
 8006e16:	4313      	orrs	r3, r2
 8006e18:	d03b      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006e1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e26:	d01f      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8006e28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e2c:	d818      	bhi.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006e2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e32:	d003      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8006e34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e38:	d007      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8006e3a:	e011      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e3c:	4b33      	ldr	r3, [pc, #204]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e40:	4a32      	ldr	r2, [pc, #200]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006e48:	e00f      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e4e:	3328      	adds	r3, #40	; 0x28
 8006e50:	2101      	movs	r1, #1
 8006e52:	4618      	mov	r0, r3
 8006e54:	f001 fbc2 	bl	80085dc <RCCEx_PLL3_Config>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006e5e:	e004      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006e66:	e000      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8006e68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e6a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10b      	bne.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e72:	4b26      	ldr	r3, [pc, #152]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e76:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e82:	4a22      	ldr	r2, [pc, #136]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e84:	430b      	orrs	r3, r1
 8006e86:	6553      	str	r3, [r2, #84]	; 0x54
 8006e88:	e003      	b.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e8a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006e8e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006e9e:	673b      	str	r3, [r7, #112]	; 0x70
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	677b      	str	r3, [r7, #116]	; 0x74
 8006ea4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	d034      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006eae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d003      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8006eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ebc:	d007      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8006ebe:	e011      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ec0:	4b12      	ldr	r3, [pc, #72]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec4:	4a11      	ldr	r2, [pc, #68]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006ec6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006ecc:	e00e      	b.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ece:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ed2:	3308      	adds	r3, #8
 8006ed4:	2102      	movs	r1, #2
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f001 face 	bl	8008478 <RCCEx_PLL2_Config>
 8006edc:	4603      	mov	r3, r0
 8006ede:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006ee2:	e003      	b.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006eea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d10d      	bne.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006ef4:	4b05      	ldr	r3, [pc, #20]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ef8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f02:	4a02      	ldr	r2, [pc, #8]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006f04:	430b      	orrs	r3, r1
 8006f06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f08:	e006      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006f0a:	bf00      	nop
 8006f0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f10:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f14:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006f18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f20:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006f24:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f26:	2300      	movs	r3, #0
 8006f28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f2a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006f2e:	460b      	mov	r3, r1
 8006f30:	4313      	orrs	r3, r2
 8006f32:	d00c      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f38:	3328      	adds	r3, #40	; 0x28
 8006f3a:	2102      	movs	r1, #2
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f001 fb4d 	bl	80085dc <RCCEx_PLL3_Config>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d002      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f56:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006f5a:	663b      	str	r3, [r7, #96]	; 0x60
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	667b      	str	r3, [r7, #100]	; 0x64
 8006f60:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006f64:	460b      	mov	r3, r1
 8006f66:	4313      	orrs	r3, r2
 8006f68:	d038      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006f6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f76:	d018      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8006f78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f7c:	d811      	bhi.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006f7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f82:	d014      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8006f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f88:	d80b      	bhi.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d011      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8006f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f92:	d106      	bne.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f94:	4bc3      	ldr	r3, [pc, #780]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f98:	4ac2      	ldr	r2, [pc, #776]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006fa0:	e008      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006fa8:	e004      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006faa:	bf00      	nop
 8006fac:	e002      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006fae:	bf00      	nop
 8006fb0:	e000      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006fb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fb4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10b      	bne.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006fbc:	4bb9      	ldr	r3, [pc, #740]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006fc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fcc:	4ab5      	ldr	r2, [pc, #724]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006fce:	430b      	orrs	r3, r1
 8006fd0:	6553      	str	r3, [r2, #84]	; 0x54
 8006fd2:	e003      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006fd8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006fe8:	65bb      	str	r3, [r7, #88]	; 0x58
 8006fea:	2300      	movs	r3, #0
 8006fec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	d009      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006ff8:	4baa      	ldr	r3, [pc, #680]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ffc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007000:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007004:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007006:	4aa7      	ldr	r2, [pc, #668]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007008:	430b      	orrs	r3, r1
 800700a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800700c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007014:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007018:	653b      	str	r3, [r7, #80]	; 0x50
 800701a:	2300      	movs	r3, #0
 800701c:	657b      	str	r3, [r7, #84]	; 0x54
 800701e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007022:	460b      	mov	r3, r1
 8007024:	4313      	orrs	r3, r2
 8007026:	d009      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007028:	4b9e      	ldr	r3, [pc, #632]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800702a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800702c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007030:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007036:	4a9b      	ldr	r2, [pc, #620]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007038:	430b      	orrs	r3, r1
 800703a:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800703c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007044:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007048:	64bb      	str	r3, [r7, #72]	; 0x48
 800704a:	2300      	movs	r3, #0
 800704c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800704e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007052:	460b      	mov	r3, r1
 8007054:	4313      	orrs	r3, r2
 8007056:	d009      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007058:	4b92      	ldr	r3, [pc, #584]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800705a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800705c:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8007060:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007066:	4a8f      	ldr	r2, [pc, #572]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007068:	430b      	orrs	r3, r1
 800706a:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800706c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007074:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007078:	643b      	str	r3, [r7, #64]	; 0x40
 800707a:	2300      	movs	r3, #0
 800707c:	647b      	str	r3, [r7, #68]	; 0x44
 800707e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007082:	460b      	mov	r3, r1
 8007084:	4313      	orrs	r3, r2
 8007086:	d00e      	beq.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007088:	4b86      	ldr	r3, [pc, #536]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	4a85      	ldr	r2, [pc, #532]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800708e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007092:	6113      	str	r3, [r2, #16]
 8007094:	4b83      	ldr	r3, [pc, #524]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007096:	6919      	ldr	r1, [r3, #16]
 8007098:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800709c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80070a0:	4a80      	ldr	r2, [pc, #512]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80070a2:	430b      	orrs	r3, r1
 80070a4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80070a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ae:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80070b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80070b4:	2300      	movs	r3, #0
 80070b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070b8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80070bc:	460b      	mov	r3, r1
 80070be:	4313      	orrs	r3, r2
 80070c0:	d009      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80070c2:	4b78      	ldr	r3, [pc, #480]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80070c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070c6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80070ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070d0:	4a74      	ldr	r2, [pc, #464]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80070d2:	430b      	orrs	r3, r1
 80070d4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80070d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070de:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80070e2:	633b      	str	r3, [r7, #48]	; 0x30
 80070e4:	2300      	movs	r3, #0
 80070e6:	637b      	str	r3, [r7, #52]	; 0x34
 80070e8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80070ec:	460b      	mov	r3, r1
 80070ee:	4313      	orrs	r3, r2
 80070f0:	d00a      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80070f2:	4b6c      	ldr	r3, [pc, #432]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80070f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070f6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80070fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007102:	4a68      	ldr	r2, [pc, #416]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007104:	430b      	orrs	r3, r1
 8007106:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007108:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800710c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007110:	2100      	movs	r1, #0
 8007112:	62b9      	str	r1, [r7, #40]	; 0x28
 8007114:	f003 0301 	and.w	r3, r3, #1
 8007118:	62fb      	str	r3, [r7, #44]	; 0x2c
 800711a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800711e:	460b      	mov	r3, r1
 8007120:	4313      	orrs	r3, r2
 8007122:	d011      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007124:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007128:	3308      	adds	r3, #8
 800712a:	2100      	movs	r1, #0
 800712c:	4618      	mov	r0, r3
 800712e:	f001 f9a3 	bl	8008478 <RCCEx_PLL2_Config>
 8007132:	4603      	mov	r3, r0
 8007134:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007138:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800713c:	2b00      	cmp	r3, #0
 800713e:	d003      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007140:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007144:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007148:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800714c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007150:	2100      	movs	r1, #0
 8007152:	6239      	str	r1, [r7, #32]
 8007154:	f003 0302 	and.w	r3, r3, #2
 8007158:	627b      	str	r3, [r7, #36]	; 0x24
 800715a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800715e:	460b      	mov	r3, r1
 8007160:	4313      	orrs	r3, r2
 8007162:	d011      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007164:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007168:	3308      	adds	r3, #8
 800716a:	2101      	movs	r1, #1
 800716c:	4618      	mov	r0, r3
 800716e:	f001 f983 	bl	8008478 <RCCEx_PLL2_Config>
 8007172:	4603      	mov	r3, r0
 8007174:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007178:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800717c:	2b00      	cmp	r3, #0
 800717e:	d003      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007180:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007184:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007188:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800718c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007190:	2100      	movs	r1, #0
 8007192:	61b9      	str	r1, [r7, #24]
 8007194:	f003 0304 	and.w	r3, r3, #4
 8007198:	61fb      	str	r3, [r7, #28]
 800719a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800719e:	460b      	mov	r3, r1
 80071a0:	4313      	orrs	r3, r2
 80071a2:	d011      	beq.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071a8:	3308      	adds	r3, #8
 80071aa:	2102      	movs	r1, #2
 80071ac:	4618      	mov	r0, r3
 80071ae:	f001 f963 	bl	8008478 <RCCEx_PLL2_Config>
 80071b2:	4603      	mov	r3, r0
 80071b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80071b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d003      	beq.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80071c4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80071c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d0:	2100      	movs	r1, #0
 80071d2:	6139      	str	r1, [r7, #16]
 80071d4:	f003 0308 	and.w	r3, r3, #8
 80071d8:	617b      	str	r3, [r7, #20]
 80071da:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80071de:	460b      	mov	r3, r1
 80071e0:	4313      	orrs	r3, r2
 80071e2:	d011      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80071e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071e8:	3328      	adds	r3, #40	; 0x28
 80071ea:	2100      	movs	r1, #0
 80071ec:	4618      	mov	r0, r3
 80071ee:	f001 f9f5 	bl	80085dc <RCCEx_PLL3_Config>
 80071f2:	4603      	mov	r3, r0
 80071f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 80071f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d003      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007200:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007204:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007208:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800720c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007210:	2100      	movs	r1, #0
 8007212:	60b9      	str	r1, [r7, #8]
 8007214:	f003 0310 	and.w	r3, r3, #16
 8007218:	60fb      	str	r3, [r7, #12]
 800721a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800721e:	460b      	mov	r3, r1
 8007220:	4313      	orrs	r3, r2
 8007222:	d011      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007224:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007228:	3328      	adds	r3, #40	; 0x28
 800722a:	2101      	movs	r1, #1
 800722c:	4618      	mov	r0, r3
 800722e:	f001 f9d5 	bl	80085dc <RCCEx_PLL3_Config>
 8007232:	4603      	mov	r3, r0
 8007234:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007238:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800723c:	2b00      	cmp	r3, #0
 800723e:	d003      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007240:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007244:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007248:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800724c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007250:	2100      	movs	r1, #0
 8007252:	6039      	str	r1, [r7, #0]
 8007254:	f003 0320 	and.w	r3, r3, #32
 8007258:	607b      	str	r3, [r7, #4]
 800725a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800725e:	460b      	mov	r3, r1
 8007260:	4313      	orrs	r3, r2
 8007262:	d011      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007264:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007268:	3328      	adds	r3, #40	; 0x28
 800726a:	2102      	movs	r1, #2
 800726c:	4618      	mov	r0, r3
 800726e:	f001 f9b5 	bl	80085dc <RCCEx_PLL3_Config>
 8007272:	4603      	mov	r3, r0
 8007274:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007278:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800727c:	2b00      	cmp	r3, #0
 800727e:	d003      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007280:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007284:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8007288:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800728c:	2b00      	cmp	r3, #0
 800728e:	d101      	bne.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8007290:	2300      	movs	r3, #0
 8007292:	e000      	b.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8007294:	2301      	movs	r3, #1
}
 8007296:	4618      	mov	r0, r3
 8007298:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800729c:	46bd      	mov	sp, r7
 800729e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072a2:	bf00      	nop
 80072a4:	58024400 	.word	0x58024400

080072a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b090      	sub	sp, #64	; 0x40
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80072b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072b6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80072ba:	430b      	orrs	r3, r1
 80072bc:	f040 8094 	bne.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80072c0:	4b97      	ldr	r3, [pc, #604]	; (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80072c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072c4:	f003 0307 	and.w	r3, r3, #7
 80072c8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80072ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072cc:	2b04      	cmp	r3, #4
 80072ce:	f200 8087 	bhi.w	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80072d2:	a201      	add	r2, pc, #4	; (adr r2, 80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80072d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d8:	080072ed 	.word	0x080072ed
 80072dc:	08007315 	.word	0x08007315
 80072e0:	0800733d 	.word	0x0800733d
 80072e4:	080073d9 	.word	0x080073d9
 80072e8:	08007365 	.word	0x08007365
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80072ec:	4b8c      	ldr	r3, [pc, #560]	; (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072f8:	d108      	bne.n	800730c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80072fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072fe:	4618      	mov	r0, r3
 8007300:	f000 ff68 	bl	80081d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007306:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007308:	f000 bc97 	b.w	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800730c:	2300      	movs	r3, #0
 800730e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007310:	f000 bc93 	b.w	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007314:	4b82      	ldr	r3, [pc, #520]	; (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800731c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007320:	d108      	bne.n	8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007322:	f107 0318 	add.w	r3, r7, #24
 8007326:	4618      	mov	r0, r3
 8007328:	f000 fcac 	bl	8007c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007330:	f000 bc83 	b.w	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007334:	2300      	movs	r3, #0
 8007336:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007338:	f000 bc7f 	b.w	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800733c:	4b78      	ldr	r3, [pc, #480]	; (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007348:	d108      	bne.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800734a:	f107 030c 	add.w	r3, r7, #12
 800734e:	4618      	mov	r0, r3
 8007350:	f000 fdec 	bl	8007f2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007358:	f000 bc6f 	b.w	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800735c:	2300      	movs	r3, #0
 800735e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007360:	f000 bc6b 	b.w	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007364:	4b6e      	ldr	r3, [pc, #440]	; (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007368:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800736c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800736e:	4b6c      	ldr	r3, [pc, #432]	; (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0304 	and.w	r3, r3, #4
 8007376:	2b04      	cmp	r3, #4
 8007378:	d10c      	bne.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800737a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800737c:	2b00      	cmp	r3, #0
 800737e:	d109      	bne.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007380:	4b67      	ldr	r3, [pc, #412]	; (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	08db      	lsrs	r3, r3, #3
 8007386:	f003 0303 	and.w	r3, r3, #3
 800738a:	4a66      	ldr	r2, [pc, #408]	; (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800738c:	fa22 f303 	lsr.w	r3, r2, r3
 8007390:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007392:	e01f      	b.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007394:	4b62      	ldr	r3, [pc, #392]	; (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800739c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073a0:	d106      	bne.n	80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80073a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073a8:	d102      	bne.n	80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80073aa:	4b5f      	ldr	r3, [pc, #380]	; (8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80073ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073ae:	e011      	b.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80073b0:	4b5b      	ldr	r3, [pc, #364]	; (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073bc:	d106      	bne.n	80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80073be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073c4:	d102      	bne.n	80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80073c6:	4b59      	ldr	r3, [pc, #356]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80073c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073ca:	e003      	b.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80073cc:	2300      	movs	r3, #0
 80073ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80073d0:	f000 bc33 	b.w	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80073d4:	f000 bc31 	b.w	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80073d8:	4b55      	ldr	r3, [pc, #340]	; (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80073da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073dc:	f000 bc2d 	b.w	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80073e0:	2300      	movs	r3, #0
 80073e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073e4:	f000 bc29 	b.w	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80073e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073ec:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80073f0:	430b      	orrs	r3, r1
 80073f2:	f040 809f 	bne.w	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 80073f6:	4b4a      	ldr	r3, [pc, #296]	; (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80073f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073fa:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80073fe:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007406:	d04d      	beq.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800740e:	f200 8084 	bhi.w	800751a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007414:	2bc0      	cmp	r3, #192	; 0xc0
 8007416:	d07d      	beq.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8007418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741a:	2bc0      	cmp	r3, #192	; 0xc0
 800741c:	d87d      	bhi.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800741e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007420:	2b80      	cmp	r3, #128	; 0x80
 8007422:	d02d      	beq.n	8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8007424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007426:	2b80      	cmp	r3, #128	; 0x80
 8007428:	d877      	bhi.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800742a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742c:	2b00      	cmp	r3, #0
 800742e:	d003      	beq.n	8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8007430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007432:	2b40      	cmp	r3, #64	; 0x40
 8007434:	d012      	beq.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007436:	e070      	b.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007438:	4b39      	ldr	r3, [pc, #228]	; (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007440:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007444:	d107      	bne.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800744a:	4618      	mov	r0, r3
 800744c:	f000 fec2 	bl	80081d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007452:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007454:	e3f1      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007456:	2300      	movs	r3, #0
 8007458:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800745a:	e3ee      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800745c:	4b30      	ldr	r3, [pc, #192]	; (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007464:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007468:	d107      	bne.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800746a:	f107 0318 	add.w	r3, r7, #24
 800746e:	4618      	mov	r0, r3
 8007470:	f000 fc08 	bl	8007c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007478:	e3df      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800747a:	2300      	movs	r3, #0
 800747c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800747e:	e3dc      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007480:	4b27      	ldr	r3, [pc, #156]	; (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800748c:	d107      	bne.n	800749e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800748e:	f107 030c 	add.w	r3, r7, #12
 8007492:	4618      	mov	r0, r3
 8007494:	f000 fd4a 	bl	8007f2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800749c:	e3cd      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800749e:	2300      	movs	r3, #0
 80074a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074a2:	e3ca      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80074a4:	4b1e      	ldr	r3, [pc, #120]	; (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80074a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80074ac:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074ae:	4b1c      	ldr	r3, [pc, #112]	; (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 0304 	and.w	r3, r3, #4
 80074b6:	2b04      	cmp	r3, #4
 80074b8:	d10c      	bne.n	80074d4 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 80074ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d109      	bne.n	80074d4 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074c0:	4b17      	ldr	r3, [pc, #92]	; (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	08db      	lsrs	r3, r3, #3
 80074c6:	f003 0303 	and.w	r3, r3, #3
 80074ca:	4a16      	ldr	r2, [pc, #88]	; (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80074cc:	fa22 f303 	lsr.w	r3, r2, r3
 80074d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074d2:	e01e      	b.n	8007512 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074d4:	4b12      	ldr	r3, [pc, #72]	; (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074e0:	d106      	bne.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 80074e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074e8:	d102      	bne.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80074ea:	4b0f      	ldr	r3, [pc, #60]	; (8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80074ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074ee:	e010      	b.n	8007512 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80074f0:	4b0b      	ldr	r3, [pc, #44]	; (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074fc:	d106      	bne.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80074fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007500:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007504:	d102      	bne.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007506:	4b09      	ldr	r3, [pc, #36]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007508:	63fb      	str	r3, [r7, #60]	; 0x3c
 800750a:	e002      	b.n	8007512 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800750c:	2300      	movs	r3, #0
 800750e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007510:	e393      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007512:	e392      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007514:	4b06      	ldr	r3, [pc, #24]	; (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007516:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007518:	e38f      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800751a:	2300      	movs	r3, #0
 800751c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800751e:	e38c      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007520:	58024400 	.word	0x58024400
 8007524:	03d09000 	.word	0x03d09000
 8007528:	003d0900 	.word	0x003d0900
 800752c:	016e3600 	.word	0x016e3600
 8007530:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8007534:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007538:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800753c:	430b      	orrs	r3, r1
 800753e:	f040 809c 	bne.w	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8007542:	4b9e      	ldr	r3, [pc, #632]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007546:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800754a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800754c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007552:	d054      	beq.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8007554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007556:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800755a:	f200 808b 	bhi.w	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800755e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007560:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007564:	f000 8083 	beq.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8007568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800756e:	f200 8081 	bhi.w	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8007572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007578:	d02f      	beq.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800757a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007580:	d878      	bhi.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8007582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007584:	2b00      	cmp	r3, #0
 8007586:	d004      	beq.n	8007592 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8007588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800758e:	d012      	beq.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8007590:	e070      	b.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007592:	4b8a      	ldr	r3, [pc, #552]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800759a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800759e:	d107      	bne.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075a4:	4618      	mov	r0, r3
 80075a6:	f000 fe15 	bl	80081d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80075aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075ae:	e344      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80075b0:	2300      	movs	r3, #0
 80075b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075b4:	e341      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075b6:	4b81      	ldr	r3, [pc, #516]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075c2:	d107      	bne.n	80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075c4:	f107 0318 	add.w	r3, r7, #24
 80075c8:	4618      	mov	r0, r3
 80075ca:	f000 fb5b 	bl	8007c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075d2:	e332      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80075d4:	2300      	movs	r3, #0
 80075d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075d8:	e32f      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80075da:	4b78      	ldr	r3, [pc, #480]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075e6:	d107      	bne.n	80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075e8:	f107 030c 	add.w	r3, r7, #12
 80075ec:	4618      	mov	r0, r3
 80075ee:	f000 fc9d 	bl	8007f2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075f6:	e320      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80075f8:	2300      	movs	r3, #0
 80075fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075fc:	e31d      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80075fe:	4b6f      	ldr	r3, [pc, #444]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007602:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007606:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007608:	4b6c      	ldr	r3, [pc, #432]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 0304 	and.w	r3, r3, #4
 8007610:	2b04      	cmp	r3, #4
 8007612:	d10c      	bne.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8007614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007616:	2b00      	cmp	r3, #0
 8007618:	d109      	bne.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800761a:	4b68      	ldr	r3, [pc, #416]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	08db      	lsrs	r3, r3, #3
 8007620:	f003 0303 	and.w	r3, r3, #3
 8007624:	4a66      	ldr	r2, [pc, #408]	; (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8007626:	fa22 f303 	lsr.w	r3, r2, r3
 800762a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800762c:	e01e      	b.n	800766c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800762e:	4b63      	ldr	r3, [pc, #396]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800763a:	d106      	bne.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800763c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800763e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007642:	d102      	bne.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007644:	4b5f      	ldr	r3, [pc, #380]	; (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8007646:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007648:	e010      	b.n	800766c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800764a:	4b5c      	ldr	r3, [pc, #368]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007652:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007656:	d106      	bne.n	8007666 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800765a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800765e:	d102      	bne.n	8007666 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007660:	4b59      	ldr	r3, [pc, #356]	; (80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8007662:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007664:	e002      	b.n	800766c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007666:	2300      	movs	r3, #0
 8007668:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 800766a:	e2e6      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800766c:	e2e5      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800766e:	4b57      	ldr	r3, [pc, #348]	; (80077cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007670:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007672:	e2e2      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8007674:	2300      	movs	r3, #0
 8007676:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007678:	e2df      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800767a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800767e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8007682:	430b      	orrs	r3, r1
 8007684:	f040 80a7 	bne.w	80077d6 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007688:	4b4c      	ldr	r3, [pc, #304]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800768a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800768c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007690:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007694:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007698:	d055      	beq.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800769a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076a0:	f200 8096 	bhi.w	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80076a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80076aa:	f000 8084 	beq.w	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 80076ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80076b4:	f200 808c 	bhi.w	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80076b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076be:	d030      	beq.n	8007722 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 80076c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076c6:	f200 8083 	bhi.w	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80076ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d004      	beq.n	80076da <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80076d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076d6:	d012      	beq.n	80076fe <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 80076d8:	e07a      	b.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80076da:	4b38      	ldr	r3, [pc, #224]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076e6:	d107      	bne.n	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076ec:	4618      	mov	r0, r3
 80076ee:	f000 fd71 	bl	80081d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076f6:	e2a0      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80076f8:	2300      	movs	r3, #0
 80076fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076fc:	e29d      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80076fe:	4b2f      	ldr	r3, [pc, #188]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007706:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800770a:	d107      	bne.n	800771c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800770c:	f107 0318 	add.w	r3, r7, #24
 8007710:	4618      	mov	r0, r3
 8007712:	f000 fab7 	bl	8007c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800771a:	e28e      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800771c:	2300      	movs	r3, #0
 800771e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007720:	e28b      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007722:	4b26      	ldr	r3, [pc, #152]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800772a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800772e:	d107      	bne.n	8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007730:	f107 030c 	add.w	r3, r7, #12
 8007734:	4618      	mov	r0, r3
 8007736:	f000 fbf9 	bl	8007f2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800773e:	e27c      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007740:	2300      	movs	r3, #0
 8007742:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007744:	e279      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007746:	4b1d      	ldr	r3, [pc, #116]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800774a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800774e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007750:	4b1a      	ldr	r3, [pc, #104]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 0304 	and.w	r3, r3, #4
 8007758:	2b04      	cmp	r3, #4
 800775a:	d10c      	bne.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 800775c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800775e:	2b00      	cmp	r3, #0
 8007760:	d109      	bne.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007762:	4b16      	ldr	r3, [pc, #88]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	08db      	lsrs	r3, r3, #3
 8007768:	f003 0303 	and.w	r3, r3, #3
 800776c:	4a14      	ldr	r2, [pc, #80]	; (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800776e:	fa22 f303 	lsr.w	r3, r2, r3
 8007772:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007774:	e01e      	b.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007776:	4b11      	ldr	r3, [pc, #68]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800777e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007782:	d106      	bne.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007786:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800778a:	d102      	bne.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800778c:	4b0d      	ldr	r3, [pc, #52]	; (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800778e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007790:	e010      	b.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007792:	4b0a      	ldr	r3, [pc, #40]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800779a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800779e:	d106      	bne.n	80077ae <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80077a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077a6:	d102      	bne.n	80077ae <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80077a8:	4b07      	ldr	r3, [pc, #28]	; (80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80077aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077ac:	e002      	b.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80077ae:	2300      	movs	r3, #0
 80077b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80077b2:	e242      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80077b4:	e241      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80077b6:	4b05      	ldr	r3, [pc, #20]	; (80077cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80077b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077ba:	e23e      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80077bc:	58024400 	.word	0x58024400
 80077c0:	03d09000 	.word	0x03d09000
 80077c4:	003d0900 	.word	0x003d0900
 80077c8:	016e3600 	.word	0x016e3600
 80077cc:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80077d0:	2300      	movs	r3, #0
 80077d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077d4:	e231      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80077d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077da:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80077de:	430b      	orrs	r3, r1
 80077e0:	f040 8085 	bne.w	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80077e4:	4b9c      	ldr	r3, [pc, #624]	; (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80077e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077e8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80077ec:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80077ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077f4:	d06b      	beq.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80077f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077fc:	d874      	bhi.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80077fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007800:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007804:	d056      	beq.n	80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8007806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007808:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800780c:	d86c      	bhi.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800780e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007810:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007814:	d03b      	beq.n	800788e <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8007816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007818:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800781c:	d864      	bhi.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800781e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007820:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007824:	d021      	beq.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8007826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007828:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800782c:	d85c      	bhi.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800782e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007830:	2b00      	cmp	r3, #0
 8007832:	d004      	beq.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8007834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800783a:	d004      	beq.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 800783c:	e054      	b.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800783e:	f7fe fb5f 	bl	8005f00 <HAL_RCC_GetPCLK1Freq>
 8007842:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007844:	e1f9      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007846:	4b84      	ldr	r3, [pc, #528]	; (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800784e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007852:	d107      	bne.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007854:	f107 0318 	add.w	r3, r7, #24
 8007858:	4618      	mov	r0, r3
 800785a:	f000 fa13 	bl	8007c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007862:	e1ea      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007864:	2300      	movs	r3, #0
 8007866:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007868:	e1e7      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800786a:	4b7b      	ldr	r3, [pc, #492]	; (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007872:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007876:	d107      	bne.n	8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007878:	f107 030c 	add.w	r3, r7, #12
 800787c:	4618      	mov	r0, r3
 800787e:	f000 fb55 	bl	8007f2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007886:	e1d8      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007888:	2300      	movs	r3, #0
 800788a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800788c:	e1d5      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800788e:	4b72      	ldr	r3, [pc, #456]	; (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 0304 	and.w	r3, r3, #4
 8007896:	2b04      	cmp	r3, #4
 8007898:	d109      	bne.n	80078ae <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800789a:	4b6f      	ldr	r3, [pc, #444]	; (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	08db      	lsrs	r3, r3, #3
 80078a0:	f003 0303 	and.w	r3, r3, #3
 80078a4:	4a6d      	ldr	r2, [pc, #436]	; (8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80078a6:	fa22 f303 	lsr.w	r3, r2, r3
 80078aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078ac:	e1c5      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80078ae:	2300      	movs	r3, #0
 80078b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078b2:	e1c2      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80078b4:	4b68      	ldr	r3, [pc, #416]	; (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078c0:	d102      	bne.n	80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 80078c2:	4b67      	ldr	r3, [pc, #412]	; (8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80078c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078c6:	e1b8      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80078c8:	2300      	movs	r3, #0
 80078ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078cc:	e1b5      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80078ce:	4b62      	ldr	r3, [pc, #392]	; (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078da:	d102      	bne.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 80078dc:	4b61      	ldr	r3, [pc, #388]	; (8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80078de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078e0:	e1ab      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80078e2:	2300      	movs	r3, #0
 80078e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078e6:	e1a8      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80078e8:	2300      	movs	r3, #0
 80078ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078ec:	e1a5      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80078ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078f2:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80078f6:	430b      	orrs	r3, r1
 80078f8:	d173      	bne.n	80079e2 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80078fa:	4b57      	ldr	r3, [pc, #348]	; (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80078fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007902:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007906:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800790a:	d02f      	beq.n	800796c <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 800790c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007912:	d863      	bhi.n	80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8007914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007916:	2b00      	cmp	r3, #0
 8007918:	d004      	beq.n	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800791a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007920:	d012      	beq.n	8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8007922:	e05b      	b.n	80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007924:	4b4c      	ldr	r3, [pc, #304]	; (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800792c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007930:	d107      	bne.n	8007942 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007932:	f107 0318 	add.w	r3, r7, #24
 8007936:	4618      	mov	r0, r3
 8007938:	f000 f9a4 	bl	8007c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007940:	e17b      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007942:	2300      	movs	r3, #0
 8007944:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007946:	e178      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007948:	4b43      	ldr	r3, [pc, #268]	; (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007954:	d107      	bne.n	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007956:	f107 030c 	add.w	r3, r7, #12
 800795a:	4618      	mov	r0, r3
 800795c:	f000 fae6 	bl	8007f2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007964:	e169      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007966:	2300      	movs	r3, #0
 8007968:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800796a:	e166      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800796c:	4b3a      	ldr	r3, [pc, #232]	; (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800796e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007970:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007974:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007976:	4b38      	ldr	r3, [pc, #224]	; (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 0304 	and.w	r3, r3, #4
 800797e:	2b04      	cmp	r3, #4
 8007980:	d10c      	bne.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8007982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007984:	2b00      	cmp	r3, #0
 8007986:	d109      	bne.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007988:	4b33      	ldr	r3, [pc, #204]	; (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	08db      	lsrs	r3, r3, #3
 800798e:	f003 0303 	and.w	r3, r3, #3
 8007992:	4a32      	ldr	r2, [pc, #200]	; (8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007994:	fa22 f303 	lsr.w	r3, r2, r3
 8007998:	63fb      	str	r3, [r7, #60]	; 0x3c
 800799a:	e01e      	b.n	80079da <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800799c:	4b2e      	ldr	r3, [pc, #184]	; (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079a8:	d106      	bne.n	80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 80079aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079b0:	d102      	bne.n	80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80079b2:	4b2b      	ldr	r3, [pc, #172]	; (8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80079b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079b6:	e010      	b.n	80079da <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80079b8:	4b27      	ldr	r3, [pc, #156]	; (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079c4:	d106      	bne.n	80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80079c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079cc:	d102      	bne.n	80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80079ce:	4b25      	ldr	r3, [pc, #148]	; (8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80079d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079d2:	e002      	b.n	80079da <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80079d4:	2300      	movs	r3, #0
 80079d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80079d8:	e12f      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80079da:	e12e      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80079dc:	2300      	movs	r3, #0
 80079de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079e0:	e12b      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80079e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079e6:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80079ea:	430b      	orrs	r3, r1
 80079ec:	d13c      	bne.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80079ee:	4b1a      	ldr	r3, [pc, #104]	; (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80079f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079f6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80079f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d004      	beq.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 80079fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a04:	d012      	beq.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8007a06:	e023      	b.n	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a08:	4b13      	ldr	r3, [pc, #76]	; (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a14:	d107      	bne.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f000 fbda 	bl	80081d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a24:	e109      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007a26:	2300      	movs	r3, #0
 8007a28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a2a:	e106      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a2c:	4b0a      	ldr	r3, [pc, #40]	; (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a38:	d107      	bne.n	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a3a:	f107 0318 	add.w	r3, r7, #24
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f000 f920 	bl	8007c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007a44:	6a3b      	ldr	r3, [r7, #32]
 8007a46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a48:	e0f7      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a4e:	e0f4      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8007a50:	2300      	movs	r3, #0
 8007a52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a54:	e0f1      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007a56:	bf00      	nop
 8007a58:	58024400 	.word	0x58024400
 8007a5c:	03d09000 	.word	0x03d09000
 8007a60:	003d0900 	.word	0x003d0900
 8007a64:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007a68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a6c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007a70:	430b      	orrs	r3, r1
 8007a72:	f040 8091 	bne.w	8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007a76:	4b73      	ldr	r3, [pc, #460]	; (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a7a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007a7e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a82:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007a86:	f000 8081 	beq.w	8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8007a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007a90:	d87f      	bhi.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a98:	d06b      	beq.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8007a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007aa0:	d877      	bhi.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aa8:	d056      	beq.n	8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8007aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ab0:	d86f      	bhi.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ab8:	d03b      	beq.n	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8007aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007abc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ac0:	d867      	bhi.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ac8:	d021      	beq.n	8007b0e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8007aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007acc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ad0:	d85f      	bhi.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d004      	beq.n	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ada:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ade:	d004      	beq.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8007ae0:	e057      	b.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007ae2:	f000 f8b9 	bl	8007c58 <HAL_RCCEx_GetD3PCLK1Freq>
 8007ae6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007ae8:	e0a7      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007aea:	4b56      	ldr	r3, [pc, #344]	; (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007af2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007af6:	d107      	bne.n	8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007af8:	f107 0318 	add.w	r3, r7, #24
 8007afc:	4618      	mov	r0, r3
 8007afe:	f000 f8c1 	bl	8007c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b06:	e098      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b0c:	e095      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b0e:	4b4d      	ldr	r3, [pc, #308]	; (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b1a:	d107      	bne.n	8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b1c:	f107 030c 	add.w	r3, r7, #12
 8007b20:	4618      	mov	r0, r3
 8007b22:	f000 fa03 	bl	8007f2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b2a:	e086      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b30:	e083      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b32:	4b44      	ldr	r3, [pc, #272]	; (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 0304 	and.w	r3, r3, #4
 8007b3a:	2b04      	cmp	r3, #4
 8007b3c:	d109      	bne.n	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b3e:	4b41      	ldr	r3, [pc, #260]	; (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	08db      	lsrs	r3, r3, #3
 8007b44:	f003 0303 	and.w	r3, r3, #3
 8007b48:	4a3f      	ldr	r2, [pc, #252]	; (8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b50:	e073      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007b52:	2300      	movs	r3, #0
 8007b54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b56:	e070      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007b58:	4b3a      	ldr	r3, [pc, #232]	; (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b64:	d102      	bne.n	8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8007b66:	4b39      	ldr	r3, [pc, #228]	; (8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8007b68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b6a:	e066      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b70:	e063      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007b72:	4b34      	ldr	r3, [pc, #208]	; (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b7e:	d102      	bne.n	8007b86 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8007b80:	4b33      	ldr	r3, [pc, #204]	; (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8007b82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b84:	e059      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007b86:	2300      	movs	r3, #0
 8007b88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b8a:	e056      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007b8c:	4b31      	ldr	r3, [pc, #196]	; (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8007b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b90:	e053      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007b92:	2300      	movs	r3, #0
 8007b94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b96:	e050      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007b98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b9c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007ba0:	430b      	orrs	r3, r1
 8007ba2:	d148      	bne.n	8007c36 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007ba4:	4b27      	ldr	r3, [pc, #156]	; (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ba8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007bac:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bb4:	d02a      	beq.n	8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8007bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bbc:	d838      	bhi.n	8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d004      	beq.n	8007bce <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8007bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bca:	d00d      	beq.n	8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8007bcc:	e030      	b.n	8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007bce:	4b1d      	ldr	r3, [pc, #116]	; (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bda:	d102      	bne.n	8007be2 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8007bdc:	4b1c      	ldr	r3, [pc, #112]	; (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8007bde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007be0:	e02b      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007be2:	2300      	movs	r3, #0
 8007be4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007be6:	e028      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007be8:	4b16      	ldr	r3, [pc, #88]	; (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bf4:	d107      	bne.n	8007c06 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f000 faea 	bl	80081d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c04:	e019      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007c06:	2300      	movs	r3, #0
 8007c08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c0a:	e016      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c0c:	4b0d      	ldr	r3, [pc, #52]	; (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c18:	d107      	bne.n	8007c2a <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c1a:	f107 0318 	add.w	r3, r7, #24
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f000 f830 	bl	8007c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c28:	e007      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c2e:	e004      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8007c30:	2300      	movs	r3, #0
 8007c32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c34:	e001      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8007c36:	2300      	movs	r3, #0
 8007c38:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8007c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3740      	adds	r7, #64	; 0x40
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	58024400 	.word	0x58024400
 8007c48:	03d09000 	.word	0x03d09000
 8007c4c:	003d0900 	.word	0x003d0900
 8007c50:	016e3600 	.word	0x016e3600
 8007c54:	00bb8000 	.word	0x00bb8000

08007c58 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8007c5c:	f7fe f920 	bl	8005ea0 <HAL_RCC_GetHCLKFreq>
 8007c60:	4602      	mov	r2, r0
 8007c62:	4b06      	ldr	r3, [pc, #24]	; (8007c7c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007c64:	6a1b      	ldr	r3, [r3, #32]
 8007c66:	091b      	lsrs	r3, r3, #4
 8007c68:	f003 0307 	and.w	r3, r3, #7
 8007c6c:	4904      	ldr	r1, [pc, #16]	; (8007c80 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007c6e:	5ccb      	ldrb	r3, [r1, r3]
 8007c70:	f003 031f 	and.w	r3, r3, #31
 8007c74:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	58024400 	.word	0x58024400
 8007c80:	0800c86c 	.word	0x0800c86c

08007c84 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b089      	sub	sp, #36	; 0x24
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c8c:	4ba1      	ldr	r3, [pc, #644]	; (8007f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c90:	f003 0303 	and.w	r3, r3, #3
 8007c94:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007c96:	4b9f      	ldr	r3, [pc, #636]	; (8007f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9a:	0b1b      	lsrs	r3, r3, #12
 8007c9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ca0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007ca2:	4b9c      	ldr	r3, [pc, #624]	; (8007f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca6:	091b      	lsrs	r3, r3, #4
 8007ca8:	f003 0301 	and.w	r3, r3, #1
 8007cac:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007cae:	4b99      	ldr	r3, [pc, #612]	; (8007f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cb2:	08db      	lsrs	r3, r3, #3
 8007cb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007cb8:	693a      	ldr	r2, [r7, #16]
 8007cba:	fb02 f303 	mul.w	r3, r2, r3
 8007cbe:	ee07 3a90 	vmov	s15, r3
 8007cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cc6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f000 8111 	beq.w	8007ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	f000 8083 	beq.w	8007de0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	f200 80a1 	bhi.w	8007e24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d003      	beq.n	8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d056      	beq.n	8007d9c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007cee:	e099      	b.n	8007e24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cf0:	4b88      	ldr	r3, [pc, #544]	; (8007f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 0320 	and.w	r3, r3, #32
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d02d      	beq.n	8007d58 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007cfc:	4b85      	ldr	r3, [pc, #532]	; (8007f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	08db      	lsrs	r3, r3, #3
 8007d02:	f003 0303 	and.w	r3, r3, #3
 8007d06:	4a84      	ldr	r2, [pc, #528]	; (8007f18 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007d08:	fa22 f303 	lsr.w	r3, r2, r3
 8007d0c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	ee07 3a90 	vmov	s15, r3
 8007d14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	ee07 3a90 	vmov	s15, r3
 8007d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d26:	4b7b      	ldr	r3, [pc, #492]	; (8007f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d2e:	ee07 3a90 	vmov	s15, r3
 8007d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d36:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d3a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007f1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d52:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007d56:	e087      	b.n	8007e68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	ee07 3a90 	vmov	s15, r3
 8007d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d62:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007f20 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d6a:	4b6a      	ldr	r3, [pc, #424]	; (8007f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d72:	ee07 3a90 	vmov	s15, r3
 8007d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d7e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007f1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d9a:	e065      	b.n	8007e68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	ee07 3a90 	vmov	s15, r3
 8007da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007da6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007f24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dae:	4b59      	ldr	r3, [pc, #356]	; (8007f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007db6:	ee07 3a90 	vmov	s15, r3
 8007dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dc2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007f1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007dde:	e043      	b.n	8007e68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	ee07 3a90 	vmov	s15, r3
 8007de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007f28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007df2:	4b48      	ldr	r3, [pc, #288]	; (8007f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dfa:	ee07 3a90 	vmov	s15, r3
 8007dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e02:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e06:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007f1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e22:	e021      	b.n	8007e68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	ee07 3a90 	vmov	s15, r3
 8007e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e2e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007f24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e36:	4b37      	ldr	r3, [pc, #220]	; (8007f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e3e:	ee07 3a90 	vmov	s15, r3
 8007e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e46:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e4a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007f1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e66:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007e68:	4b2a      	ldr	r3, [pc, #168]	; (8007f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e6c:	0a5b      	lsrs	r3, r3, #9
 8007e6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e72:	ee07 3a90 	vmov	s15, r3
 8007e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e82:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e8e:	ee17 2a90 	vmov	r2, s15
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007e96:	4b1f      	ldr	r3, [pc, #124]	; (8007f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9a:	0c1b      	lsrs	r3, r3, #16
 8007e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ea0:	ee07 3a90 	vmov	s15, r3
 8007ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ea8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007eac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007eb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007eb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007eb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ebc:	ee17 2a90 	vmov	r2, s15
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007ec4:	4b13      	ldr	r3, [pc, #76]	; (8007f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec8:	0e1b      	lsrs	r3, r3, #24
 8007eca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ece:	ee07 3a90 	vmov	s15, r3
 8007ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ed6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007eda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ede:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ee2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ee6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007eea:	ee17 2a90 	vmov	r2, s15
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007ef2:	e008      	b.n	8007f06 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	609a      	str	r2, [r3, #8]
}
 8007f06:	bf00      	nop
 8007f08:	3724      	adds	r7, #36	; 0x24
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	58024400 	.word	0x58024400
 8007f18:	03d09000 	.word	0x03d09000
 8007f1c:	46000000 	.word	0x46000000
 8007f20:	4c742400 	.word	0x4c742400
 8007f24:	4a742400 	.word	0x4a742400
 8007f28:	4bb71b00 	.word	0x4bb71b00

08007f2c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b089      	sub	sp, #36	; 0x24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f34:	4ba1      	ldr	r3, [pc, #644]	; (80081bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f38:	f003 0303 	and.w	r3, r3, #3
 8007f3c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007f3e:	4b9f      	ldr	r3, [pc, #636]	; (80081bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f42:	0d1b      	lsrs	r3, r3, #20
 8007f44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f48:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007f4a:	4b9c      	ldr	r3, [pc, #624]	; (80081bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f4e:	0a1b      	lsrs	r3, r3, #8
 8007f50:	f003 0301 	and.w	r3, r3, #1
 8007f54:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007f56:	4b99      	ldr	r3, [pc, #612]	; (80081bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f5a:	08db      	lsrs	r3, r3, #3
 8007f5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f60:	693a      	ldr	r2, [r7, #16]
 8007f62:	fb02 f303 	mul.w	r3, r2, r3
 8007f66:	ee07 3a90 	vmov	s15, r3
 8007f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f000 8111 	beq.w	800819c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	f000 8083 	beq.w	8008088 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	f200 80a1 	bhi.w	80080cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d003      	beq.n	8007f98 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d056      	beq.n	8008044 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007f96:	e099      	b.n	80080cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f98:	4b88      	ldr	r3, [pc, #544]	; (80081bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 0320 	and.w	r3, r3, #32
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d02d      	beq.n	8008000 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007fa4:	4b85      	ldr	r3, [pc, #532]	; (80081bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	08db      	lsrs	r3, r3, #3
 8007faa:	f003 0303 	and.w	r3, r3, #3
 8007fae:	4a84      	ldr	r2, [pc, #528]	; (80081c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8007fb4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	ee07 3a90 	vmov	s15, r3
 8007fbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	ee07 3a90 	vmov	s15, r3
 8007fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fce:	4b7b      	ldr	r3, [pc, #492]	; (80081bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fd6:	ee07 3a90 	vmov	s15, r3
 8007fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fde:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fe2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80081c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ffa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007ffe:	e087      	b.n	8008110 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	ee07 3a90 	vmov	s15, r3
 8008006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800800a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80081c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800800e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008012:	4b6a      	ldr	r3, [pc, #424]	; (80081bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800801a:	ee07 3a90 	vmov	s15, r3
 800801e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008022:	ed97 6a03 	vldr	s12, [r7, #12]
 8008026:	eddf 5a67 	vldr	s11, [pc, #412]	; 80081c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800802a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800802e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008032:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800803a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800803e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008042:	e065      	b.n	8008110 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	ee07 3a90 	vmov	s15, r3
 800804a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800804e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80081cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008056:	4b59      	ldr	r3, [pc, #356]	; (80081bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800805a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800805e:	ee07 3a90 	vmov	s15, r3
 8008062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008066:	ed97 6a03 	vldr	s12, [r7, #12]
 800806a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80081c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800806e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800807a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800807e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008082:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008086:	e043      	b.n	8008110 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	ee07 3a90 	vmov	s15, r3
 800808e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008092:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80081d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800809a:	4b48      	ldr	r3, [pc, #288]	; (80081bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800809c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080a2:	ee07 3a90 	vmov	s15, r3
 80080a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80080ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 80081c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80080b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080ca:	e021      	b.n	8008110 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	ee07 3a90 	vmov	s15, r3
 80080d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80081cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80080da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080de:	4b37      	ldr	r3, [pc, #220]	; (80081bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080e6:	ee07 3a90 	vmov	s15, r3
 80080ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80080f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80081c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80080f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800810a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800810e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008110:	4b2a      	ldr	r3, [pc, #168]	; (80081bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008114:	0a5b      	lsrs	r3, r3, #9
 8008116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800811a:	ee07 3a90 	vmov	s15, r3
 800811e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008122:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008126:	ee37 7a87 	vadd.f32	s14, s15, s14
 800812a:	edd7 6a07 	vldr	s13, [r7, #28]
 800812e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008136:	ee17 2a90 	vmov	r2, s15
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800813e:	4b1f      	ldr	r3, [pc, #124]	; (80081bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008142:	0c1b      	lsrs	r3, r3, #16
 8008144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008148:	ee07 3a90 	vmov	s15, r3
 800814c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008150:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008154:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008158:	edd7 6a07 	vldr	s13, [r7, #28]
 800815c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008164:	ee17 2a90 	vmov	r2, s15
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800816c:	4b13      	ldr	r3, [pc, #76]	; (80081bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800816e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008170:	0e1b      	lsrs	r3, r3, #24
 8008172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008176:	ee07 3a90 	vmov	s15, r3
 800817a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800817e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008182:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008186:	edd7 6a07 	vldr	s13, [r7, #28]
 800818a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800818e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008192:	ee17 2a90 	vmov	r2, s15
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800819a:	e008      	b.n	80081ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	609a      	str	r2, [r3, #8]
}
 80081ae:	bf00      	nop
 80081b0:	3724      	adds	r7, #36	; 0x24
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	58024400 	.word	0x58024400
 80081c0:	03d09000 	.word	0x03d09000
 80081c4:	46000000 	.word	0x46000000
 80081c8:	4c742400 	.word	0x4c742400
 80081cc:	4a742400 	.word	0x4a742400
 80081d0:	4bb71b00 	.word	0x4bb71b00

080081d4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b089      	sub	sp, #36	; 0x24
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081dc:	4ba0      	ldr	r3, [pc, #640]	; (8008460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80081de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e0:	f003 0303 	and.w	r3, r3, #3
 80081e4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80081e6:	4b9e      	ldr	r3, [pc, #632]	; (8008460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80081e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ea:	091b      	lsrs	r3, r3, #4
 80081ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081f0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80081f2:	4b9b      	ldr	r3, [pc, #620]	; (8008460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80081f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f6:	f003 0301 	and.w	r3, r3, #1
 80081fa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80081fc:	4b98      	ldr	r3, [pc, #608]	; (8008460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80081fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008200:	08db      	lsrs	r3, r3, #3
 8008202:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008206:	693a      	ldr	r2, [r7, #16]
 8008208:	fb02 f303 	mul.w	r3, r2, r3
 800820c:	ee07 3a90 	vmov	s15, r3
 8008210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008214:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	2b00      	cmp	r3, #0
 800821c:	f000 8111 	beq.w	8008442 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	2b02      	cmp	r3, #2
 8008224:	f000 8083 	beq.w	800832e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	2b02      	cmp	r3, #2
 800822c:	f200 80a1 	bhi.w	8008372 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d003      	beq.n	800823e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008236:	69bb      	ldr	r3, [r7, #24]
 8008238:	2b01      	cmp	r3, #1
 800823a:	d056      	beq.n	80082ea <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800823c:	e099      	b.n	8008372 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800823e:	4b88      	ldr	r3, [pc, #544]	; (8008460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f003 0320 	and.w	r3, r3, #32
 8008246:	2b00      	cmp	r3, #0
 8008248:	d02d      	beq.n	80082a6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800824a:	4b85      	ldr	r3, [pc, #532]	; (8008460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	08db      	lsrs	r3, r3, #3
 8008250:	f003 0303 	and.w	r3, r3, #3
 8008254:	4a83      	ldr	r2, [pc, #524]	; (8008464 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008256:	fa22 f303 	lsr.w	r3, r2, r3
 800825a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	ee07 3a90 	vmov	s15, r3
 8008262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	ee07 3a90 	vmov	s15, r3
 800826c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008270:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008274:	4b7a      	ldr	r3, [pc, #488]	; (8008460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800827c:	ee07 3a90 	vmov	s15, r3
 8008280:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008284:	ed97 6a03 	vldr	s12, [r7, #12]
 8008288:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008468 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800828c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008290:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008294:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008298:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800829c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082a0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80082a4:	e087      	b.n	80083b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	ee07 3a90 	vmov	s15, r3
 80082ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082b0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800846c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80082b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082b8:	4b69      	ldr	r3, [pc, #420]	; (8008460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80082ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082c0:	ee07 3a90 	vmov	s15, r3
 80082c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80082cc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008468 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80082d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082e8:	e065      	b.n	80083b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	ee07 3a90 	vmov	s15, r3
 80082f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082f4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008470 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80082f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082fc:	4b58      	ldr	r3, [pc, #352]	; (8008460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80082fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008304:	ee07 3a90 	vmov	s15, r3
 8008308:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800830c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008310:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008468 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008314:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008318:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800831c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008320:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008324:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008328:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800832c:	e043      	b.n	80083b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	ee07 3a90 	vmov	s15, r3
 8008334:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008338:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008474 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800833c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008340:	4b47      	ldr	r3, [pc, #284]	; (8008460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008348:	ee07 3a90 	vmov	s15, r3
 800834c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008350:	ed97 6a03 	vldr	s12, [r7, #12]
 8008354:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008468 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008358:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800835c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008360:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008364:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008368:	ee67 7a27 	vmul.f32	s15, s14, s15
 800836c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008370:	e021      	b.n	80083b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	ee07 3a90 	vmov	s15, r3
 8008378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800837c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800846c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008380:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008384:	4b36      	ldr	r3, [pc, #216]	; (8008460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800838c:	ee07 3a90 	vmov	s15, r3
 8008390:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008394:	ed97 6a03 	vldr	s12, [r7, #12]
 8008398:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008468 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800839c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083b4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80083b6:	4b2a      	ldr	r3, [pc, #168]	; (8008460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80083b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ba:	0a5b      	lsrs	r3, r3, #9
 80083bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083c0:	ee07 3a90 	vmov	s15, r3
 80083c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80083d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083dc:	ee17 2a90 	vmov	r2, s15
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80083e4:	4b1e      	ldr	r3, [pc, #120]	; (8008460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80083e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e8:	0c1b      	lsrs	r3, r3, #16
 80083ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083ee:	ee07 3a90 	vmov	s15, r3
 80083f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008402:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008406:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800840a:	ee17 2a90 	vmov	r2, s15
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008412:	4b13      	ldr	r3, [pc, #76]	; (8008460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008416:	0e1b      	lsrs	r3, r3, #24
 8008418:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800841c:	ee07 3a90 	vmov	s15, r3
 8008420:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008424:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008428:	ee37 7a87 	vadd.f32	s14, s15, s14
 800842c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008430:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008434:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008438:	ee17 2a90 	vmov	r2, s15
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008440:	e008      	b.n	8008454 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	609a      	str	r2, [r3, #8]
}
 8008454:	bf00      	nop
 8008456:	3724      	adds	r7, #36	; 0x24
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr
 8008460:	58024400 	.word	0x58024400
 8008464:	03d09000 	.word	0x03d09000
 8008468:	46000000 	.word	0x46000000
 800846c:	4c742400 	.word	0x4c742400
 8008470:	4a742400 	.word	0x4a742400
 8008474:	4bb71b00 	.word	0x4bb71b00

08008478 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008482:	2300      	movs	r3, #0
 8008484:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008486:	4b53      	ldr	r3, [pc, #332]	; (80085d4 <RCCEx_PLL2_Config+0x15c>)
 8008488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800848a:	f003 0303 	and.w	r3, r3, #3
 800848e:	2b03      	cmp	r3, #3
 8008490:	d101      	bne.n	8008496 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	e099      	b.n	80085ca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008496:	4b4f      	ldr	r3, [pc, #316]	; (80085d4 <RCCEx_PLL2_Config+0x15c>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a4e      	ldr	r2, [pc, #312]	; (80085d4 <RCCEx_PLL2_Config+0x15c>)
 800849c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80084a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084a2:	f7f8 ffe1 	bl	8001468 <HAL_GetTick>
 80084a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80084a8:	e008      	b.n	80084bc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80084aa:	f7f8 ffdd 	bl	8001468 <HAL_GetTick>
 80084ae:	4602      	mov	r2, r0
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	1ad3      	subs	r3, r2, r3
 80084b4:	2b02      	cmp	r3, #2
 80084b6:	d901      	bls.n	80084bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80084b8:	2303      	movs	r3, #3
 80084ba:	e086      	b.n	80085ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80084bc:	4b45      	ldr	r3, [pc, #276]	; (80085d4 <RCCEx_PLL2_Config+0x15c>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d1f0      	bne.n	80084aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80084c8:	4b42      	ldr	r3, [pc, #264]	; (80085d4 <RCCEx_PLL2_Config+0x15c>)
 80084ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	031b      	lsls	r3, r3, #12
 80084d6:	493f      	ldr	r1, [pc, #252]	; (80085d4 <RCCEx_PLL2_Config+0x15c>)
 80084d8:	4313      	orrs	r3, r2
 80084da:	628b      	str	r3, [r1, #40]	; 0x28
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	3b01      	subs	r3, #1
 80084e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	3b01      	subs	r3, #1
 80084ec:	025b      	lsls	r3, r3, #9
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	431a      	orrs	r2, r3
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	3b01      	subs	r3, #1
 80084f8:	041b      	lsls	r3, r3, #16
 80084fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80084fe:	431a      	orrs	r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	691b      	ldr	r3, [r3, #16]
 8008504:	3b01      	subs	r3, #1
 8008506:	061b      	lsls	r3, r3, #24
 8008508:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800850c:	4931      	ldr	r1, [pc, #196]	; (80085d4 <RCCEx_PLL2_Config+0x15c>)
 800850e:	4313      	orrs	r3, r2
 8008510:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008512:	4b30      	ldr	r3, [pc, #192]	; (80085d4 <RCCEx_PLL2_Config+0x15c>)
 8008514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008516:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	695b      	ldr	r3, [r3, #20]
 800851e:	492d      	ldr	r1, [pc, #180]	; (80085d4 <RCCEx_PLL2_Config+0x15c>)
 8008520:	4313      	orrs	r3, r2
 8008522:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008524:	4b2b      	ldr	r3, [pc, #172]	; (80085d4 <RCCEx_PLL2_Config+0x15c>)
 8008526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008528:	f023 0220 	bic.w	r2, r3, #32
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	699b      	ldr	r3, [r3, #24]
 8008530:	4928      	ldr	r1, [pc, #160]	; (80085d4 <RCCEx_PLL2_Config+0x15c>)
 8008532:	4313      	orrs	r3, r2
 8008534:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008536:	4b27      	ldr	r3, [pc, #156]	; (80085d4 <RCCEx_PLL2_Config+0x15c>)
 8008538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800853a:	4a26      	ldr	r2, [pc, #152]	; (80085d4 <RCCEx_PLL2_Config+0x15c>)
 800853c:	f023 0310 	bic.w	r3, r3, #16
 8008540:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008542:	4b24      	ldr	r3, [pc, #144]	; (80085d4 <RCCEx_PLL2_Config+0x15c>)
 8008544:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008546:	4b24      	ldr	r3, [pc, #144]	; (80085d8 <RCCEx_PLL2_Config+0x160>)
 8008548:	4013      	ands	r3, r2
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	69d2      	ldr	r2, [r2, #28]
 800854e:	00d2      	lsls	r2, r2, #3
 8008550:	4920      	ldr	r1, [pc, #128]	; (80085d4 <RCCEx_PLL2_Config+0x15c>)
 8008552:	4313      	orrs	r3, r2
 8008554:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008556:	4b1f      	ldr	r3, [pc, #124]	; (80085d4 <RCCEx_PLL2_Config+0x15c>)
 8008558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855a:	4a1e      	ldr	r2, [pc, #120]	; (80085d4 <RCCEx_PLL2_Config+0x15c>)
 800855c:	f043 0310 	orr.w	r3, r3, #16
 8008560:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d106      	bne.n	8008576 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008568:	4b1a      	ldr	r3, [pc, #104]	; (80085d4 <RCCEx_PLL2_Config+0x15c>)
 800856a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800856c:	4a19      	ldr	r2, [pc, #100]	; (80085d4 <RCCEx_PLL2_Config+0x15c>)
 800856e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008572:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008574:	e00f      	b.n	8008596 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	2b01      	cmp	r3, #1
 800857a:	d106      	bne.n	800858a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800857c:	4b15      	ldr	r3, [pc, #84]	; (80085d4 <RCCEx_PLL2_Config+0x15c>)
 800857e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008580:	4a14      	ldr	r2, [pc, #80]	; (80085d4 <RCCEx_PLL2_Config+0x15c>)
 8008582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008586:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008588:	e005      	b.n	8008596 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800858a:	4b12      	ldr	r3, [pc, #72]	; (80085d4 <RCCEx_PLL2_Config+0x15c>)
 800858c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858e:	4a11      	ldr	r2, [pc, #68]	; (80085d4 <RCCEx_PLL2_Config+0x15c>)
 8008590:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008594:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008596:	4b0f      	ldr	r3, [pc, #60]	; (80085d4 <RCCEx_PLL2_Config+0x15c>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a0e      	ldr	r2, [pc, #56]	; (80085d4 <RCCEx_PLL2_Config+0x15c>)
 800859c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80085a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085a2:	f7f8 ff61 	bl	8001468 <HAL_GetTick>
 80085a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80085a8:	e008      	b.n	80085bc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80085aa:	f7f8 ff5d 	bl	8001468 <HAL_GetTick>
 80085ae:	4602      	mov	r2, r0
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	1ad3      	subs	r3, r2, r3
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	d901      	bls.n	80085bc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80085b8:	2303      	movs	r3, #3
 80085ba:	e006      	b.n	80085ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80085bc:	4b05      	ldr	r3, [pc, #20]	; (80085d4 <RCCEx_PLL2_Config+0x15c>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d0f0      	beq.n	80085aa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	58024400 	.word	0x58024400
 80085d8:	ffff0007 	.word	0xffff0007

080085dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80085e6:	2300      	movs	r3, #0
 80085e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80085ea:	4b53      	ldr	r3, [pc, #332]	; (8008738 <RCCEx_PLL3_Config+0x15c>)
 80085ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ee:	f003 0303 	and.w	r3, r3, #3
 80085f2:	2b03      	cmp	r3, #3
 80085f4:	d101      	bne.n	80085fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	e099      	b.n	800872e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80085fa:	4b4f      	ldr	r3, [pc, #316]	; (8008738 <RCCEx_PLL3_Config+0x15c>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a4e      	ldr	r2, [pc, #312]	; (8008738 <RCCEx_PLL3_Config+0x15c>)
 8008600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008604:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008606:	f7f8 ff2f 	bl	8001468 <HAL_GetTick>
 800860a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800860c:	e008      	b.n	8008620 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800860e:	f7f8 ff2b 	bl	8001468 <HAL_GetTick>
 8008612:	4602      	mov	r2, r0
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	1ad3      	subs	r3, r2, r3
 8008618:	2b02      	cmp	r3, #2
 800861a:	d901      	bls.n	8008620 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800861c:	2303      	movs	r3, #3
 800861e:	e086      	b.n	800872e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008620:	4b45      	ldr	r3, [pc, #276]	; (8008738 <RCCEx_PLL3_Config+0x15c>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008628:	2b00      	cmp	r3, #0
 800862a:	d1f0      	bne.n	800860e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800862c:	4b42      	ldr	r3, [pc, #264]	; (8008738 <RCCEx_PLL3_Config+0x15c>)
 800862e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008630:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	051b      	lsls	r3, r3, #20
 800863a:	493f      	ldr	r1, [pc, #252]	; (8008738 <RCCEx_PLL3_Config+0x15c>)
 800863c:	4313      	orrs	r3, r2
 800863e:	628b      	str	r3, [r1, #40]	; 0x28
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	3b01      	subs	r3, #1
 8008646:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	3b01      	subs	r3, #1
 8008650:	025b      	lsls	r3, r3, #9
 8008652:	b29b      	uxth	r3, r3
 8008654:	431a      	orrs	r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	3b01      	subs	r3, #1
 800865c:	041b      	lsls	r3, r3, #16
 800865e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008662:	431a      	orrs	r2, r3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	3b01      	subs	r3, #1
 800866a:	061b      	lsls	r3, r3, #24
 800866c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008670:	4931      	ldr	r1, [pc, #196]	; (8008738 <RCCEx_PLL3_Config+0x15c>)
 8008672:	4313      	orrs	r3, r2
 8008674:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008676:	4b30      	ldr	r3, [pc, #192]	; (8008738 <RCCEx_PLL3_Config+0x15c>)
 8008678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	695b      	ldr	r3, [r3, #20]
 8008682:	492d      	ldr	r1, [pc, #180]	; (8008738 <RCCEx_PLL3_Config+0x15c>)
 8008684:	4313      	orrs	r3, r2
 8008686:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008688:	4b2b      	ldr	r3, [pc, #172]	; (8008738 <RCCEx_PLL3_Config+0x15c>)
 800868a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800868c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	699b      	ldr	r3, [r3, #24]
 8008694:	4928      	ldr	r1, [pc, #160]	; (8008738 <RCCEx_PLL3_Config+0x15c>)
 8008696:	4313      	orrs	r3, r2
 8008698:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800869a:	4b27      	ldr	r3, [pc, #156]	; (8008738 <RCCEx_PLL3_Config+0x15c>)
 800869c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800869e:	4a26      	ldr	r2, [pc, #152]	; (8008738 <RCCEx_PLL3_Config+0x15c>)
 80086a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80086a6:	4b24      	ldr	r3, [pc, #144]	; (8008738 <RCCEx_PLL3_Config+0x15c>)
 80086a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086aa:	4b24      	ldr	r3, [pc, #144]	; (800873c <RCCEx_PLL3_Config+0x160>)
 80086ac:	4013      	ands	r3, r2
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	69d2      	ldr	r2, [r2, #28]
 80086b2:	00d2      	lsls	r2, r2, #3
 80086b4:	4920      	ldr	r1, [pc, #128]	; (8008738 <RCCEx_PLL3_Config+0x15c>)
 80086b6:	4313      	orrs	r3, r2
 80086b8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80086ba:	4b1f      	ldr	r3, [pc, #124]	; (8008738 <RCCEx_PLL3_Config+0x15c>)
 80086bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086be:	4a1e      	ldr	r2, [pc, #120]	; (8008738 <RCCEx_PLL3_Config+0x15c>)
 80086c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d106      	bne.n	80086da <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80086cc:	4b1a      	ldr	r3, [pc, #104]	; (8008738 <RCCEx_PLL3_Config+0x15c>)
 80086ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d0:	4a19      	ldr	r2, [pc, #100]	; (8008738 <RCCEx_PLL3_Config+0x15c>)
 80086d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80086d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80086d8:	e00f      	b.n	80086fa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d106      	bne.n	80086ee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80086e0:	4b15      	ldr	r3, [pc, #84]	; (8008738 <RCCEx_PLL3_Config+0x15c>)
 80086e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e4:	4a14      	ldr	r2, [pc, #80]	; (8008738 <RCCEx_PLL3_Config+0x15c>)
 80086e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80086ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80086ec:	e005      	b.n	80086fa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80086ee:	4b12      	ldr	r3, [pc, #72]	; (8008738 <RCCEx_PLL3_Config+0x15c>)
 80086f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f2:	4a11      	ldr	r2, [pc, #68]	; (8008738 <RCCEx_PLL3_Config+0x15c>)
 80086f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80086fa:	4b0f      	ldr	r3, [pc, #60]	; (8008738 <RCCEx_PLL3_Config+0x15c>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a0e      	ldr	r2, [pc, #56]	; (8008738 <RCCEx_PLL3_Config+0x15c>)
 8008700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008704:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008706:	f7f8 feaf 	bl	8001468 <HAL_GetTick>
 800870a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800870c:	e008      	b.n	8008720 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800870e:	f7f8 feab 	bl	8001468 <HAL_GetTick>
 8008712:	4602      	mov	r2, r0
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	1ad3      	subs	r3, r2, r3
 8008718:	2b02      	cmp	r3, #2
 800871a:	d901      	bls.n	8008720 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800871c:	2303      	movs	r3, #3
 800871e:	e006      	b.n	800872e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008720:	4b05      	ldr	r3, [pc, #20]	; (8008738 <RCCEx_PLL3_Config+0x15c>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008728:	2b00      	cmp	r3, #0
 800872a:	d0f0      	beq.n	800870e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800872c:	7bfb      	ldrb	r3, [r7, #15]
}
 800872e:	4618      	mov	r0, r3
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	58024400 	.word	0x58024400
 800873c:	ffff0007 	.word	0xffff0007

08008740 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d101      	bne.n	8008752 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e10f      	b.n	8008972 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a87      	ldr	r2, [pc, #540]	; (800897c <HAL_SPI_Init+0x23c>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d00f      	beq.n	8008782 <HAL_SPI_Init+0x42>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a86      	ldr	r2, [pc, #536]	; (8008980 <HAL_SPI_Init+0x240>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d00a      	beq.n	8008782 <HAL_SPI_Init+0x42>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a84      	ldr	r2, [pc, #528]	; (8008984 <HAL_SPI_Init+0x244>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d005      	beq.n	8008782 <HAL_SPI_Init+0x42>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	2b0f      	cmp	r3, #15
 800877c:	d901      	bls.n	8008782 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	e0f7      	b.n	8008972 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fbbc 	bl	8008f00 <SPI_GetPacketSize>
 8008788:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a7b      	ldr	r2, [pc, #492]	; (800897c <HAL_SPI_Init+0x23c>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d00c      	beq.n	80087ae <HAL_SPI_Init+0x6e>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a79      	ldr	r2, [pc, #484]	; (8008980 <HAL_SPI_Init+0x240>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d007      	beq.n	80087ae <HAL_SPI_Init+0x6e>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a78      	ldr	r2, [pc, #480]	; (8008984 <HAL_SPI_Init+0x244>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d002      	beq.n	80087ae <HAL_SPI_Init+0x6e>
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2b08      	cmp	r3, #8
 80087ac:	d811      	bhi.n	80087d2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80087b2:	4a72      	ldr	r2, [pc, #456]	; (800897c <HAL_SPI_Init+0x23c>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d009      	beq.n	80087cc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a70      	ldr	r2, [pc, #448]	; (8008980 <HAL_SPI_Init+0x240>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d004      	beq.n	80087cc <HAL_SPI_Init+0x8c>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a6f      	ldr	r2, [pc, #444]	; (8008984 <HAL_SPI_Init+0x244>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d104      	bne.n	80087d6 <HAL_SPI_Init+0x96>
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2b10      	cmp	r3, #16
 80087d0:	d901      	bls.n	80087d6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	e0cd      	b.n	8008972 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d106      	bne.n	80087f0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f7f8 f8e6 	bl	80009bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2202      	movs	r2, #2
 80087f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f022 0201 	bic.w	r2, r2, #1
 8008806:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008812:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	699b      	ldr	r3, [r3, #24]
 8008818:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800881c:	d119      	bne.n	8008852 <HAL_SPI_Init+0x112>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008826:	d103      	bne.n	8008830 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800882c:	2b00      	cmp	r3, #0
 800882e:	d008      	beq.n	8008842 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008834:	2b00      	cmp	r3, #0
 8008836:	d10c      	bne.n	8008852 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800883c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008840:	d107      	bne.n	8008852 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008850:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00f      	beq.n	800887e <HAL_SPI_Init+0x13e>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	2b06      	cmp	r3, #6
 8008864:	d90b      	bls.n	800887e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	430a      	orrs	r2, r1
 800887a:	601a      	str	r2, [r3, #0]
 800887c:	e007      	b.n	800888e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800888c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	69da      	ldr	r2, [r3, #28]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008896:	431a      	orrs	r2, r3
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	431a      	orrs	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088a0:	ea42 0103 	orr.w	r1, r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	68da      	ldr	r2, [r3, #12]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	430a      	orrs	r2, r1
 80088ae:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b8:	431a      	orrs	r2, r3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088be:	431a      	orrs	r2, r3
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	699b      	ldr	r3, [r3, #24]
 80088c4:	431a      	orrs	r2, r3
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	691b      	ldr	r3, [r3, #16]
 80088ca:	431a      	orrs	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	695b      	ldr	r3, [r3, #20]
 80088d0:	431a      	orrs	r2, r3
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a1b      	ldr	r3, [r3, #32]
 80088d6:	431a      	orrs	r2, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	431a      	orrs	r2, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088e2:	431a      	orrs	r2, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	431a      	orrs	r2, r3
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088ee:	ea42 0103 	orr.w	r1, r2, r3
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	430a      	orrs	r2, r1
 80088fc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d113      	bne.n	800892e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008918:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800892c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f022 0201 	bic.w	r2, r2, #1
 800893c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00a      	beq.n	8008960 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	430a      	orrs	r2, r1
 800895e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008970:	2300      	movs	r3, #0
}
 8008972:	4618      	mov	r0, r3
 8008974:	3710      	adds	r7, #16
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	40013000 	.word	0x40013000
 8008980:	40003800 	.word	0x40003800
 8008984:	40003c00 	.word	0x40003c00

08008988 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b088      	sub	sp, #32
 800898c:	af02      	add	r7, sp, #8
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	603b      	str	r3, [r7, #0]
 8008994:	4613      	mov	r3, r2
 8008996:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	3320      	adds	r3, #32
 800899e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80089a0:	f7f8 fd62 	bl	8001468 <HAL_GetTick>
 80089a4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d001      	beq.n	80089b6 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80089b2:	2302      	movs	r3, #2
 80089b4:	e1d1      	b.n	8008d5a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d002      	beq.n	80089c2 <HAL_SPI_Transmit+0x3a>
 80089bc:	88fb      	ldrh	r3, [r7, #6]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d101      	bne.n	80089c6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	e1c9      	b.n	8008d5a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d101      	bne.n	80089d4 <HAL_SPI_Transmit+0x4c>
 80089d0:	2302      	movs	r3, #2
 80089d2:	e1c2      	b.n	8008d5a <HAL_SPI_Transmit+0x3d2>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2203      	movs	r2, #3
 80089e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	88fa      	ldrh	r2, [r7, #6]
 80089f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	88fa      	ldrh	r2, [r7, #6]
 80089fe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2200      	movs	r2, #0
 8008a22:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008a2c:	d108      	bne.n	8008a40 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a3c:	601a      	str	r2, [r3, #0]
 8008a3e:	e009      	b.n	8008a54 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008a52:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	685a      	ldr	r2, [r3, #4]
 8008a5a:	4b96      	ldr	r3, [pc, #600]	; (8008cb4 <HAL_SPI_Transmit+0x32c>)
 8008a5c:	4013      	ands	r3, r2
 8008a5e:	88f9      	ldrh	r1, [r7, #6]
 8008a60:	68fa      	ldr	r2, [r7, #12]
 8008a62:	6812      	ldr	r2, [r2, #0]
 8008a64:	430b      	orrs	r3, r1
 8008a66:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f042 0201 	orr.w	r2, r2, #1
 8008a76:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a80:	d107      	bne.n	8008a92 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	2b0f      	cmp	r3, #15
 8008a98:	d947      	bls.n	8008b2a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008a9a:	e03f      	b.n	8008b1c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	695b      	ldr	r3, [r3, #20]
 8008aa2:	f003 0302 	and.w	r3, r3, #2
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d114      	bne.n	8008ad4 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	6812      	ldr	r2, [r2, #0]
 8008ab4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008aba:	1d1a      	adds	r2, r3, #4
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	b29a      	uxth	r2, r3
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008ad2:	e023      	b.n	8008b1c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ad4:	f7f8 fcc8 	bl	8001468 <HAL_GetTick>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	1ad3      	subs	r3, r2, r3
 8008ade:	683a      	ldr	r2, [r7, #0]
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d803      	bhi.n	8008aec <HAL_SPI_Transmit+0x164>
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aea:	d102      	bne.n	8008af2 <HAL_SPI_Transmit+0x16a>
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d114      	bne.n	8008b1c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008af2:	68f8      	ldr	r0, [r7, #12]
 8008af4:	f000 f936 	bl	8008d64 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008afe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2200      	movs	r2, #0
 8008b14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008b18:	2303      	movs	r3, #3
 8008b1a:	e11e      	b.n	8008d5a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d1b9      	bne.n	8008a9c <HAL_SPI_Transmit+0x114>
 8008b28:	e0f1      	b.n	8008d0e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	2b07      	cmp	r3, #7
 8008b30:	f240 80e6 	bls.w	8008d00 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008b34:	e05d      	b.n	8008bf2 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	695b      	ldr	r3, [r3, #20]
 8008b3c:	f003 0302 	and.w	r3, r3, #2
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	d132      	bne.n	8008baa <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d918      	bls.n	8008b82 <HAL_SPI_Transmit+0x1fa>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d014      	beq.n	8008b82 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	6812      	ldr	r2, [r2, #0]
 8008b62:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b68:	1d1a      	adds	r2, r3, #4
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	3b02      	subs	r3, #2
 8008b78:	b29a      	uxth	r2, r3
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008b80:	e037      	b.n	8008bf2 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b86:	881a      	ldrh	r2, [r3, #0]
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b90:	1c9a      	adds	r2, r3, #2
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	3b01      	subs	r3, #1
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008ba8:	e023      	b.n	8008bf2 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008baa:	f7f8 fc5d 	bl	8001468 <HAL_GetTick>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	1ad3      	subs	r3, r2, r3
 8008bb4:	683a      	ldr	r2, [r7, #0]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d803      	bhi.n	8008bc2 <HAL_SPI_Transmit+0x23a>
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc0:	d102      	bne.n	8008bc8 <HAL_SPI_Transmit+0x240>
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d114      	bne.n	8008bf2 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008bc8:	68f8      	ldr	r0, [r7, #12]
 8008bca:	f000 f8cb 	bl	8008d64 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bd4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2201      	movs	r2, #1
 8008be2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008bee:	2303      	movs	r3, #3
 8008bf0:	e0b3      	b.n	8008d5a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d19b      	bne.n	8008b36 <HAL_SPI_Transmit+0x1ae>
 8008bfe:	e086      	b.n	8008d0e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	695b      	ldr	r3, [r3, #20]
 8008c06:	f003 0302 	and.w	r3, r3, #2
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	d154      	bne.n	8008cb8 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	2b03      	cmp	r3, #3
 8008c18:	d918      	bls.n	8008c4c <HAL_SPI_Transmit+0x2c4>
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c1e:	2b40      	cmp	r3, #64	; 0x40
 8008c20:	d914      	bls.n	8008c4c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	6812      	ldr	r2, [r2, #0]
 8008c2c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c32:	1d1a      	adds	r2, r3, #4
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	3b04      	subs	r3, #4
 8008c42:	b29a      	uxth	r2, r3
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008c4a:	e059      	b.n	8008d00 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d917      	bls.n	8008c88 <HAL_SPI_Transmit+0x300>
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d013      	beq.n	8008c88 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c64:	881a      	ldrh	r2, [r3, #0]
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c6e:	1c9a      	adds	r2, r3, #2
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	3b02      	subs	r3, #2
 8008c7e:	b29a      	uxth	r2, r3
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008c86:	e03b      	b.n	8008d00 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	3320      	adds	r3, #32
 8008c92:	7812      	ldrb	r2, [r2, #0]
 8008c94:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c9a:	1c5a      	adds	r2, r3, #1
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	b29a      	uxth	r2, r3
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008cb2:	e025      	b.n	8008d00 <HAL_SPI_Transmit+0x378>
 8008cb4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cb8:	f7f8 fbd6 	bl	8001468 <HAL_GetTick>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	1ad3      	subs	r3, r2, r3
 8008cc2:	683a      	ldr	r2, [r7, #0]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d803      	bhi.n	8008cd0 <HAL_SPI_Transmit+0x348>
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cce:	d102      	bne.n	8008cd6 <HAL_SPI_Transmit+0x34e>
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d114      	bne.n	8008d00 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f000 f844 	bl	8008d64 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ce2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	e02c      	b.n	8008d5a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	f47f af79 	bne.w	8008c00 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	9300      	str	r3, [sp, #0]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	2200      	movs	r2, #0
 8008d16:	2108      	movs	r1, #8
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	f000 f8c3 	bl	8008ea4 <SPI_WaitOnFlagUntilTimeout>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d007      	beq.n	8008d34 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d2a:	f043 0220 	orr.w	r2, r3, #32
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008d34:	68f8      	ldr	r0, [r7, #12]
 8008d36:	f000 f815 	bl	8008d64 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2200      	movs	r2, #0
 8008d46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d001      	beq.n	8008d58 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8008d54:	2301      	movs	r3, #1
 8008d56:	e000      	b.n	8008d5a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8008d58:	2300      	movs	r3, #0
  }
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3718      	adds	r7, #24
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop

08008d64 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b085      	sub	sp, #20
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	695b      	ldr	r3, [r3, #20]
 8008d72:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	699a      	ldr	r2, [r3, #24]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f042 0208 	orr.w	r2, r2, #8
 8008d82:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	699a      	ldr	r2, [r3, #24]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f042 0210 	orr.w	r2, r2, #16
 8008d92:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f022 0201 	bic.w	r2, r2, #1
 8008da2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	6919      	ldr	r1, [r3, #16]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	4b3c      	ldr	r3, [pc, #240]	; (8008ea0 <SPI_CloseTransfer+0x13c>)
 8008db0:	400b      	ands	r3, r1
 8008db2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	689a      	ldr	r2, [r3, #8]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008dc2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	2b04      	cmp	r3, #4
 8008dce:	d014      	beq.n	8008dfa <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f003 0320 	and.w	r3, r3, #32
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00f      	beq.n	8008dfa <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008de0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	699a      	ldr	r2, [r3, #24]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f042 0220 	orr.w	r2, r2, #32
 8008df8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	2b03      	cmp	r3, #3
 8008e04:	d014      	beq.n	8008e30 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00f      	beq.n	8008e30 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e16:	f043 0204 	orr.w	r2, r3, #4
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	699a      	ldr	r2, [r3, #24]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e2e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d00f      	beq.n	8008e5a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e40:	f043 0201 	orr.w	r2, r3, #1
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	699a      	ldr	r2, [r3, #24]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e58:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d00f      	beq.n	8008e84 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e6a:	f043 0208 	orr.w	r2, r3, #8
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	699a      	ldr	r2, [r3, #24]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e82:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008e94:	bf00      	nop
 8008e96:	3714      	adds	r7, #20
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr
 8008ea0:	fffffc90 	.word	0xfffffc90

08008ea4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	603b      	str	r3, [r7, #0]
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008eb4:	e010      	b.n	8008ed8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008eb6:	f7f8 fad7 	bl	8001468 <HAL_GetTick>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	1ad3      	subs	r3, r2, r3
 8008ec0:	683a      	ldr	r2, [r7, #0]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d803      	bhi.n	8008ece <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ecc:	d102      	bne.n	8008ed4 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d101      	bne.n	8008ed8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008ed4:	2303      	movs	r3, #3
 8008ed6:	e00f      	b.n	8008ef8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	695a      	ldr	r2, [r3, #20]
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	68ba      	ldr	r2, [r7, #8]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	bf0c      	ite	eq
 8008ee8:	2301      	moveq	r3, #1
 8008eea:	2300      	movne	r3, #0
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	461a      	mov	r2, r3
 8008ef0:	79fb      	ldrb	r3, [r7, #7]
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d0df      	beq.n	8008eb6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3710      	adds	r7, #16
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f0c:	095b      	lsrs	r3, r3, #5
 8008f0e:	3301      	adds	r3, #1
 8008f10:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	3301      	adds	r3, #1
 8008f18:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	3307      	adds	r3, #7
 8008f1e:	08db      	lsrs	r3, r3, #3
 8008f20:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	68fa      	ldr	r2, [r7, #12]
 8008f26:	fb02 f303 	mul.w	r3, r2, r3
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3714      	adds	r7, #20
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr

08008f36 <__cvt>:
 8008f36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f38:	ed2d 8b02 	vpush	{d8}
 8008f3c:	eeb0 8b40 	vmov.f64	d8, d0
 8008f40:	b085      	sub	sp, #20
 8008f42:	4617      	mov	r7, r2
 8008f44:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008f46:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008f48:	ee18 2a90 	vmov	r2, s17
 8008f4c:	f025 0520 	bic.w	r5, r5, #32
 8008f50:	2a00      	cmp	r2, #0
 8008f52:	bfb6      	itet	lt
 8008f54:	222d      	movlt	r2, #45	; 0x2d
 8008f56:	2200      	movge	r2, #0
 8008f58:	eeb1 8b40 	vneglt.f64	d8, d0
 8008f5c:	2d46      	cmp	r5, #70	; 0x46
 8008f5e:	460c      	mov	r4, r1
 8008f60:	701a      	strb	r2, [r3, #0]
 8008f62:	d004      	beq.n	8008f6e <__cvt+0x38>
 8008f64:	2d45      	cmp	r5, #69	; 0x45
 8008f66:	d100      	bne.n	8008f6a <__cvt+0x34>
 8008f68:	3401      	adds	r4, #1
 8008f6a:	2102      	movs	r1, #2
 8008f6c:	e000      	b.n	8008f70 <__cvt+0x3a>
 8008f6e:	2103      	movs	r1, #3
 8008f70:	ab03      	add	r3, sp, #12
 8008f72:	9301      	str	r3, [sp, #4]
 8008f74:	ab02      	add	r3, sp, #8
 8008f76:	9300      	str	r3, [sp, #0]
 8008f78:	4622      	mov	r2, r4
 8008f7a:	4633      	mov	r3, r6
 8008f7c:	eeb0 0b48 	vmov.f64	d0, d8
 8008f80:	f000 fe6a 	bl	8009c58 <_dtoa_r>
 8008f84:	2d47      	cmp	r5, #71	; 0x47
 8008f86:	d101      	bne.n	8008f8c <__cvt+0x56>
 8008f88:	07fb      	lsls	r3, r7, #31
 8008f8a:	d51a      	bpl.n	8008fc2 <__cvt+0x8c>
 8008f8c:	2d46      	cmp	r5, #70	; 0x46
 8008f8e:	eb00 0204 	add.w	r2, r0, r4
 8008f92:	d10c      	bne.n	8008fae <__cvt+0x78>
 8008f94:	7803      	ldrb	r3, [r0, #0]
 8008f96:	2b30      	cmp	r3, #48	; 0x30
 8008f98:	d107      	bne.n	8008faa <__cvt+0x74>
 8008f9a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fa2:	bf1c      	itt	ne
 8008fa4:	f1c4 0401 	rsbne	r4, r4, #1
 8008fa8:	6034      	strne	r4, [r6, #0]
 8008faa:	6833      	ldr	r3, [r6, #0]
 8008fac:	441a      	add	r2, r3
 8008fae:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fb6:	bf08      	it	eq
 8008fb8:	9203      	streq	r2, [sp, #12]
 8008fba:	2130      	movs	r1, #48	; 0x30
 8008fbc:	9b03      	ldr	r3, [sp, #12]
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d307      	bcc.n	8008fd2 <__cvt+0x9c>
 8008fc2:	9b03      	ldr	r3, [sp, #12]
 8008fc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fc6:	1a1b      	subs	r3, r3, r0
 8008fc8:	6013      	str	r3, [r2, #0]
 8008fca:	b005      	add	sp, #20
 8008fcc:	ecbd 8b02 	vpop	{d8}
 8008fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fd2:	1c5c      	adds	r4, r3, #1
 8008fd4:	9403      	str	r4, [sp, #12]
 8008fd6:	7019      	strb	r1, [r3, #0]
 8008fd8:	e7f0      	b.n	8008fbc <__cvt+0x86>

08008fda <__exponent>:
 8008fda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2900      	cmp	r1, #0
 8008fe0:	bfb8      	it	lt
 8008fe2:	4249      	neglt	r1, r1
 8008fe4:	f803 2b02 	strb.w	r2, [r3], #2
 8008fe8:	bfb4      	ite	lt
 8008fea:	222d      	movlt	r2, #45	; 0x2d
 8008fec:	222b      	movge	r2, #43	; 0x2b
 8008fee:	2909      	cmp	r1, #9
 8008ff0:	7042      	strb	r2, [r0, #1]
 8008ff2:	dd2a      	ble.n	800904a <__exponent+0x70>
 8008ff4:	f10d 0207 	add.w	r2, sp, #7
 8008ff8:	4617      	mov	r7, r2
 8008ffa:	260a      	movs	r6, #10
 8008ffc:	4694      	mov	ip, r2
 8008ffe:	fb91 f5f6 	sdiv	r5, r1, r6
 8009002:	fb06 1415 	mls	r4, r6, r5, r1
 8009006:	3430      	adds	r4, #48	; 0x30
 8009008:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800900c:	460c      	mov	r4, r1
 800900e:	2c63      	cmp	r4, #99	; 0x63
 8009010:	f102 32ff 	add.w	r2, r2, #4294967295
 8009014:	4629      	mov	r1, r5
 8009016:	dcf1      	bgt.n	8008ffc <__exponent+0x22>
 8009018:	3130      	adds	r1, #48	; 0x30
 800901a:	f1ac 0402 	sub.w	r4, ip, #2
 800901e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009022:	1c41      	adds	r1, r0, #1
 8009024:	4622      	mov	r2, r4
 8009026:	42ba      	cmp	r2, r7
 8009028:	d30a      	bcc.n	8009040 <__exponent+0x66>
 800902a:	f10d 0209 	add.w	r2, sp, #9
 800902e:	eba2 020c 	sub.w	r2, r2, ip
 8009032:	42bc      	cmp	r4, r7
 8009034:	bf88      	it	hi
 8009036:	2200      	movhi	r2, #0
 8009038:	4413      	add	r3, r2
 800903a:	1a18      	subs	r0, r3, r0
 800903c:	b003      	add	sp, #12
 800903e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009040:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009044:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009048:	e7ed      	b.n	8009026 <__exponent+0x4c>
 800904a:	2330      	movs	r3, #48	; 0x30
 800904c:	3130      	adds	r1, #48	; 0x30
 800904e:	7083      	strb	r3, [r0, #2]
 8009050:	70c1      	strb	r1, [r0, #3]
 8009052:	1d03      	adds	r3, r0, #4
 8009054:	e7f1      	b.n	800903a <__exponent+0x60>
	...

08009058 <_printf_float>:
 8009058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800905c:	b08b      	sub	sp, #44	; 0x2c
 800905e:	460c      	mov	r4, r1
 8009060:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009064:	4616      	mov	r6, r2
 8009066:	461f      	mov	r7, r3
 8009068:	4605      	mov	r5, r0
 800906a:	f000 fce7 	bl	8009a3c <_localeconv_r>
 800906e:	f8d0 b000 	ldr.w	fp, [r0]
 8009072:	4658      	mov	r0, fp
 8009074:	f7f7 f98c 	bl	8000390 <strlen>
 8009078:	2300      	movs	r3, #0
 800907a:	9308      	str	r3, [sp, #32]
 800907c:	f8d8 3000 	ldr.w	r3, [r8]
 8009080:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009084:	6822      	ldr	r2, [r4, #0]
 8009086:	3307      	adds	r3, #7
 8009088:	f023 0307 	bic.w	r3, r3, #7
 800908c:	f103 0108 	add.w	r1, r3, #8
 8009090:	f8c8 1000 	str.w	r1, [r8]
 8009094:	ed93 0b00 	vldr	d0, [r3]
 8009098:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80092f8 <_printf_float+0x2a0>
 800909c:	eeb0 7bc0 	vabs.f64	d7, d0
 80090a0:	eeb4 7b46 	vcmp.f64	d7, d6
 80090a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090a8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80090ac:	4682      	mov	sl, r0
 80090ae:	dd24      	ble.n	80090fa <_printf_float+0xa2>
 80090b0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80090b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090b8:	d502      	bpl.n	80090c0 <_printf_float+0x68>
 80090ba:	232d      	movs	r3, #45	; 0x2d
 80090bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090c0:	498f      	ldr	r1, [pc, #572]	; (8009300 <_printf_float+0x2a8>)
 80090c2:	4b90      	ldr	r3, [pc, #576]	; (8009304 <_printf_float+0x2ac>)
 80090c4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80090c8:	bf94      	ite	ls
 80090ca:	4688      	movls	r8, r1
 80090cc:	4698      	movhi	r8, r3
 80090ce:	2303      	movs	r3, #3
 80090d0:	6123      	str	r3, [r4, #16]
 80090d2:	f022 0204 	bic.w	r2, r2, #4
 80090d6:	2300      	movs	r3, #0
 80090d8:	6022      	str	r2, [r4, #0]
 80090da:	9304      	str	r3, [sp, #16]
 80090dc:	9700      	str	r7, [sp, #0]
 80090de:	4633      	mov	r3, r6
 80090e0:	aa09      	add	r2, sp, #36	; 0x24
 80090e2:	4621      	mov	r1, r4
 80090e4:	4628      	mov	r0, r5
 80090e6:	f000 f9d1 	bl	800948c <_printf_common>
 80090ea:	3001      	adds	r0, #1
 80090ec:	f040 808a 	bne.w	8009204 <_printf_float+0x1ac>
 80090f0:	f04f 30ff 	mov.w	r0, #4294967295
 80090f4:	b00b      	add	sp, #44	; 0x2c
 80090f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090fa:	eeb4 0b40 	vcmp.f64	d0, d0
 80090fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009102:	d709      	bvc.n	8009118 <_printf_float+0xc0>
 8009104:	ee10 3a90 	vmov	r3, s1
 8009108:	2b00      	cmp	r3, #0
 800910a:	bfbc      	itt	lt
 800910c:	232d      	movlt	r3, #45	; 0x2d
 800910e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009112:	497d      	ldr	r1, [pc, #500]	; (8009308 <_printf_float+0x2b0>)
 8009114:	4b7d      	ldr	r3, [pc, #500]	; (800930c <_printf_float+0x2b4>)
 8009116:	e7d5      	b.n	80090c4 <_printf_float+0x6c>
 8009118:	6863      	ldr	r3, [r4, #4]
 800911a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800911e:	9104      	str	r1, [sp, #16]
 8009120:	1c59      	adds	r1, r3, #1
 8009122:	d13c      	bne.n	800919e <_printf_float+0x146>
 8009124:	2306      	movs	r3, #6
 8009126:	6063      	str	r3, [r4, #4]
 8009128:	2300      	movs	r3, #0
 800912a:	9303      	str	r3, [sp, #12]
 800912c:	ab08      	add	r3, sp, #32
 800912e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009132:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009136:	ab07      	add	r3, sp, #28
 8009138:	6861      	ldr	r1, [r4, #4]
 800913a:	9300      	str	r3, [sp, #0]
 800913c:	6022      	str	r2, [r4, #0]
 800913e:	f10d 031b 	add.w	r3, sp, #27
 8009142:	4628      	mov	r0, r5
 8009144:	f7ff fef7 	bl	8008f36 <__cvt>
 8009148:	9b04      	ldr	r3, [sp, #16]
 800914a:	9907      	ldr	r1, [sp, #28]
 800914c:	2b47      	cmp	r3, #71	; 0x47
 800914e:	4680      	mov	r8, r0
 8009150:	d108      	bne.n	8009164 <_printf_float+0x10c>
 8009152:	1cc8      	adds	r0, r1, #3
 8009154:	db02      	blt.n	800915c <_printf_float+0x104>
 8009156:	6863      	ldr	r3, [r4, #4]
 8009158:	4299      	cmp	r1, r3
 800915a:	dd41      	ble.n	80091e0 <_printf_float+0x188>
 800915c:	f1a9 0902 	sub.w	r9, r9, #2
 8009160:	fa5f f989 	uxtb.w	r9, r9
 8009164:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009168:	d820      	bhi.n	80091ac <_printf_float+0x154>
 800916a:	3901      	subs	r1, #1
 800916c:	464a      	mov	r2, r9
 800916e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009172:	9107      	str	r1, [sp, #28]
 8009174:	f7ff ff31 	bl	8008fda <__exponent>
 8009178:	9a08      	ldr	r2, [sp, #32]
 800917a:	9004      	str	r0, [sp, #16]
 800917c:	1813      	adds	r3, r2, r0
 800917e:	2a01      	cmp	r2, #1
 8009180:	6123      	str	r3, [r4, #16]
 8009182:	dc02      	bgt.n	800918a <_printf_float+0x132>
 8009184:	6822      	ldr	r2, [r4, #0]
 8009186:	07d2      	lsls	r2, r2, #31
 8009188:	d501      	bpl.n	800918e <_printf_float+0x136>
 800918a:	3301      	adds	r3, #1
 800918c:	6123      	str	r3, [r4, #16]
 800918e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d0a2      	beq.n	80090dc <_printf_float+0x84>
 8009196:	232d      	movs	r3, #45	; 0x2d
 8009198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800919c:	e79e      	b.n	80090dc <_printf_float+0x84>
 800919e:	9904      	ldr	r1, [sp, #16]
 80091a0:	2947      	cmp	r1, #71	; 0x47
 80091a2:	d1c1      	bne.n	8009128 <_printf_float+0xd0>
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d1bf      	bne.n	8009128 <_printf_float+0xd0>
 80091a8:	2301      	movs	r3, #1
 80091aa:	e7bc      	b.n	8009126 <_printf_float+0xce>
 80091ac:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80091b0:	d118      	bne.n	80091e4 <_printf_float+0x18c>
 80091b2:	2900      	cmp	r1, #0
 80091b4:	6863      	ldr	r3, [r4, #4]
 80091b6:	dd0b      	ble.n	80091d0 <_printf_float+0x178>
 80091b8:	6121      	str	r1, [r4, #16]
 80091ba:	b913      	cbnz	r3, 80091c2 <_printf_float+0x16a>
 80091bc:	6822      	ldr	r2, [r4, #0]
 80091be:	07d0      	lsls	r0, r2, #31
 80091c0:	d502      	bpl.n	80091c8 <_printf_float+0x170>
 80091c2:	3301      	adds	r3, #1
 80091c4:	440b      	add	r3, r1
 80091c6:	6123      	str	r3, [r4, #16]
 80091c8:	2300      	movs	r3, #0
 80091ca:	65a1      	str	r1, [r4, #88]	; 0x58
 80091cc:	9304      	str	r3, [sp, #16]
 80091ce:	e7de      	b.n	800918e <_printf_float+0x136>
 80091d0:	b913      	cbnz	r3, 80091d8 <_printf_float+0x180>
 80091d2:	6822      	ldr	r2, [r4, #0]
 80091d4:	07d2      	lsls	r2, r2, #31
 80091d6:	d501      	bpl.n	80091dc <_printf_float+0x184>
 80091d8:	3302      	adds	r3, #2
 80091da:	e7f4      	b.n	80091c6 <_printf_float+0x16e>
 80091dc:	2301      	movs	r3, #1
 80091de:	e7f2      	b.n	80091c6 <_printf_float+0x16e>
 80091e0:	f04f 0967 	mov.w	r9, #103	; 0x67
 80091e4:	9b08      	ldr	r3, [sp, #32]
 80091e6:	4299      	cmp	r1, r3
 80091e8:	db05      	blt.n	80091f6 <_printf_float+0x19e>
 80091ea:	6823      	ldr	r3, [r4, #0]
 80091ec:	6121      	str	r1, [r4, #16]
 80091ee:	07d8      	lsls	r0, r3, #31
 80091f0:	d5ea      	bpl.n	80091c8 <_printf_float+0x170>
 80091f2:	1c4b      	adds	r3, r1, #1
 80091f4:	e7e7      	b.n	80091c6 <_printf_float+0x16e>
 80091f6:	2900      	cmp	r1, #0
 80091f8:	bfd4      	ite	le
 80091fa:	f1c1 0202 	rsble	r2, r1, #2
 80091fe:	2201      	movgt	r2, #1
 8009200:	4413      	add	r3, r2
 8009202:	e7e0      	b.n	80091c6 <_printf_float+0x16e>
 8009204:	6823      	ldr	r3, [r4, #0]
 8009206:	055a      	lsls	r2, r3, #21
 8009208:	d407      	bmi.n	800921a <_printf_float+0x1c2>
 800920a:	6923      	ldr	r3, [r4, #16]
 800920c:	4642      	mov	r2, r8
 800920e:	4631      	mov	r1, r6
 8009210:	4628      	mov	r0, r5
 8009212:	47b8      	blx	r7
 8009214:	3001      	adds	r0, #1
 8009216:	d12a      	bne.n	800926e <_printf_float+0x216>
 8009218:	e76a      	b.n	80090f0 <_printf_float+0x98>
 800921a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800921e:	f240 80e0 	bls.w	80093e2 <_printf_float+0x38a>
 8009222:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009226:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800922a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800922e:	d133      	bne.n	8009298 <_printf_float+0x240>
 8009230:	4a37      	ldr	r2, [pc, #220]	; (8009310 <_printf_float+0x2b8>)
 8009232:	2301      	movs	r3, #1
 8009234:	4631      	mov	r1, r6
 8009236:	4628      	mov	r0, r5
 8009238:	47b8      	blx	r7
 800923a:	3001      	adds	r0, #1
 800923c:	f43f af58 	beq.w	80090f0 <_printf_float+0x98>
 8009240:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009244:	429a      	cmp	r2, r3
 8009246:	db02      	blt.n	800924e <_printf_float+0x1f6>
 8009248:	6823      	ldr	r3, [r4, #0]
 800924a:	07d8      	lsls	r0, r3, #31
 800924c:	d50f      	bpl.n	800926e <_printf_float+0x216>
 800924e:	4653      	mov	r3, sl
 8009250:	465a      	mov	r2, fp
 8009252:	4631      	mov	r1, r6
 8009254:	4628      	mov	r0, r5
 8009256:	47b8      	blx	r7
 8009258:	3001      	adds	r0, #1
 800925a:	f43f af49 	beq.w	80090f0 <_printf_float+0x98>
 800925e:	f04f 0800 	mov.w	r8, #0
 8009262:	f104 091a 	add.w	r9, r4, #26
 8009266:	9b08      	ldr	r3, [sp, #32]
 8009268:	3b01      	subs	r3, #1
 800926a:	4543      	cmp	r3, r8
 800926c:	dc09      	bgt.n	8009282 <_printf_float+0x22a>
 800926e:	6823      	ldr	r3, [r4, #0]
 8009270:	079b      	lsls	r3, r3, #30
 8009272:	f100 8106 	bmi.w	8009482 <_printf_float+0x42a>
 8009276:	68e0      	ldr	r0, [r4, #12]
 8009278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800927a:	4298      	cmp	r0, r3
 800927c:	bfb8      	it	lt
 800927e:	4618      	movlt	r0, r3
 8009280:	e738      	b.n	80090f4 <_printf_float+0x9c>
 8009282:	2301      	movs	r3, #1
 8009284:	464a      	mov	r2, r9
 8009286:	4631      	mov	r1, r6
 8009288:	4628      	mov	r0, r5
 800928a:	47b8      	blx	r7
 800928c:	3001      	adds	r0, #1
 800928e:	f43f af2f 	beq.w	80090f0 <_printf_float+0x98>
 8009292:	f108 0801 	add.w	r8, r8, #1
 8009296:	e7e6      	b.n	8009266 <_printf_float+0x20e>
 8009298:	9b07      	ldr	r3, [sp, #28]
 800929a:	2b00      	cmp	r3, #0
 800929c:	dc3a      	bgt.n	8009314 <_printf_float+0x2bc>
 800929e:	4a1c      	ldr	r2, [pc, #112]	; (8009310 <_printf_float+0x2b8>)
 80092a0:	2301      	movs	r3, #1
 80092a2:	4631      	mov	r1, r6
 80092a4:	4628      	mov	r0, r5
 80092a6:	47b8      	blx	r7
 80092a8:	3001      	adds	r0, #1
 80092aa:	f43f af21 	beq.w	80090f0 <_printf_float+0x98>
 80092ae:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80092b2:	4313      	orrs	r3, r2
 80092b4:	d102      	bne.n	80092bc <_printf_float+0x264>
 80092b6:	6823      	ldr	r3, [r4, #0]
 80092b8:	07d9      	lsls	r1, r3, #31
 80092ba:	d5d8      	bpl.n	800926e <_printf_float+0x216>
 80092bc:	4653      	mov	r3, sl
 80092be:	465a      	mov	r2, fp
 80092c0:	4631      	mov	r1, r6
 80092c2:	4628      	mov	r0, r5
 80092c4:	47b8      	blx	r7
 80092c6:	3001      	adds	r0, #1
 80092c8:	f43f af12 	beq.w	80090f0 <_printf_float+0x98>
 80092cc:	f04f 0900 	mov.w	r9, #0
 80092d0:	f104 0a1a 	add.w	sl, r4, #26
 80092d4:	9b07      	ldr	r3, [sp, #28]
 80092d6:	425b      	negs	r3, r3
 80092d8:	454b      	cmp	r3, r9
 80092da:	dc01      	bgt.n	80092e0 <_printf_float+0x288>
 80092dc:	9b08      	ldr	r3, [sp, #32]
 80092de:	e795      	b.n	800920c <_printf_float+0x1b4>
 80092e0:	2301      	movs	r3, #1
 80092e2:	4652      	mov	r2, sl
 80092e4:	4631      	mov	r1, r6
 80092e6:	4628      	mov	r0, r5
 80092e8:	47b8      	blx	r7
 80092ea:	3001      	adds	r0, #1
 80092ec:	f43f af00 	beq.w	80090f0 <_printf_float+0x98>
 80092f0:	f109 0901 	add.w	r9, r9, #1
 80092f4:	e7ee      	b.n	80092d4 <_printf_float+0x27c>
 80092f6:	bf00      	nop
 80092f8:	ffffffff 	.word	0xffffffff
 80092fc:	7fefffff 	.word	0x7fefffff
 8009300:	0800c884 	.word	0x0800c884
 8009304:	0800c888 	.word	0x0800c888
 8009308:	0800c88c 	.word	0x0800c88c
 800930c:	0800c890 	.word	0x0800c890
 8009310:	0800c894 	.word	0x0800c894
 8009314:	9a08      	ldr	r2, [sp, #32]
 8009316:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009318:	429a      	cmp	r2, r3
 800931a:	bfa8      	it	ge
 800931c:	461a      	movge	r2, r3
 800931e:	2a00      	cmp	r2, #0
 8009320:	4691      	mov	r9, r2
 8009322:	dc38      	bgt.n	8009396 <_printf_float+0x33e>
 8009324:	2300      	movs	r3, #0
 8009326:	9305      	str	r3, [sp, #20]
 8009328:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800932c:	f104 021a 	add.w	r2, r4, #26
 8009330:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009332:	9905      	ldr	r1, [sp, #20]
 8009334:	9304      	str	r3, [sp, #16]
 8009336:	eba3 0309 	sub.w	r3, r3, r9
 800933a:	428b      	cmp	r3, r1
 800933c:	dc33      	bgt.n	80093a6 <_printf_float+0x34e>
 800933e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009342:	429a      	cmp	r2, r3
 8009344:	db3c      	blt.n	80093c0 <_printf_float+0x368>
 8009346:	6823      	ldr	r3, [r4, #0]
 8009348:	07da      	lsls	r2, r3, #31
 800934a:	d439      	bmi.n	80093c0 <_printf_float+0x368>
 800934c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8009350:	eba2 0903 	sub.w	r9, r2, r3
 8009354:	9b04      	ldr	r3, [sp, #16]
 8009356:	1ad2      	subs	r2, r2, r3
 8009358:	4591      	cmp	r9, r2
 800935a:	bfa8      	it	ge
 800935c:	4691      	movge	r9, r2
 800935e:	f1b9 0f00 	cmp.w	r9, #0
 8009362:	dc35      	bgt.n	80093d0 <_printf_float+0x378>
 8009364:	f04f 0800 	mov.w	r8, #0
 8009368:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800936c:	f104 0a1a 	add.w	sl, r4, #26
 8009370:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009374:	1a9b      	subs	r3, r3, r2
 8009376:	eba3 0309 	sub.w	r3, r3, r9
 800937a:	4543      	cmp	r3, r8
 800937c:	f77f af77 	ble.w	800926e <_printf_float+0x216>
 8009380:	2301      	movs	r3, #1
 8009382:	4652      	mov	r2, sl
 8009384:	4631      	mov	r1, r6
 8009386:	4628      	mov	r0, r5
 8009388:	47b8      	blx	r7
 800938a:	3001      	adds	r0, #1
 800938c:	f43f aeb0 	beq.w	80090f0 <_printf_float+0x98>
 8009390:	f108 0801 	add.w	r8, r8, #1
 8009394:	e7ec      	b.n	8009370 <_printf_float+0x318>
 8009396:	4613      	mov	r3, r2
 8009398:	4631      	mov	r1, r6
 800939a:	4642      	mov	r2, r8
 800939c:	4628      	mov	r0, r5
 800939e:	47b8      	blx	r7
 80093a0:	3001      	adds	r0, #1
 80093a2:	d1bf      	bne.n	8009324 <_printf_float+0x2cc>
 80093a4:	e6a4      	b.n	80090f0 <_printf_float+0x98>
 80093a6:	2301      	movs	r3, #1
 80093a8:	4631      	mov	r1, r6
 80093aa:	4628      	mov	r0, r5
 80093ac:	9204      	str	r2, [sp, #16]
 80093ae:	47b8      	blx	r7
 80093b0:	3001      	adds	r0, #1
 80093b2:	f43f ae9d 	beq.w	80090f0 <_printf_float+0x98>
 80093b6:	9b05      	ldr	r3, [sp, #20]
 80093b8:	9a04      	ldr	r2, [sp, #16]
 80093ba:	3301      	adds	r3, #1
 80093bc:	9305      	str	r3, [sp, #20]
 80093be:	e7b7      	b.n	8009330 <_printf_float+0x2d8>
 80093c0:	4653      	mov	r3, sl
 80093c2:	465a      	mov	r2, fp
 80093c4:	4631      	mov	r1, r6
 80093c6:	4628      	mov	r0, r5
 80093c8:	47b8      	blx	r7
 80093ca:	3001      	adds	r0, #1
 80093cc:	d1be      	bne.n	800934c <_printf_float+0x2f4>
 80093ce:	e68f      	b.n	80090f0 <_printf_float+0x98>
 80093d0:	9a04      	ldr	r2, [sp, #16]
 80093d2:	464b      	mov	r3, r9
 80093d4:	4442      	add	r2, r8
 80093d6:	4631      	mov	r1, r6
 80093d8:	4628      	mov	r0, r5
 80093da:	47b8      	blx	r7
 80093dc:	3001      	adds	r0, #1
 80093de:	d1c1      	bne.n	8009364 <_printf_float+0x30c>
 80093e0:	e686      	b.n	80090f0 <_printf_float+0x98>
 80093e2:	9a08      	ldr	r2, [sp, #32]
 80093e4:	2a01      	cmp	r2, #1
 80093e6:	dc01      	bgt.n	80093ec <_printf_float+0x394>
 80093e8:	07db      	lsls	r3, r3, #31
 80093ea:	d537      	bpl.n	800945c <_printf_float+0x404>
 80093ec:	2301      	movs	r3, #1
 80093ee:	4642      	mov	r2, r8
 80093f0:	4631      	mov	r1, r6
 80093f2:	4628      	mov	r0, r5
 80093f4:	47b8      	blx	r7
 80093f6:	3001      	adds	r0, #1
 80093f8:	f43f ae7a 	beq.w	80090f0 <_printf_float+0x98>
 80093fc:	4653      	mov	r3, sl
 80093fe:	465a      	mov	r2, fp
 8009400:	4631      	mov	r1, r6
 8009402:	4628      	mov	r0, r5
 8009404:	47b8      	blx	r7
 8009406:	3001      	adds	r0, #1
 8009408:	f43f ae72 	beq.w	80090f0 <_printf_float+0x98>
 800940c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009410:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009418:	9b08      	ldr	r3, [sp, #32]
 800941a:	d01a      	beq.n	8009452 <_printf_float+0x3fa>
 800941c:	3b01      	subs	r3, #1
 800941e:	f108 0201 	add.w	r2, r8, #1
 8009422:	4631      	mov	r1, r6
 8009424:	4628      	mov	r0, r5
 8009426:	47b8      	blx	r7
 8009428:	3001      	adds	r0, #1
 800942a:	d10e      	bne.n	800944a <_printf_float+0x3f2>
 800942c:	e660      	b.n	80090f0 <_printf_float+0x98>
 800942e:	2301      	movs	r3, #1
 8009430:	464a      	mov	r2, r9
 8009432:	4631      	mov	r1, r6
 8009434:	4628      	mov	r0, r5
 8009436:	47b8      	blx	r7
 8009438:	3001      	adds	r0, #1
 800943a:	f43f ae59 	beq.w	80090f0 <_printf_float+0x98>
 800943e:	f108 0801 	add.w	r8, r8, #1
 8009442:	9b08      	ldr	r3, [sp, #32]
 8009444:	3b01      	subs	r3, #1
 8009446:	4543      	cmp	r3, r8
 8009448:	dcf1      	bgt.n	800942e <_printf_float+0x3d6>
 800944a:	9b04      	ldr	r3, [sp, #16]
 800944c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009450:	e6dd      	b.n	800920e <_printf_float+0x1b6>
 8009452:	f04f 0800 	mov.w	r8, #0
 8009456:	f104 091a 	add.w	r9, r4, #26
 800945a:	e7f2      	b.n	8009442 <_printf_float+0x3ea>
 800945c:	2301      	movs	r3, #1
 800945e:	4642      	mov	r2, r8
 8009460:	e7df      	b.n	8009422 <_printf_float+0x3ca>
 8009462:	2301      	movs	r3, #1
 8009464:	464a      	mov	r2, r9
 8009466:	4631      	mov	r1, r6
 8009468:	4628      	mov	r0, r5
 800946a:	47b8      	blx	r7
 800946c:	3001      	adds	r0, #1
 800946e:	f43f ae3f 	beq.w	80090f0 <_printf_float+0x98>
 8009472:	f108 0801 	add.w	r8, r8, #1
 8009476:	68e3      	ldr	r3, [r4, #12]
 8009478:	9909      	ldr	r1, [sp, #36]	; 0x24
 800947a:	1a5b      	subs	r3, r3, r1
 800947c:	4543      	cmp	r3, r8
 800947e:	dcf0      	bgt.n	8009462 <_printf_float+0x40a>
 8009480:	e6f9      	b.n	8009276 <_printf_float+0x21e>
 8009482:	f04f 0800 	mov.w	r8, #0
 8009486:	f104 0919 	add.w	r9, r4, #25
 800948a:	e7f4      	b.n	8009476 <_printf_float+0x41e>

0800948c <_printf_common>:
 800948c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009490:	4616      	mov	r6, r2
 8009492:	4699      	mov	r9, r3
 8009494:	688a      	ldr	r2, [r1, #8]
 8009496:	690b      	ldr	r3, [r1, #16]
 8009498:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800949c:	4293      	cmp	r3, r2
 800949e:	bfb8      	it	lt
 80094a0:	4613      	movlt	r3, r2
 80094a2:	6033      	str	r3, [r6, #0]
 80094a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094a8:	4607      	mov	r7, r0
 80094aa:	460c      	mov	r4, r1
 80094ac:	b10a      	cbz	r2, 80094b2 <_printf_common+0x26>
 80094ae:	3301      	adds	r3, #1
 80094b0:	6033      	str	r3, [r6, #0]
 80094b2:	6823      	ldr	r3, [r4, #0]
 80094b4:	0699      	lsls	r1, r3, #26
 80094b6:	bf42      	ittt	mi
 80094b8:	6833      	ldrmi	r3, [r6, #0]
 80094ba:	3302      	addmi	r3, #2
 80094bc:	6033      	strmi	r3, [r6, #0]
 80094be:	6825      	ldr	r5, [r4, #0]
 80094c0:	f015 0506 	ands.w	r5, r5, #6
 80094c4:	d106      	bne.n	80094d4 <_printf_common+0x48>
 80094c6:	f104 0a19 	add.w	sl, r4, #25
 80094ca:	68e3      	ldr	r3, [r4, #12]
 80094cc:	6832      	ldr	r2, [r6, #0]
 80094ce:	1a9b      	subs	r3, r3, r2
 80094d0:	42ab      	cmp	r3, r5
 80094d2:	dc26      	bgt.n	8009522 <_printf_common+0x96>
 80094d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80094d8:	1e13      	subs	r3, r2, #0
 80094da:	6822      	ldr	r2, [r4, #0]
 80094dc:	bf18      	it	ne
 80094de:	2301      	movne	r3, #1
 80094e0:	0692      	lsls	r2, r2, #26
 80094e2:	d42b      	bmi.n	800953c <_printf_common+0xb0>
 80094e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094e8:	4649      	mov	r1, r9
 80094ea:	4638      	mov	r0, r7
 80094ec:	47c0      	blx	r8
 80094ee:	3001      	adds	r0, #1
 80094f0:	d01e      	beq.n	8009530 <_printf_common+0xa4>
 80094f2:	6823      	ldr	r3, [r4, #0]
 80094f4:	6922      	ldr	r2, [r4, #16]
 80094f6:	f003 0306 	and.w	r3, r3, #6
 80094fa:	2b04      	cmp	r3, #4
 80094fc:	bf02      	ittt	eq
 80094fe:	68e5      	ldreq	r5, [r4, #12]
 8009500:	6833      	ldreq	r3, [r6, #0]
 8009502:	1aed      	subeq	r5, r5, r3
 8009504:	68a3      	ldr	r3, [r4, #8]
 8009506:	bf0c      	ite	eq
 8009508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800950c:	2500      	movne	r5, #0
 800950e:	4293      	cmp	r3, r2
 8009510:	bfc4      	itt	gt
 8009512:	1a9b      	subgt	r3, r3, r2
 8009514:	18ed      	addgt	r5, r5, r3
 8009516:	2600      	movs	r6, #0
 8009518:	341a      	adds	r4, #26
 800951a:	42b5      	cmp	r5, r6
 800951c:	d11a      	bne.n	8009554 <_printf_common+0xc8>
 800951e:	2000      	movs	r0, #0
 8009520:	e008      	b.n	8009534 <_printf_common+0xa8>
 8009522:	2301      	movs	r3, #1
 8009524:	4652      	mov	r2, sl
 8009526:	4649      	mov	r1, r9
 8009528:	4638      	mov	r0, r7
 800952a:	47c0      	blx	r8
 800952c:	3001      	adds	r0, #1
 800952e:	d103      	bne.n	8009538 <_printf_common+0xac>
 8009530:	f04f 30ff 	mov.w	r0, #4294967295
 8009534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009538:	3501      	adds	r5, #1
 800953a:	e7c6      	b.n	80094ca <_printf_common+0x3e>
 800953c:	18e1      	adds	r1, r4, r3
 800953e:	1c5a      	adds	r2, r3, #1
 8009540:	2030      	movs	r0, #48	; 0x30
 8009542:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009546:	4422      	add	r2, r4
 8009548:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800954c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009550:	3302      	adds	r3, #2
 8009552:	e7c7      	b.n	80094e4 <_printf_common+0x58>
 8009554:	2301      	movs	r3, #1
 8009556:	4622      	mov	r2, r4
 8009558:	4649      	mov	r1, r9
 800955a:	4638      	mov	r0, r7
 800955c:	47c0      	blx	r8
 800955e:	3001      	adds	r0, #1
 8009560:	d0e6      	beq.n	8009530 <_printf_common+0xa4>
 8009562:	3601      	adds	r6, #1
 8009564:	e7d9      	b.n	800951a <_printf_common+0x8e>
	...

08009568 <_printf_i>:
 8009568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800956c:	7e0f      	ldrb	r7, [r1, #24]
 800956e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009570:	2f78      	cmp	r7, #120	; 0x78
 8009572:	4691      	mov	r9, r2
 8009574:	4680      	mov	r8, r0
 8009576:	460c      	mov	r4, r1
 8009578:	469a      	mov	sl, r3
 800957a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800957e:	d807      	bhi.n	8009590 <_printf_i+0x28>
 8009580:	2f62      	cmp	r7, #98	; 0x62
 8009582:	d80a      	bhi.n	800959a <_printf_i+0x32>
 8009584:	2f00      	cmp	r7, #0
 8009586:	f000 80d4 	beq.w	8009732 <_printf_i+0x1ca>
 800958a:	2f58      	cmp	r7, #88	; 0x58
 800958c:	f000 80c0 	beq.w	8009710 <_printf_i+0x1a8>
 8009590:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009594:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009598:	e03a      	b.n	8009610 <_printf_i+0xa8>
 800959a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800959e:	2b15      	cmp	r3, #21
 80095a0:	d8f6      	bhi.n	8009590 <_printf_i+0x28>
 80095a2:	a101      	add	r1, pc, #4	; (adr r1, 80095a8 <_printf_i+0x40>)
 80095a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095a8:	08009601 	.word	0x08009601
 80095ac:	08009615 	.word	0x08009615
 80095b0:	08009591 	.word	0x08009591
 80095b4:	08009591 	.word	0x08009591
 80095b8:	08009591 	.word	0x08009591
 80095bc:	08009591 	.word	0x08009591
 80095c0:	08009615 	.word	0x08009615
 80095c4:	08009591 	.word	0x08009591
 80095c8:	08009591 	.word	0x08009591
 80095cc:	08009591 	.word	0x08009591
 80095d0:	08009591 	.word	0x08009591
 80095d4:	08009719 	.word	0x08009719
 80095d8:	08009641 	.word	0x08009641
 80095dc:	080096d3 	.word	0x080096d3
 80095e0:	08009591 	.word	0x08009591
 80095e4:	08009591 	.word	0x08009591
 80095e8:	0800973b 	.word	0x0800973b
 80095ec:	08009591 	.word	0x08009591
 80095f0:	08009641 	.word	0x08009641
 80095f4:	08009591 	.word	0x08009591
 80095f8:	08009591 	.word	0x08009591
 80095fc:	080096db 	.word	0x080096db
 8009600:	682b      	ldr	r3, [r5, #0]
 8009602:	1d1a      	adds	r2, r3, #4
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	602a      	str	r2, [r5, #0]
 8009608:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800960c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009610:	2301      	movs	r3, #1
 8009612:	e09f      	b.n	8009754 <_printf_i+0x1ec>
 8009614:	6820      	ldr	r0, [r4, #0]
 8009616:	682b      	ldr	r3, [r5, #0]
 8009618:	0607      	lsls	r7, r0, #24
 800961a:	f103 0104 	add.w	r1, r3, #4
 800961e:	6029      	str	r1, [r5, #0]
 8009620:	d501      	bpl.n	8009626 <_printf_i+0xbe>
 8009622:	681e      	ldr	r6, [r3, #0]
 8009624:	e003      	b.n	800962e <_printf_i+0xc6>
 8009626:	0646      	lsls	r6, r0, #25
 8009628:	d5fb      	bpl.n	8009622 <_printf_i+0xba>
 800962a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800962e:	2e00      	cmp	r6, #0
 8009630:	da03      	bge.n	800963a <_printf_i+0xd2>
 8009632:	232d      	movs	r3, #45	; 0x2d
 8009634:	4276      	negs	r6, r6
 8009636:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800963a:	485a      	ldr	r0, [pc, #360]	; (80097a4 <_printf_i+0x23c>)
 800963c:	230a      	movs	r3, #10
 800963e:	e012      	b.n	8009666 <_printf_i+0xfe>
 8009640:	682b      	ldr	r3, [r5, #0]
 8009642:	6820      	ldr	r0, [r4, #0]
 8009644:	1d19      	adds	r1, r3, #4
 8009646:	6029      	str	r1, [r5, #0]
 8009648:	0605      	lsls	r5, r0, #24
 800964a:	d501      	bpl.n	8009650 <_printf_i+0xe8>
 800964c:	681e      	ldr	r6, [r3, #0]
 800964e:	e002      	b.n	8009656 <_printf_i+0xee>
 8009650:	0641      	lsls	r1, r0, #25
 8009652:	d5fb      	bpl.n	800964c <_printf_i+0xe4>
 8009654:	881e      	ldrh	r6, [r3, #0]
 8009656:	4853      	ldr	r0, [pc, #332]	; (80097a4 <_printf_i+0x23c>)
 8009658:	2f6f      	cmp	r7, #111	; 0x6f
 800965a:	bf0c      	ite	eq
 800965c:	2308      	moveq	r3, #8
 800965e:	230a      	movne	r3, #10
 8009660:	2100      	movs	r1, #0
 8009662:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009666:	6865      	ldr	r5, [r4, #4]
 8009668:	60a5      	str	r5, [r4, #8]
 800966a:	2d00      	cmp	r5, #0
 800966c:	bfa2      	ittt	ge
 800966e:	6821      	ldrge	r1, [r4, #0]
 8009670:	f021 0104 	bicge.w	r1, r1, #4
 8009674:	6021      	strge	r1, [r4, #0]
 8009676:	b90e      	cbnz	r6, 800967c <_printf_i+0x114>
 8009678:	2d00      	cmp	r5, #0
 800967a:	d04b      	beq.n	8009714 <_printf_i+0x1ac>
 800967c:	4615      	mov	r5, r2
 800967e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009682:	fb03 6711 	mls	r7, r3, r1, r6
 8009686:	5dc7      	ldrb	r7, [r0, r7]
 8009688:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800968c:	4637      	mov	r7, r6
 800968e:	42bb      	cmp	r3, r7
 8009690:	460e      	mov	r6, r1
 8009692:	d9f4      	bls.n	800967e <_printf_i+0x116>
 8009694:	2b08      	cmp	r3, #8
 8009696:	d10b      	bne.n	80096b0 <_printf_i+0x148>
 8009698:	6823      	ldr	r3, [r4, #0]
 800969a:	07de      	lsls	r6, r3, #31
 800969c:	d508      	bpl.n	80096b0 <_printf_i+0x148>
 800969e:	6923      	ldr	r3, [r4, #16]
 80096a0:	6861      	ldr	r1, [r4, #4]
 80096a2:	4299      	cmp	r1, r3
 80096a4:	bfde      	ittt	le
 80096a6:	2330      	movle	r3, #48	; 0x30
 80096a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80096ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80096b0:	1b52      	subs	r2, r2, r5
 80096b2:	6122      	str	r2, [r4, #16]
 80096b4:	f8cd a000 	str.w	sl, [sp]
 80096b8:	464b      	mov	r3, r9
 80096ba:	aa03      	add	r2, sp, #12
 80096bc:	4621      	mov	r1, r4
 80096be:	4640      	mov	r0, r8
 80096c0:	f7ff fee4 	bl	800948c <_printf_common>
 80096c4:	3001      	adds	r0, #1
 80096c6:	d14a      	bne.n	800975e <_printf_i+0x1f6>
 80096c8:	f04f 30ff 	mov.w	r0, #4294967295
 80096cc:	b004      	add	sp, #16
 80096ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096d2:	6823      	ldr	r3, [r4, #0]
 80096d4:	f043 0320 	orr.w	r3, r3, #32
 80096d8:	6023      	str	r3, [r4, #0]
 80096da:	4833      	ldr	r0, [pc, #204]	; (80097a8 <_printf_i+0x240>)
 80096dc:	2778      	movs	r7, #120	; 0x78
 80096de:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80096e2:	6823      	ldr	r3, [r4, #0]
 80096e4:	6829      	ldr	r1, [r5, #0]
 80096e6:	061f      	lsls	r7, r3, #24
 80096e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80096ec:	d402      	bmi.n	80096f4 <_printf_i+0x18c>
 80096ee:	065f      	lsls	r7, r3, #25
 80096f0:	bf48      	it	mi
 80096f2:	b2b6      	uxthmi	r6, r6
 80096f4:	07df      	lsls	r7, r3, #31
 80096f6:	bf48      	it	mi
 80096f8:	f043 0320 	orrmi.w	r3, r3, #32
 80096fc:	6029      	str	r1, [r5, #0]
 80096fe:	bf48      	it	mi
 8009700:	6023      	strmi	r3, [r4, #0]
 8009702:	b91e      	cbnz	r6, 800970c <_printf_i+0x1a4>
 8009704:	6823      	ldr	r3, [r4, #0]
 8009706:	f023 0320 	bic.w	r3, r3, #32
 800970a:	6023      	str	r3, [r4, #0]
 800970c:	2310      	movs	r3, #16
 800970e:	e7a7      	b.n	8009660 <_printf_i+0xf8>
 8009710:	4824      	ldr	r0, [pc, #144]	; (80097a4 <_printf_i+0x23c>)
 8009712:	e7e4      	b.n	80096de <_printf_i+0x176>
 8009714:	4615      	mov	r5, r2
 8009716:	e7bd      	b.n	8009694 <_printf_i+0x12c>
 8009718:	682b      	ldr	r3, [r5, #0]
 800971a:	6826      	ldr	r6, [r4, #0]
 800971c:	6961      	ldr	r1, [r4, #20]
 800971e:	1d18      	adds	r0, r3, #4
 8009720:	6028      	str	r0, [r5, #0]
 8009722:	0635      	lsls	r5, r6, #24
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	d501      	bpl.n	800972c <_printf_i+0x1c4>
 8009728:	6019      	str	r1, [r3, #0]
 800972a:	e002      	b.n	8009732 <_printf_i+0x1ca>
 800972c:	0670      	lsls	r0, r6, #25
 800972e:	d5fb      	bpl.n	8009728 <_printf_i+0x1c0>
 8009730:	8019      	strh	r1, [r3, #0]
 8009732:	2300      	movs	r3, #0
 8009734:	6123      	str	r3, [r4, #16]
 8009736:	4615      	mov	r5, r2
 8009738:	e7bc      	b.n	80096b4 <_printf_i+0x14c>
 800973a:	682b      	ldr	r3, [r5, #0]
 800973c:	1d1a      	adds	r2, r3, #4
 800973e:	602a      	str	r2, [r5, #0]
 8009740:	681d      	ldr	r5, [r3, #0]
 8009742:	6862      	ldr	r2, [r4, #4]
 8009744:	2100      	movs	r1, #0
 8009746:	4628      	mov	r0, r5
 8009748:	f7f6 fdd2 	bl	80002f0 <memchr>
 800974c:	b108      	cbz	r0, 8009752 <_printf_i+0x1ea>
 800974e:	1b40      	subs	r0, r0, r5
 8009750:	6060      	str	r0, [r4, #4]
 8009752:	6863      	ldr	r3, [r4, #4]
 8009754:	6123      	str	r3, [r4, #16]
 8009756:	2300      	movs	r3, #0
 8009758:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800975c:	e7aa      	b.n	80096b4 <_printf_i+0x14c>
 800975e:	6923      	ldr	r3, [r4, #16]
 8009760:	462a      	mov	r2, r5
 8009762:	4649      	mov	r1, r9
 8009764:	4640      	mov	r0, r8
 8009766:	47d0      	blx	sl
 8009768:	3001      	adds	r0, #1
 800976a:	d0ad      	beq.n	80096c8 <_printf_i+0x160>
 800976c:	6823      	ldr	r3, [r4, #0]
 800976e:	079b      	lsls	r3, r3, #30
 8009770:	d413      	bmi.n	800979a <_printf_i+0x232>
 8009772:	68e0      	ldr	r0, [r4, #12]
 8009774:	9b03      	ldr	r3, [sp, #12]
 8009776:	4298      	cmp	r0, r3
 8009778:	bfb8      	it	lt
 800977a:	4618      	movlt	r0, r3
 800977c:	e7a6      	b.n	80096cc <_printf_i+0x164>
 800977e:	2301      	movs	r3, #1
 8009780:	4632      	mov	r2, r6
 8009782:	4649      	mov	r1, r9
 8009784:	4640      	mov	r0, r8
 8009786:	47d0      	blx	sl
 8009788:	3001      	adds	r0, #1
 800978a:	d09d      	beq.n	80096c8 <_printf_i+0x160>
 800978c:	3501      	adds	r5, #1
 800978e:	68e3      	ldr	r3, [r4, #12]
 8009790:	9903      	ldr	r1, [sp, #12]
 8009792:	1a5b      	subs	r3, r3, r1
 8009794:	42ab      	cmp	r3, r5
 8009796:	dcf2      	bgt.n	800977e <_printf_i+0x216>
 8009798:	e7eb      	b.n	8009772 <_printf_i+0x20a>
 800979a:	2500      	movs	r5, #0
 800979c:	f104 0619 	add.w	r6, r4, #25
 80097a0:	e7f5      	b.n	800978e <_printf_i+0x226>
 80097a2:	bf00      	nop
 80097a4:	0800c896 	.word	0x0800c896
 80097a8:	0800c8a7 	.word	0x0800c8a7

080097ac <std>:
 80097ac:	2300      	movs	r3, #0
 80097ae:	b510      	push	{r4, lr}
 80097b0:	4604      	mov	r4, r0
 80097b2:	e9c0 3300 	strd	r3, r3, [r0]
 80097b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097ba:	6083      	str	r3, [r0, #8]
 80097bc:	8181      	strh	r1, [r0, #12]
 80097be:	6643      	str	r3, [r0, #100]	; 0x64
 80097c0:	81c2      	strh	r2, [r0, #14]
 80097c2:	6183      	str	r3, [r0, #24]
 80097c4:	4619      	mov	r1, r3
 80097c6:	2208      	movs	r2, #8
 80097c8:	305c      	adds	r0, #92	; 0x5c
 80097ca:	f000 f92e 	bl	8009a2a <memset>
 80097ce:	4b0d      	ldr	r3, [pc, #52]	; (8009804 <std+0x58>)
 80097d0:	6263      	str	r3, [r4, #36]	; 0x24
 80097d2:	4b0d      	ldr	r3, [pc, #52]	; (8009808 <std+0x5c>)
 80097d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80097d6:	4b0d      	ldr	r3, [pc, #52]	; (800980c <std+0x60>)
 80097d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80097da:	4b0d      	ldr	r3, [pc, #52]	; (8009810 <std+0x64>)
 80097dc:	6323      	str	r3, [r4, #48]	; 0x30
 80097de:	4b0d      	ldr	r3, [pc, #52]	; (8009814 <std+0x68>)
 80097e0:	6224      	str	r4, [r4, #32]
 80097e2:	429c      	cmp	r4, r3
 80097e4:	d006      	beq.n	80097f4 <std+0x48>
 80097e6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80097ea:	4294      	cmp	r4, r2
 80097ec:	d002      	beq.n	80097f4 <std+0x48>
 80097ee:	33d0      	adds	r3, #208	; 0xd0
 80097f0:	429c      	cmp	r4, r3
 80097f2:	d105      	bne.n	8009800 <std+0x54>
 80097f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80097f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097fc:	f000 b992 	b.w	8009b24 <__retarget_lock_init_recursive>
 8009800:	bd10      	pop	{r4, pc}
 8009802:	bf00      	nop
 8009804:	08009971 	.word	0x08009971
 8009808:	08009993 	.word	0x08009993
 800980c:	080099cb 	.word	0x080099cb
 8009810:	080099ef 	.word	0x080099ef
 8009814:	24000774 	.word	0x24000774

08009818 <stdio_exit_handler>:
 8009818:	4a02      	ldr	r2, [pc, #8]	; (8009824 <stdio_exit_handler+0xc>)
 800981a:	4903      	ldr	r1, [pc, #12]	; (8009828 <stdio_exit_handler+0x10>)
 800981c:	4803      	ldr	r0, [pc, #12]	; (800982c <stdio_exit_handler+0x14>)
 800981e:	f000 b869 	b.w	80098f4 <_fwalk_sglue>
 8009822:	bf00      	nop
 8009824:	24000018 	.word	0x24000018
 8009828:	0800b3e5 	.word	0x0800b3e5
 800982c:	24000024 	.word	0x24000024

08009830 <cleanup_stdio>:
 8009830:	6841      	ldr	r1, [r0, #4]
 8009832:	4b0c      	ldr	r3, [pc, #48]	; (8009864 <cleanup_stdio+0x34>)
 8009834:	4299      	cmp	r1, r3
 8009836:	b510      	push	{r4, lr}
 8009838:	4604      	mov	r4, r0
 800983a:	d001      	beq.n	8009840 <cleanup_stdio+0x10>
 800983c:	f001 fdd2 	bl	800b3e4 <_fflush_r>
 8009840:	68a1      	ldr	r1, [r4, #8]
 8009842:	4b09      	ldr	r3, [pc, #36]	; (8009868 <cleanup_stdio+0x38>)
 8009844:	4299      	cmp	r1, r3
 8009846:	d002      	beq.n	800984e <cleanup_stdio+0x1e>
 8009848:	4620      	mov	r0, r4
 800984a:	f001 fdcb 	bl	800b3e4 <_fflush_r>
 800984e:	68e1      	ldr	r1, [r4, #12]
 8009850:	4b06      	ldr	r3, [pc, #24]	; (800986c <cleanup_stdio+0x3c>)
 8009852:	4299      	cmp	r1, r3
 8009854:	d004      	beq.n	8009860 <cleanup_stdio+0x30>
 8009856:	4620      	mov	r0, r4
 8009858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800985c:	f001 bdc2 	b.w	800b3e4 <_fflush_r>
 8009860:	bd10      	pop	{r4, pc}
 8009862:	bf00      	nop
 8009864:	24000774 	.word	0x24000774
 8009868:	240007dc 	.word	0x240007dc
 800986c:	24000844 	.word	0x24000844

08009870 <global_stdio_init.part.0>:
 8009870:	b510      	push	{r4, lr}
 8009872:	4b0b      	ldr	r3, [pc, #44]	; (80098a0 <global_stdio_init.part.0+0x30>)
 8009874:	4c0b      	ldr	r4, [pc, #44]	; (80098a4 <global_stdio_init.part.0+0x34>)
 8009876:	4a0c      	ldr	r2, [pc, #48]	; (80098a8 <global_stdio_init.part.0+0x38>)
 8009878:	601a      	str	r2, [r3, #0]
 800987a:	4620      	mov	r0, r4
 800987c:	2200      	movs	r2, #0
 800987e:	2104      	movs	r1, #4
 8009880:	f7ff ff94 	bl	80097ac <std>
 8009884:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009888:	2201      	movs	r2, #1
 800988a:	2109      	movs	r1, #9
 800988c:	f7ff ff8e 	bl	80097ac <std>
 8009890:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009894:	2202      	movs	r2, #2
 8009896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800989a:	2112      	movs	r1, #18
 800989c:	f7ff bf86 	b.w	80097ac <std>
 80098a0:	240008ac 	.word	0x240008ac
 80098a4:	24000774 	.word	0x24000774
 80098a8:	08009819 	.word	0x08009819

080098ac <__sfp_lock_acquire>:
 80098ac:	4801      	ldr	r0, [pc, #4]	; (80098b4 <__sfp_lock_acquire+0x8>)
 80098ae:	f000 b93a 	b.w	8009b26 <__retarget_lock_acquire_recursive>
 80098b2:	bf00      	nop
 80098b4:	240008b5 	.word	0x240008b5

080098b8 <__sfp_lock_release>:
 80098b8:	4801      	ldr	r0, [pc, #4]	; (80098c0 <__sfp_lock_release+0x8>)
 80098ba:	f000 b935 	b.w	8009b28 <__retarget_lock_release_recursive>
 80098be:	bf00      	nop
 80098c0:	240008b5 	.word	0x240008b5

080098c4 <__sinit>:
 80098c4:	b510      	push	{r4, lr}
 80098c6:	4604      	mov	r4, r0
 80098c8:	f7ff fff0 	bl	80098ac <__sfp_lock_acquire>
 80098cc:	6a23      	ldr	r3, [r4, #32]
 80098ce:	b11b      	cbz	r3, 80098d8 <__sinit+0x14>
 80098d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098d4:	f7ff bff0 	b.w	80098b8 <__sfp_lock_release>
 80098d8:	4b04      	ldr	r3, [pc, #16]	; (80098ec <__sinit+0x28>)
 80098da:	6223      	str	r3, [r4, #32]
 80098dc:	4b04      	ldr	r3, [pc, #16]	; (80098f0 <__sinit+0x2c>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d1f5      	bne.n	80098d0 <__sinit+0xc>
 80098e4:	f7ff ffc4 	bl	8009870 <global_stdio_init.part.0>
 80098e8:	e7f2      	b.n	80098d0 <__sinit+0xc>
 80098ea:	bf00      	nop
 80098ec:	08009831 	.word	0x08009831
 80098f0:	240008ac 	.word	0x240008ac

080098f4 <_fwalk_sglue>:
 80098f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098f8:	4607      	mov	r7, r0
 80098fa:	4688      	mov	r8, r1
 80098fc:	4614      	mov	r4, r2
 80098fe:	2600      	movs	r6, #0
 8009900:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009904:	f1b9 0901 	subs.w	r9, r9, #1
 8009908:	d505      	bpl.n	8009916 <_fwalk_sglue+0x22>
 800990a:	6824      	ldr	r4, [r4, #0]
 800990c:	2c00      	cmp	r4, #0
 800990e:	d1f7      	bne.n	8009900 <_fwalk_sglue+0xc>
 8009910:	4630      	mov	r0, r6
 8009912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009916:	89ab      	ldrh	r3, [r5, #12]
 8009918:	2b01      	cmp	r3, #1
 800991a:	d907      	bls.n	800992c <_fwalk_sglue+0x38>
 800991c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009920:	3301      	adds	r3, #1
 8009922:	d003      	beq.n	800992c <_fwalk_sglue+0x38>
 8009924:	4629      	mov	r1, r5
 8009926:	4638      	mov	r0, r7
 8009928:	47c0      	blx	r8
 800992a:	4306      	orrs	r6, r0
 800992c:	3568      	adds	r5, #104	; 0x68
 800992e:	e7e9      	b.n	8009904 <_fwalk_sglue+0x10>

08009930 <siprintf>:
 8009930:	b40e      	push	{r1, r2, r3}
 8009932:	b500      	push	{lr}
 8009934:	b09c      	sub	sp, #112	; 0x70
 8009936:	ab1d      	add	r3, sp, #116	; 0x74
 8009938:	9002      	str	r0, [sp, #8]
 800993a:	9006      	str	r0, [sp, #24]
 800993c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009940:	4809      	ldr	r0, [pc, #36]	; (8009968 <siprintf+0x38>)
 8009942:	9107      	str	r1, [sp, #28]
 8009944:	9104      	str	r1, [sp, #16]
 8009946:	4909      	ldr	r1, [pc, #36]	; (800996c <siprintf+0x3c>)
 8009948:	f853 2b04 	ldr.w	r2, [r3], #4
 800994c:	9105      	str	r1, [sp, #20]
 800994e:	6800      	ldr	r0, [r0, #0]
 8009950:	9301      	str	r3, [sp, #4]
 8009952:	a902      	add	r1, sp, #8
 8009954:	f001 fbc2 	bl	800b0dc <_svfiprintf_r>
 8009958:	9b02      	ldr	r3, [sp, #8]
 800995a:	2200      	movs	r2, #0
 800995c:	701a      	strb	r2, [r3, #0]
 800995e:	b01c      	add	sp, #112	; 0x70
 8009960:	f85d eb04 	ldr.w	lr, [sp], #4
 8009964:	b003      	add	sp, #12
 8009966:	4770      	bx	lr
 8009968:	24000070 	.word	0x24000070
 800996c:	ffff0208 	.word	0xffff0208

08009970 <__sread>:
 8009970:	b510      	push	{r4, lr}
 8009972:	460c      	mov	r4, r1
 8009974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009978:	f000 f886 	bl	8009a88 <_read_r>
 800997c:	2800      	cmp	r0, #0
 800997e:	bfab      	itete	ge
 8009980:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009982:	89a3      	ldrhlt	r3, [r4, #12]
 8009984:	181b      	addge	r3, r3, r0
 8009986:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800998a:	bfac      	ite	ge
 800998c:	6563      	strge	r3, [r4, #84]	; 0x54
 800998e:	81a3      	strhlt	r3, [r4, #12]
 8009990:	bd10      	pop	{r4, pc}

08009992 <__swrite>:
 8009992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009996:	461f      	mov	r7, r3
 8009998:	898b      	ldrh	r3, [r1, #12]
 800999a:	05db      	lsls	r3, r3, #23
 800999c:	4605      	mov	r5, r0
 800999e:	460c      	mov	r4, r1
 80099a0:	4616      	mov	r6, r2
 80099a2:	d505      	bpl.n	80099b0 <__swrite+0x1e>
 80099a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099a8:	2302      	movs	r3, #2
 80099aa:	2200      	movs	r2, #0
 80099ac:	f000 f85a 	bl	8009a64 <_lseek_r>
 80099b0:	89a3      	ldrh	r3, [r4, #12]
 80099b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099ba:	81a3      	strh	r3, [r4, #12]
 80099bc:	4632      	mov	r2, r6
 80099be:	463b      	mov	r3, r7
 80099c0:	4628      	mov	r0, r5
 80099c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099c6:	f000 b871 	b.w	8009aac <_write_r>

080099ca <__sseek>:
 80099ca:	b510      	push	{r4, lr}
 80099cc:	460c      	mov	r4, r1
 80099ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099d2:	f000 f847 	bl	8009a64 <_lseek_r>
 80099d6:	1c43      	adds	r3, r0, #1
 80099d8:	89a3      	ldrh	r3, [r4, #12]
 80099da:	bf15      	itete	ne
 80099dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80099de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80099e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80099e6:	81a3      	strheq	r3, [r4, #12]
 80099e8:	bf18      	it	ne
 80099ea:	81a3      	strhne	r3, [r4, #12]
 80099ec:	bd10      	pop	{r4, pc}

080099ee <__sclose>:
 80099ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099f2:	f000 b827 	b.w	8009a44 <_close_r>

080099f6 <memmove>:
 80099f6:	4288      	cmp	r0, r1
 80099f8:	b510      	push	{r4, lr}
 80099fa:	eb01 0402 	add.w	r4, r1, r2
 80099fe:	d902      	bls.n	8009a06 <memmove+0x10>
 8009a00:	4284      	cmp	r4, r0
 8009a02:	4623      	mov	r3, r4
 8009a04:	d807      	bhi.n	8009a16 <memmove+0x20>
 8009a06:	1e43      	subs	r3, r0, #1
 8009a08:	42a1      	cmp	r1, r4
 8009a0a:	d008      	beq.n	8009a1e <memmove+0x28>
 8009a0c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a10:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a14:	e7f8      	b.n	8009a08 <memmove+0x12>
 8009a16:	4402      	add	r2, r0
 8009a18:	4601      	mov	r1, r0
 8009a1a:	428a      	cmp	r2, r1
 8009a1c:	d100      	bne.n	8009a20 <memmove+0x2a>
 8009a1e:	bd10      	pop	{r4, pc}
 8009a20:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a24:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a28:	e7f7      	b.n	8009a1a <memmove+0x24>

08009a2a <memset>:
 8009a2a:	4402      	add	r2, r0
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d100      	bne.n	8009a34 <memset+0xa>
 8009a32:	4770      	bx	lr
 8009a34:	f803 1b01 	strb.w	r1, [r3], #1
 8009a38:	e7f9      	b.n	8009a2e <memset+0x4>
	...

08009a3c <_localeconv_r>:
 8009a3c:	4800      	ldr	r0, [pc, #0]	; (8009a40 <_localeconv_r+0x4>)
 8009a3e:	4770      	bx	lr
 8009a40:	24000164 	.word	0x24000164

08009a44 <_close_r>:
 8009a44:	b538      	push	{r3, r4, r5, lr}
 8009a46:	4d06      	ldr	r5, [pc, #24]	; (8009a60 <_close_r+0x1c>)
 8009a48:	2300      	movs	r3, #0
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	4608      	mov	r0, r1
 8009a4e:	602b      	str	r3, [r5, #0]
 8009a50:	f7f7 fb77 	bl	8001142 <_close>
 8009a54:	1c43      	adds	r3, r0, #1
 8009a56:	d102      	bne.n	8009a5e <_close_r+0x1a>
 8009a58:	682b      	ldr	r3, [r5, #0]
 8009a5a:	b103      	cbz	r3, 8009a5e <_close_r+0x1a>
 8009a5c:	6023      	str	r3, [r4, #0]
 8009a5e:	bd38      	pop	{r3, r4, r5, pc}
 8009a60:	240008b0 	.word	0x240008b0

08009a64 <_lseek_r>:
 8009a64:	b538      	push	{r3, r4, r5, lr}
 8009a66:	4d07      	ldr	r5, [pc, #28]	; (8009a84 <_lseek_r+0x20>)
 8009a68:	4604      	mov	r4, r0
 8009a6a:	4608      	mov	r0, r1
 8009a6c:	4611      	mov	r1, r2
 8009a6e:	2200      	movs	r2, #0
 8009a70:	602a      	str	r2, [r5, #0]
 8009a72:	461a      	mov	r2, r3
 8009a74:	f7f7 fb8c 	bl	8001190 <_lseek>
 8009a78:	1c43      	adds	r3, r0, #1
 8009a7a:	d102      	bne.n	8009a82 <_lseek_r+0x1e>
 8009a7c:	682b      	ldr	r3, [r5, #0]
 8009a7e:	b103      	cbz	r3, 8009a82 <_lseek_r+0x1e>
 8009a80:	6023      	str	r3, [r4, #0]
 8009a82:	bd38      	pop	{r3, r4, r5, pc}
 8009a84:	240008b0 	.word	0x240008b0

08009a88 <_read_r>:
 8009a88:	b538      	push	{r3, r4, r5, lr}
 8009a8a:	4d07      	ldr	r5, [pc, #28]	; (8009aa8 <_read_r+0x20>)
 8009a8c:	4604      	mov	r4, r0
 8009a8e:	4608      	mov	r0, r1
 8009a90:	4611      	mov	r1, r2
 8009a92:	2200      	movs	r2, #0
 8009a94:	602a      	str	r2, [r5, #0]
 8009a96:	461a      	mov	r2, r3
 8009a98:	f7f7 fb1a 	bl	80010d0 <_read>
 8009a9c:	1c43      	adds	r3, r0, #1
 8009a9e:	d102      	bne.n	8009aa6 <_read_r+0x1e>
 8009aa0:	682b      	ldr	r3, [r5, #0]
 8009aa2:	b103      	cbz	r3, 8009aa6 <_read_r+0x1e>
 8009aa4:	6023      	str	r3, [r4, #0]
 8009aa6:	bd38      	pop	{r3, r4, r5, pc}
 8009aa8:	240008b0 	.word	0x240008b0

08009aac <_write_r>:
 8009aac:	b538      	push	{r3, r4, r5, lr}
 8009aae:	4d07      	ldr	r5, [pc, #28]	; (8009acc <_write_r+0x20>)
 8009ab0:	4604      	mov	r4, r0
 8009ab2:	4608      	mov	r0, r1
 8009ab4:	4611      	mov	r1, r2
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	602a      	str	r2, [r5, #0]
 8009aba:	461a      	mov	r2, r3
 8009abc:	f7f7 fb25 	bl	800110a <_write>
 8009ac0:	1c43      	adds	r3, r0, #1
 8009ac2:	d102      	bne.n	8009aca <_write_r+0x1e>
 8009ac4:	682b      	ldr	r3, [r5, #0]
 8009ac6:	b103      	cbz	r3, 8009aca <_write_r+0x1e>
 8009ac8:	6023      	str	r3, [r4, #0]
 8009aca:	bd38      	pop	{r3, r4, r5, pc}
 8009acc:	240008b0 	.word	0x240008b0

08009ad0 <__errno>:
 8009ad0:	4b01      	ldr	r3, [pc, #4]	; (8009ad8 <__errno+0x8>)
 8009ad2:	6818      	ldr	r0, [r3, #0]
 8009ad4:	4770      	bx	lr
 8009ad6:	bf00      	nop
 8009ad8:	24000070 	.word	0x24000070

08009adc <__libc_init_array>:
 8009adc:	b570      	push	{r4, r5, r6, lr}
 8009ade:	4d0d      	ldr	r5, [pc, #52]	; (8009b14 <__libc_init_array+0x38>)
 8009ae0:	4c0d      	ldr	r4, [pc, #52]	; (8009b18 <__libc_init_array+0x3c>)
 8009ae2:	1b64      	subs	r4, r4, r5
 8009ae4:	10a4      	asrs	r4, r4, #2
 8009ae6:	2600      	movs	r6, #0
 8009ae8:	42a6      	cmp	r6, r4
 8009aea:	d109      	bne.n	8009b00 <__libc_init_array+0x24>
 8009aec:	4d0b      	ldr	r5, [pc, #44]	; (8009b1c <__libc_init_array+0x40>)
 8009aee:	4c0c      	ldr	r4, [pc, #48]	; (8009b20 <__libc_init_array+0x44>)
 8009af0:	f001 fff4 	bl	800badc <_init>
 8009af4:	1b64      	subs	r4, r4, r5
 8009af6:	10a4      	asrs	r4, r4, #2
 8009af8:	2600      	movs	r6, #0
 8009afa:	42a6      	cmp	r6, r4
 8009afc:	d105      	bne.n	8009b0a <__libc_init_array+0x2e>
 8009afe:	bd70      	pop	{r4, r5, r6, pc}
 8009b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b04:	4798      	blx	r3
 8009b06:	3601      	adds	r6, #1
 8009b08:	e7ee      	b.n	8009ae8 <__libc_init_array+0xc>
 8009b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b0e:	4798      	blx	r3
 8009b10:	3601      	adds	r6, #1
 8009b12:	e7f2      	b.n	8009afa <__libc_init_array+0x1e>
 8009b14:	0800cbf4 	.word	0x0800cbf4
 8009b18:	0800cbf4 	.word	0x0800cbf4
 8009b1c:	0800cbf4 	.word	0x0800cbf4
 8009b20:	0800cbf8 	.word	0x0800cbf8

08009b24 <__retarget_lock_init_recursive>:
 8009b24:	4770      	bx	lr

08009b26 <__retarget_lock_acquire_recursive>:
 8009b26:	4770      	bx	lr

08009b28 <__retarget_lock_release_recursive>:
 8009b28:	4770      	bx	lr

08009b2a <memcpy>:
 8009b2a:	440a      	add	r2, r1
 8009b2c:	4291      	cmp	r1, r2
 8009b2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b32:	d100      	bne.n	8009b36 <memcpy+0xc>
 8009b34:	4770      	bx	lr
 8009b36:	b510      	push	{r4, lr}
 8009b38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b40:	4291      	cmp	r1, r2
 8009b42:	d1f9      	bne.n	8009b38 <memcpy+0xe>
 8009b44:	bd10      	pop	{r4, pc}

08009b46 <quorem>:
 8009b46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b4a:	6903      	ldr	r3, [r0, #16]
 8009b4c:	690c      	ldr	r4, [r1, #16]
 8009b4e:	42a3      	cmp	r3, r4
 8009b50:	4607      	mov	r7, r0
 8009b52:	db7e      	blt.n	8009c52 <quorem+0x10c>
 8009b54:	3c01      	subs	r4, #1
 8009b56:	f101 0814 	add.w	r8, r1, #20
 8009b5a:	f100 0514 	add.w	r5, r0, #20
 8009b5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b62:	9301      	str	r3, [sp, #4]
 8009b64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009b68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009b74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009b78:	fbb2 f6f3 	udiv	r6, r2, r3
 8009b7c:	d331      	bcc.n	8009be2 <quorem+0x9c>
 8009b7e:	f04f 0e00 	mov.w	lr, #0
 8009b82:	4640      	mov	r0, r8
 8009b84:	46ac      	mov	ip, r5
 8009b86:	46f2      	mov	sl, lr
 8009b88:	f850 2b04 	ldr.w	r2, [r0], #4
 8009b8c:	b293      	uxth	r3, r2
 8009b8e:	fb06 e303 	mla	r3, r6, r3, lr
 8009b92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009b96:	0c1a      	lsrs	r2, r3, #16
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	ebaa 0303 	sub.w	r3, sl, r3
 8009b9e:	f8dc a000 	ldr.w	sl, [ip]
 8009ba2:	fa13 f38a 	uxtah	r3, r3, sl
 8009ba6:	fb06 220e 	mla	r2, r6, lr, r2
 8009baa:	9300      	str	r3, [sp, #0]
 8009bac:	9b00      	ldr	r3, [sp, #0]
 8009bae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009bb2:	b292      	uxth	r2, r2
 8009bb4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009bb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009bbc:	f8bd 3000 	ldrh.w	r3, [sp]
 8009bc0:	4581      	cmp	r9, r0
 8009bc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bc6:	f84c 3b04 	str.w	r3, [ip], #4
 8009bca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009bce:	d2db      	bcs.n	8009b88 <quorem+0x42>
 8009bd0:	f855 300b 	ldr.w	r3, [r5, fp]
 8009bd4:	b92b      	cbnz	r3, 8009be2 <quorem+0x9c>
 8009bd6:	9b01      	ldr	r3, [sp, #4]
 8009bd8:	3b04      	subs	r3, #4
 8009bda:	429d      	cmp	r5, r3
 8009bdc:	461a      	mov	r2, r3
 8009bde:	d32c      	bcc.n	8009c3a <quorem+0xf4>
 8009be0:	613c      	str	r4, [r7, #16]
 8009be2:	4638      	mov	r0, r7
 8009be4:	f001 f920 	bl	800ae28 <__mcmp>
 8009be8:	2800      	cmp	r0, #0
 8009bea:	db22      	blt.n	8009c32 <quorem+0xec>
 8009bec:	3601      	adds	r6, #1
 8009bee:	4629      	mov	r1, r5
 8009bf0:	2000      	movs	r0, #0
 8009bf2:	f858 2b04 	ldr.w	r2, [r8], #4
 8009bf6:	f8d1 c000 	ldr.w	ip, [r1]
 8009bfa:	b293      	uxth	r3, r2
 8009bfc:	1ac3      	subs	r3, r0, r3
 8009bfe:	0c12      	lsrs	r2, r2, #16
 8009c00:	fa13 f38c 	uxtah	r3, r3, ip
 8009c04:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009c08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c12:	45c1      	cmp	r9, r8
 8009c14:	f841 3b04 	str.w	r3, [r1], #4
 8009c18:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009c1c:	d2e9      	bcs.n	8009bf2 <quorem+0xac>
 8009c1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c26:	b922      	cbnz	r2, 8009c32 <quorem+0xec>
 8009c28:	3b04      	subs	r3, #4
 8009c2a:	429d      	cmp	r5, r3
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	d30a      	bcc.n	8009c46 <quorem+0x100>
 8009c30:	613c      	str	r4, [r7, #16]
 8009c32:	4630      	mov	r0, r6
 8009c34:	b003      	add	sp, #12
 8009c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c3a:	6812      	ldr	r2, [r2, #0]
 8009c3c:	3b04      	subs	r3, #4
 8009c3e:	2a00      	cmp	r2, #0
 8009c40:	d1ce      	bne.n	8009be0 <quorem+0x9a>
 8009c42:	3c01      	subs	r4, #1
 8009c44:	e7c9      	b.n	8009bda <quorem+0x94>
 8009c46:	6812      	ldr	r2, [r2, #0]
 8009c48:	3b04      	subs	r3, #4
 8009c4a:	2a00      	cmp	r2, #0
 8009c4c:	d1f0      	bne.n	8009c30 <quorem+0xea>
 8009c4e:	3c01      	subs	r4, #1
 8009c50:	e7eb      	b.n	8009c2a <quorem+0xe4>
 8009c52:	2000      	movs	r0, #0
 8009c54:	e7ee      	b.n	8009c34 <quorem+0xee>
	...

08009c58 <_dtoa_r>:
 8009c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c5c:	ed2d 8b02 	vpush	{d8}
 8009c60:	69c5      	ldr	r5, [r0, #28]
 8009c62:	b091      	sub	sp, #68	; 0x44
 8009c64:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009c68:	ec59 8b10 	vmov	r8, r9, d0
 8009c6c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8009c6e:	9106      	str	r1, [sp, #24]
 8009c70:	4606      	mov	r6, r0
 8009c72:	9208      	str	r2, [sp, #32]
 8009c74:	930c      	str	r3, [sp, #48]	; 0x30
 8009c76:	b975      	cbnz	r5, 8009c96 <_dtoa_r+0x3e>
 8009c78:	2010      	movs	r0, #16
 8009c7a:	f000 fda5 	bl	800a7c8 <malloc>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	61f0      	str	r0, [r6, #28]
 8009c82:	b920      	cbnz	r0, 8009c8e <_dtoa_r+0x36>
 8009c84:	4ba6      	ldr	r3, [pc, #664]	; (8009f20 <_dtoa_r+0x2c8>)
 8009c86:	21ef      	movs	r1, #239	; 0xef
 8009c88:	48a6      	ldr	r0, [pc, #664]	; (8009f24 <_dtoa_r+0x2cc>)
 8009c8a:	f001 fbe3 	bl	800b454 <__assert_func>
 8009c8e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009c92:	6005      	str	r5, [r0, #0]
 8009c94:	60c5      	str	r5, [r0, #12]
 8009c96:	69f3      	ldr	r3, [r6, #28]
 8009c98:	6819      	ldr	r1, [r3, #0]
 8009c9a:	b151      	cbz	r1, 8009cb2 <_dtoa_r+0x5a>
 8009c9c:	685a      	ldr	r2, [r3, #4]
 8009c9e:	604a      	str	r2, [r1, #4]
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	4093      	lsls	r3, r2
 8009ca4:	608b      	str	r3, [r1, #8]
 8009ca6:	4630      	mov	r0, r6
 8009ca8:	f000 fe82 	bl	800a9b0 <_Bfree>
 8009cac:	69f3      	ldr	r3, [r6, #28]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	601a      	str	r2, [r3, #0]
 8009cb2:	f1b9 0300 	subs.w	r3, r9, #0
 8009cb6:	bfbb      	ittet	lt
 8009cb8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009cbc:	9303      	strlt	r3, [sp, #12]
 8009cbe:	2300      	movge	r3, #0
 8009cc0:	2201      	movlt	r2, #1
 8009cc2:	bfac      	ite	ge
 8009cc4:	6023      	strge	r3, [r4, #0]
 8009cc6:	6022      	strlt	r2, [r4, #0]
 8009cc8:	4b97      	ldr	r3, [pc, #604]	; (8009f28 <_dtoa_r+0x2d0>)
 8009cca:	9c03      	ldr	r4, [sp, #12]
 8009ccc:	43a3      	bics	r3, r4
 8009cce:	d11c      	bne.n	8009d0a <_dtoa_r+0xb2>
 8009cd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009cd2:	f242 730f 	movw	r3, #9999	; 0x270f
 8009cd6:	6013      	str	r3, [r2, #0]
 8009cd8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009cdc:	ea53 0308 	orrs.w	r3, r3, r8
 8009ce0:	f000 84fb 	beq.w	800a6da <_dtoa_r+0xa82>
 8009ce4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009ce6:	b963      	cbnz	r3, 8009d02 <_dtoa_r+0xaa>
 8009ce8:	4b90      	ldr	r3, [pc, #576]	; (8009f2c <_dtoa_r+0x2d4>)
 8009cea:	e020      	b.n	8009d2e <_dtoa_r+0xd6>
 8009cec:	4b90      	ldr	r3, [pc, #576]	; (8009f30 <_dtoa_r+0x2d8>)
 8009cee:	9301      	str	r3, [sp, #4]
 8009cf0:	3308      	adds	r3, #8
 8009cf2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009cf4:	6013      	str	r3, [r2, #0]
 8009cf6:	9801      	ldr	r0, [sp, #4]
 8009cf8:	b011      	add	sp, #68	; 0x44
 8009cfa:	ecbd 8b02 	vpop	{d8}
 8009cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d02:	4b8a      	ldr	r3, [pc, #552]	; (8009f2c <_dtoa_r+0x2d4>)
 8009d04:	9301      	str	r3, [sp, #4]
 8009d06:	3303      	adds	r3, #3
 8009d08:	e7f3      	b.n	8009cf2 <_dtoa_r+0x9a>
 8009d0a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009d0e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d16:	d10c      	bne.n	8009d32 <_dtoa_r+0xda>
 8009d18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	6013      	str	r3, [r2, #0]
 8009d1e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	f000 84d7 	beq.w	800a6d4 <_dtoa_r+0xa7c>
 8009d26:	4b83      	ldr	r3, [pc, #524]	; (8009f34 <_dtoa_r+0x2dc>)
 8009d28:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009d2a:	6013      	str	r3, [r2, #0]
 8009d2c:	3b01      	subs	r3, #1
 8009d2e:	9301      	str	r3, [sp, #4]
 8009d30:	e7e1      	b.n	8009cf6 <_dtoa_r+0x9e>
 8009d32:	aa0e      	add	r2, sp, #56	; 0x38
 8009d34:	a90f      	add	r1, sp, #60	; 0x3c
 8009d36:	4630      	mov	r0, r6
 8009d38:	eeb0 0b48 	vmov.f64	d0, d8
 8009d3c:	f001 f91a 	bl	800af74 <__d2b>
 8009d40:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8009d44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d46:	4605      	mov	r5, r0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d046      	beq.n	8009dda <_dtoa_r+0x182>
 8009d4c:	eeb0 7b48 	vmov.f64	d7, d8
 8009d50:	ee18 1a90 	vmov	r1, s17
 8009d54:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009d58:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8009d5c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009d60:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009d64:	2000      	movs	r0, #0
 8009d66:	ee07 1a90 	vmov	s15, r1
 8009d6a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8009d6e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8009f08 <_dtoa_r+0x2b0>
 8009d72:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009d76:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8009f10 <_dtoa_r+0x2b8>
 8009d7a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009d7e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8009f18 <_dtoa_r+0x2c0>
 8009d82:	ee07 3a90 	vmov	s15, r3
 8009d86:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009d8a:	eeb0 7b46 	vmov.f64	d7, d6
 8009d8e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009d92:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009d96:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d9e:	ee16 ba90 	vmov	fp, s13
 8009da2:	9009      	str	r0, [sp, #36]	; 0x24
 8009da4:	d508      	bpl.n	8009db8 <_dtoa_r+0x160>
 8009da6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009daa:	eeb4 6b47 	vcmp.f64	d6, d7
 8009dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009db2:	bf18      	it	ne
 8009db4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009db8:	f1bb 0f16 	cmp.w	fp, #22
 8009dbc:	d82b      	bhi.n	8009e16 <_dtoa_r+0x1be>
 8009dbe:	495e      	ldr	r1, [pc, #376]	; (8009f38 <_dtoa_r+0x2e0>)
 8009dc0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8009dc4:	ed91 7b00 	vldr	d7, [r1]
 8009dc8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dd0:	d501      	bpl.n	8009dd6 <_dtoa_r+0x17e>
 8009dd2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009dd6:	2100      	movs	r1, #0
 8009dd8:	e01e      	b.n	8009e18 <_dtoa_r+0x1c0>
 8009dda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ddc:	4413      	add	r3, r2
 8009dde:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8009de2:	2920      	cmp	r1, #32
 8009de4:	bfc1      	itttt	gt
 8009de6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8009dea:	408c      	lslgt	r4, r1
 8009dec:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8009df0:	fa28 f101 	lsrgt.w	r1, r8, r1
 8009df4:	bfd6      	itet	le
 8009df6:	f1c1 0120 	rsble	r1, r1, #32
 8009dfa:	4321      	orrgt	r1, r4
 8009dfc:	fa08 f101 	lslle.w	r1, r8, r1
 8009e00:	ee07 1a90 	vmov	s15, r1
 8009e04:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	ee17 1a90 	vmov	r1, s15
 8009e0e:	2001      	movs	r0, #1
 8009e10:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009e14:	e7a7      	b.n	8009d66 <_dtoa_r+0x10e>
 8009e16:	2101      	movs	r1, #1
 8009e18:	1ad2      	subs	r2, r2, r3
 8009e1a:	1e53      	subs	r3, r2, #1
 8009e1c:	9305      	str	r3, [sp, #20]
 8009e1e:	bf45      	ittet	mi
 8009e20:	f1c2 0301 	rsbmi	r3, r2, #1
 8009e24:	9304      	strmi	r3, [sp, #16]
 8009e26:	2300      	movpl	r3, #0
 8009e28:	2300      	movmi	r3, #0
 8009e2a:	bf4c      	ite	mi
 8009e2c:	9305      	strmi	r3, [sp, #20]
 8009e2e:	9304      	strpl	r3, [sp, #16]
 8009e30:	f1bb 0f00 	cmp.w	fp, #0
 8009e34:	910b      	str	r1, [sp, #44]	; 0x2c
 8009e36:	db18      	blt.n	8009e6a <_dtoa_r+0x212>
 8009e38:	9b05      	ldr	r3, [sp, #20]
 8009e3a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8009e3e:	445b      	add	r3, fp
 8009e40:	9305      	str	r3, [sp, #20]
 8009e42:	2300      	movs	r3, #0
 8009e44:	9a06      	ldr	r2, [sp, #24]
 8009e46:	2a09      	cmp	r2, #9
 8009e48:	d848      	bhi.n	8009edc <_dtoa_r+0x284>
 8009e4a:	2a05      	cmp	r2, #5
 8009e4c:	bfc4      	itt	gt
 8009e4e:	3a04      	subgt	r2, #4
 8009e50:	9206      	strgt	r2, [sp, #24]
 8009e52:	9a06      	ldr	r2, [sp, #24]
 8009e54:	f1a2 0202 	sub.w	r2, r2, #2
 8009e58:	bfcc      	ite	gt
 8009e5a:	2400      	movgt	r4, #0
 8009e5c:	2401      	movle	r4, #1
 8009e5e:	2a03      	cmp	r2, #3
 8009e60:	d847      	bhi.n	8009ef2 <_dtoa_r+0x29a>
 8009e62:	e8df f002 	tbb	[pc, r2]
 8009e66:	2d0b      	.short	0x2d0b
 8009e68:	392b      	.short	0x392b
 8009e6a:	9b04      	ldr	r3, [sp, #16]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	eba3 030b 	sub.w	r3, r3, fp
 8009e72:	9304      	str	r3, [sp, #16]
 8009e74:	920a      	str	r2, [sp, #40]	; 0x28
 8009e76:	f1cb 0300 	rsb	r3, fp, #0
 8009e7a:	e7e3      	b.n	8009e44 <_dtoa_r+0x1ec>
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	9207      	str	r2, [sp, #28]
 8009e80:	9a08      	ldr	r2, [sp, #32]
 8009e82:	2a00      	cmp	r2, #0
 8009e84:	dc38      	bgt.n	8009ef8 <_dtoa_r+0x2a0>
 8009e86:	f04f 0a01 	mov.w	sl, #1
 8009e8a:	46d1      	mov	r9, sl
 8009e8c:	4652      	mov	r2, sl
 8009e8e:	f8cd a020 	str.w	sl, [sp, #32]
 8009e92:	69f7      	ldr	r7, [r6, #28]
 8009e94:	2100      	movs	r1, #0
 8009e96:	2004      	movs	r0, #4
 8009e98:	f100 0c14 	add.w	ip, r0, #20
 8009e9c:	4594      	cmp	ip, r2
 8009e9e:	d930      	bls.n	8009f02 <_dtoa_r+0x2aa>
 8009ea0:	6079      	str	r1, [r7, #4]
 8009ea2:	4630      	mov	r0, r6
 8009ea4:	930d      	str	r3, [sp, #52]	; 0x34
 8009ea6:	f000 fd43 	bl	800a930 <_Balloc>
 8009eaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009eac:	9001      	str	r0, [sp, #4]
 8009eae:	4602      	mov	r2, r0
 8009eb0:	2800      	cmp	r0, #0
 8009eb2:	d145      	bne.n	8009f40 <_dtoa_r+0x2e8>
 8009eb4:	4b21      	ldr	r3, [pc, #132]	; (8009f3c <_dtoa_r+0x2e4>)
 8009eb6:	f240 11af 	movw	r1, #431	; 0x1af
 8009eba:	e6e5      	b.n	8009c88 <_dtoa_r+0x30>
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	e7de      	b.n	8009e7e <_dtoa_r+0x226>
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	9207      	str	r2, [sp, #28]
 8009ec4:	9a08      	ldr	r2, [sp, #32]
 8009ec6:	eb0b 0a02 	add.w	sl, fp, r2
 8009eca:	f10a 0901 	add.w	r9, sl, #1
 8009ece:	464a      	mov	r2, r9
 8009ed0:	2a01      	cmp	r2, #1
 8009ed2:	bfb8      	it	lt
 8009ed4:	2201      	movlt	r2, #1
 8009ed6:	e7dc      	b.n	8009e92 <_dtoa_r+0x23a>
 8009ed8:	2201      	movs	r2, #1
 8009eda:	e7f2      	b.n	8009ec2 <_dtoa_r+0x26a>
 8009edc:	2401      	movs	r4, #1
 8009ede:	2200      	movs	r2, #0
 8009ee0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8009ee4:	f04f 3aff 	mov.w	sl, #4294967295
 8009ee8:	2100      	movs	r1, #0
 8009eea:	46d1      	mov	r9, sl
 8009eec:	2212      	movs	r2, #18
 8009eee:	9108      	str	r1, [sp, #32]
 8009ef0:	e7cf      	b.n	8009e92 <_dtoa_r+0x23a>
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	9207      	str	r2, [sp, #28]
 8009ef6:	e7f5      	b.n	8009ee4 <_dtoa_r+0x28c>
 8009ef8:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009efc:	46d1      	mov	r9, sl
 8009efe:	4652      	mov	r2, sl
 8009f00:	e7c7      	b.n	8009e92 <_dtoa_r+0x23a>
 8009f02:	3101      	adds	r1, #1
 8009f04:	0040      	lsls	r0, r0, #1
 8009f06:	e7c7      	b.n	8009e98 <_dtoa_r+0x240>
 8009f08:	636f4361 	.word	0x636f4361
 8009f0c:	3fd287a7 	.word	0x3fd287a7
 8009f10:	8b60c8b3 	.word	0x8b60c8b3
 8009f14:	3fc68a28 	.word	0x3fc68a28
 8009f18:	509f79fb 	.word	0x509f79fb
 8009f1c:	3fd34413 	.word	0x3fd34413
 8009f20:	0800c8c5 	.word	0x0800c8c5
 8009f24:	0800c8dc 	.word	0x0800c8dc
 8009f28:	7ff00000 	.word	0x7ff00000
 8009f2c:	0800c8c1 	.word	0x0800c8c1
 8009f30:	0800c8b8 	.word	0x0800c8b8
 8009f34:	0800c895 	.word	0x0800c895
 8009f38:	0800c9c8 	.word	0x0800c9c8
 8009f3c:	0800c934 	.word	0x0800c934
 8009f40:	69f2      	ldr	r2, [r6, #28]
 8009f42:	9901      	ldr	r1, [sp, #4]
 8009f44:	6011      	str	r1, [r2, #0]
 8009f46:	f1b9 0f0e 	cmp.w	r9, #14
 8009f4a:	d86c      	bhi.n	800a026 <_dtoa_r+0x3ce>
 8009f4c:	2c00      	cmp	r4, #0
 8009f4e:	d06a      	beq.n	800a026 <_dtoa_r+0x3ce>
 8009f50:	f1bb 0f00 	cmp.w	fp, #0
 8009f54:	f340 80a0 	ble.w	800a098 <_dtoa_r+0x440>
 8009f58:	4ac1      	ldr	r2, [pc, #772]	; (800a260 <_dtoa_r+0x608>)
 8009f5a:	f00b 010f 	and.w	r1, fp, #15
 8009f5e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009f62:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009f66:	ed92 7b00 	vldr	d7, [r2]
 8009f6a:	ea4f 122b 	mov.w	r2, fp, asr #4
 8009f6e:	f000 8087 	beq.w	800a080 <_dtoa_r+0x428>
 8009f72:	49bc      	ldr	r1, [pc, #752]	; (800a264 <_dtoa_r+0x60c>)
 8009f74:	ed91 6b08 	vldr	d6, [r1, #32]
 8009f78:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009f7c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009f80:	f002 020f 	and.w	r2, r2, #15
 8009f84:	2103      	movs	r1, #3
 8009f86:	48b7      	ldr	r0, [pc, #732]	; (800a264 <_dtoa_r+0x60c>)
 8009f88:	2a00      	cmp	r2, #0
 8009f8a:	d17b      	bne.n	800a084 <_dtoa_r+0x42c>
 8009f8c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009f90:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009f94:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009f98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f9a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f9e:	2a00      	cmp	r2, #0
 8009fa0:	f000 80a0 	beq.w	800a0e4 <_dtoa_r+0x48c>
 8009fa4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009fa8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fb0:	f140 8098 	bpl.w	800a0e4 <_dtoa_r+0x48c>
 8009fb4:	f1b9 0f00 	cmp.w	r9, #0
 8009fb8:	f000 8094 	beq.w	800a0e4 <_dtoa_r+0x48c>
 8009fbc:	f1ba 0f00 	cmp.w	sl, #0
 8009fc0:	dd2f      	ble.n	800a022 <_dtoa_r+0x3ca>
 8009fc2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009fc6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009fca:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009fce:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009fd2:	3101      	adds	r1, #1
 8009fd4:	4654      	mov	r4, sl
 8009fd6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009fda:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8009fde:	ee07 1a90 	vmov	s15, r1
 8009fe2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009fe6:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009fea:	ee15 7a90 	vmov	r7, s11
 8009fee:	ec51 0b15 	vmov	r0, r1, d5
 8009ff2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8009ff6:	2c00      	cmp	r4, #0
 8009ff8:	d177      	bne.n	800a0ea <_dtoa_r+0x492>
 8009ffa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009ffe:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a002:	ec41 0b17 	vmov	d7, r0, r1
 800a006:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a00a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a00e:	f300 826a 	bgt.w	800a4e6 <_dtoa_r+0x88e>
 800a012:	eeb1 7b47 	vneg.f64	d7, d7
 800a016:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a01a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a01e:	f100 8260 	bmi.w	800a4e2 <_dtoa_r+0x88a>
 800a022:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a026:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a028:	2a00      	cmp	r2, #0
 800a02a:	f2c0 811d 	blt.w	800a268 <_dtoa_r+0x610>
 800a02e:	f1bb 0f0e 	cmp.w	fp, #14
 800a032:	f300 8119 	bgt.w	800a268 <_dtoa_r+0x610>
 800a036:	4b8a      	ldr	r3, [pc, #552]	; (800a260 <_dtoa_r+0x608>)
 800a038:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a03c:	ed93 6b00 	vldr	d6, [r3]
 800a040:	9b08      	ldr	r3, [sp, #32]
 800a042:	2b00      	cmp	r3, #0
 800a044:	f280 80b7 	bge.w	800a1b6 <_dtoa_r+0x55e>
 800a048:	f1b9 0f00 	cmp.w	r9, #0
 800a04c:	f300 80b3 	bgt.w	800a1b6 <_dtoa_r+0x55e>
 800a050:	f040 8246 	bne.w	800a4e0 <_dtoa_r+0x888>
 800a054:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a058:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a05c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a060:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a068:	464c      	mov	r4, r9
 800a06a:	464f      	mov	r7, r9
 800a06c:	f280 821c 	bge.w	800a4a8 <_dtoa_r+0x850>
 800a070:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a074:	2331      	movs	r3, #49	; 0x31
 800a076:	f808 3b01 	strb.w	r3, [r8], #1
 800a07a:	f10b 0b01 	add.w	fp, fp, #1
 800a07e:	e218      	b.n	800a4b2 <_dtoa_r+0x85a>
 800a080:	2102      	movs	r1, #2
 800a082:	e780      	b.n	8009f86 <_dtoa_r+0x32e>
 800a084:	07d4      	lsls	r4, r2, #31
 800a086:	d504      	bpl.n	800a092 <_dtoa_r+0x43a>
 800a088:	ed90 6b00 	vldr	d6, [r0]
 800a08c:	3101      	adds	r1, #1
 800a08e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a092:	1052      	asrs	r2, r2, #1
 800a094:	3008      	adds	r0, #8
 800a096:	e777      	b.n	8009f88 <_dtoa_r+0x330>
 800a098:	d022      	beq.n	800a0e0 <_dtoa_r+0x488>
 800a09a:	f1cb 0200 	rsb	r2, fp, #0
 800a09e:	4970      	ldr	r1, [pc, #448]	; (800a260 <_dtoa_r+0x608>)
 800a0a0:	f002 000f 	and.w	r0, r2, #15
 800a0a4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a0a8:	ed91 7b00 	vldr	d7, [r1]
 800a0ac:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a0b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a0b4:	486b      	ldr	r0, [pc, #428]	; (800a264 <_dtoa_r+0x60c>)
 800a0b6:	1112      	asrs	r2, r2, #4
 800a0b8:	2400      	movs	r4, #0
 800a0ba:	2102      	movs	r1, #2
 800a0bc:	b92a      	cbnz	r2, 800a0ca <_dtoa_r+0x472>
 800a0be:	2c00      	cmp	r4, #0
 800a0c0:	f43f af6a 	beq.w	8009f98 <_dtoa_r+0x340>
 800a0c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a0c8:	e766      	b.n	8009f98 <_dtoa_r+0x340>
 800a0ca:	07d7      	lsls	r7, r2, #31
 800a0cc:	d505      	bpl.n	800a0da <_dtoa_r+0x482>
 800a0ce:	ed90 6b00 	vldr	d6, [r0]
 800a0d2:	3101      	adds	r1, #1
 800a0d4:	2401      	movs	r4, #1
 800a0d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a0da:	1052      	asrs	r2, r2, #1
 800a0dc:	3008      	adds	r0, #8
 800a0de:	e7ed      	b.n	800a0bc <_dtoa_r+0x464>
 800a0e0:	2102      	movs	r1, #2
 800a0e2:	e759      	b.n	8009f98 <_dtoa_r+0x340>
 800a0e4:	465a      	mov	r2, fp
 800a0e6:	464c      	mov	r4, r9
 800a0e8:	e775      	b.n	8009fd6 <_dtoa_r+0x37e>
 800a0ea:	ec41 0b17 	vmov	d7, r0, r1
 800a0ee:	495c      	ldr	r1, [pc, #368]	; (800a260 <_dtoa_r+0x608>)
 800a0f0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800a0f4:	ed11 4b02 	vldr	d4, [r1, #-8]
 800a0f8:	9901      	ldr	r1, [sp, #4]
 800a0fa:	440c      	add	r4, r1
 800a0fc:	9907      	ldr	r1, [sp, #28]
 800a0fe:	b351      	cbz	r1, 800a156 <_dtoa_r+0x4fe>
 800a100:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a104:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a108:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a10c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a110:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a114:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a118:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a11c:	ee14 1a90 	vmov	r1, s9
 800a120:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a124:	3130      	adds	r1, #48	; 0x30
 800a126:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a12a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a12e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a132:	f808 1b01 	strb.w	r1, [r8], #1
 800a136:	d439      	bmi.n	800a1ac <_dtoa_r+0x554>
 800a138:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a13c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a144:	d472      	bmi.n	800a22c <_dtoa_r+0x5d4>
 800a146:	45a0      	cmp	r8, r4
 800a148:	f43f af6b 	beq.w	800a022 <_dtoa_r+0x3ca>
 800a14c:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a150:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a154:	e7e0      	b.n	800a118 <_dtoa_r+0x4c0>
 800a156:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a15a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a15e:	4620      	mov	r0, r4
 800a160:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a164:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a168:	ee14 1a90 	vmov	r1, s9
 800a16c:	3130      	adds	r1, #48	; 0x30
 800a16e:	f808 1b01 	strb.w	r1, [r8], #1
 800a172:	45a0      	cmp	r8, r4
 800a174:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a178:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a17c:	d118      	bne.n	800a1b0 <_dtoa_r+0x558>
 800a17e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a182:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a186:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a18a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a18e:	dc4d      	bgt.n	800a22c <_dtoa_r+0x5d4>
 800a190:	ee35 5b47 	vsub.f64	d5, d5, d7
 800a194:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800a198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a19c:	f57f af41 	bpl.w	800a022 <_dtoa_r+0x3ca>
 800a1a0:	4680      	mov	r8, r0
 800a1a2:	3801      	subs	r0, #1
 800a1a4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a1a8:	2b30      	cmp	r3, #48	; 0x30
 800a1aa:	d0f9      	beq.n	800a1a0 <_dtoa_r+0x548>
 800a1ac:	4693      	mov	fp, r2
 800a1ae:	e02a      	b.n	800a206 <_dtoa_r+0x5ae>
 800a1b0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a1b4:	e7d6      	b.n	800a164 <_dtoa_r+0x50c>
 800a1b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a1ba:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a1be:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a1c2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a1c6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a1ca:	ee15 3a10 	vmov	r3, s10
 800a1ce:	3330      	adds	r3, #48	; 0x30
 800a1d0:	f808 3b01 	strb.w	r3, [r8], #1
 800a1d4:	9b01      	ldr	r3, [sp, #4]
 800a1d6:	eba8 0303 	sub.w	r3, r8, r3
 800a1da:	4599      	cmp	r9, r3
 800a1dc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a1e0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a1e4:	d133      	bne.n	800a24e <_dtoa_r+0x5f6>
 800a1e6:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a1ea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a1ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1f2:	dc1a      	bgt.n	800a22a <_dtoa_r+0x5d2>
 800a1f4:	eeb4 7b46 	vcmp.f64	d7, d6
 800a1f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1fc:	d103      	bne.n	800a206 <_dtoa_r+0x5ae>
 800a1fe:	ee15 3a10 	vmov	r3, s10
 800a202:	07d9      	lsls	r1, r3, #31
 800a204:	d411      	bmi.n	800a22a <_dtoa_r+0x5d2>
 800a206:	4629      	mov	r1, r5
 800a208:	4630      	mov	r0, r6
 800a20a:	f000 fbd1 	bl	800a9b0 <_Bfree>
 800a20e:	2300      	movs	r3, #0
 800a210:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a212:	f888 3000 	strb.w	r3, [r8]
 800a216:	f10b 0301 	add.w	r3, fp, #1
 800a21a:	6013      	str	r3, [r2, #0]
 800a21c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a21e:	2b00      	cmp	r3, #0
 800a220:	f43f ad69 	beq.w	8009cf6 <_dtoa_r+0x9e>
 800a224:	f8c3 8000 	str.w	r8, [r3]
 800a228:	e565      	b.n	8009cf6 <_dtoa_r+0x9e>
 800a22a:	465a      	mov	r2, fp
 800a22c:	4643      	mov	r3, r8
 800a22e:	4698      	mov	r8, r3
 800a230:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800a234:	2939      	cmp	r1, #57	; 0x39
 800a236:	d106      	bne.n	800a246 <_dtoa_r+0x5ee>
 800a238:	9901      	ldr	r1, [sp, #4]
 800a23a:	4299      	cmp	r1, r3
 800a23c:	d1f7      	bne.n	800a22e <_dtoa_r+0x5d6>
 800a23e:	9801      	ldr	r0, [sp, #4]
 800a240:	2130      	movs	r1, #48	; 0x30
 800a242:	3201      	adds	r2, #1
 800a244:	7001      	strb	r1, [r0, #0]
 800a246:	7819      	ldrb	r1, [r3, #0]
 800a248:	3101      	adds	r1, #1
 800a24a:	7019      	strb	r1, [r3, #0]
 800a24c:	e7ae      	b.n	800a1ac <_dtoa_r+0x554>
 800a24e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a252:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a25a:	d1b2      	bne.n	800a1c2 <_dtoa_r+0x56a>
 800a25c:	e7d3      	b.n	800a206 <_dtoa_r+0x5ae>
 800a25e:	bf00      	nop
 800a260:	0800c9c8 	.word	0x0800c9c8
 800a264:	0800c9a0 	.word	0x0800c9a0
 800a268:	9907      	ldr	r1, [sp, #28]
 800a26a:	2900      	cmp	r1, #0
 800a26c:	f000 80d0 	beq.w	800a410 <_dtoa_r+0x7b8>
 800a270:	9906      	ldr	r1, [sp, #24]
 800a272:	2901      	cmp	r1, #1
 800a274:	f300 80b4 	bgt.w	800a3e0 <_dtoa_r+0x788>
 800a278:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a27a:	2900      	cmp	r1, #0
 800a27c:	f000 80ac 	beq.w	800a3d8 <_dtoa_r+0x780>
 800a280:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a284:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a288:	461c      	mov	r4, r3
 800a28a:	9309      	str	r3, [sp, #36]	; 0x24
 800a28c:	9b04      	ldr	r3, [sp, #16]
 800a28e:	4413      	add	r3, r2
 800a290:	9304      	str	r3, [sp, #16]
 800a292:	9b05      	ldr	r3, [sp, #20]
 800a294:	2101      	movs	r1, #1
 800a296:	4413      	add	r3, r2
 800a298:	4630      	mov	r0, r6
 800a29a:	9305      	str	r3, [sp, #20]
 800a29c:	f000 fc3e 	bl	800ab1c <__i2b>
 800a2a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2a2:	4607      	mov	r7, r0
 800a2a4:	f1b8 0f00 	cmp.w	r8, #0
 800a2a8:	d00d      	beq.n	800a2c6 <_dtoa_r+0x66e>
 800a2aa:	9a05      	ldr	r2, [sp, #20]
 800a2ac:	2a00      	cmp	r2, #0
 800a2ae:	dd0a      	ble.n	800a2c6 <_dtoa_r+0x66e>
 800a2b0:	4542      	cmp	r2, r8
 800a2b2:	9904      	ldr	r1, [sp, #16]
 800a2b4:	bfa8      	it	ge
 800a2b6:	4642      	movge	r2, r8
 800a2b8:	1a89      	subs	r1, r1, r2
 800a2ba:	9104      	str	r1, [sp, #16]
 800a2bc:	9905      	ldr	r1, [sp, #20]
 800a2be:	eba8 0802 	sub.w	r8, r8, r2
 800a2c2:	1a8a      	subs	r2, r1, r2
 800a2c4:	9205      	str	r2, [sp, #20]
 800a2c6:	b303      	cbz	r3, 800a30a <_dtoa_r+0x6b2>
 800a2c8:	9a07      	ldr	r2, [sp, #28]
 800a2ca:	2a00      	cmp	r2, #0
 800a2cc:	f000 80a5 	beq.w	800a41a <_dtoa_r+0x7c2>
 800a2d0:	2c00      	cmp	r4, #0
 800a2d2:	dd13      	ble.n	800a2fc <_dtoa_r+0x6a4>
 800a2d4:	4639      	mov	r1, r7
 800a2d6:	4622      	mov	r2, r4
 800a2d8:	4630      	mov	r0, r6
 800a2da:	930d      	str	r3, [sp, #52]	; 0x34
 800a2dc:	f000 fcde 	bl	800ac9c <__pow5mult>
 800a2e0:	462a      	mov	r2, r5
 800a2e2:	4601      	mov	r1, r0
 800a2e4:	4607      	mov	r7, r0
 800a2e6:	4630      	mov	r0, r6
 800a2e8:	f000 fc2e 	bl	800ab48 <__multiply>
 800a2ec:	4629      	mov	r1, r5
 800a2ee:	9009      	str	r0, [sp, #36]	; 0x24
 800a2f0:	4630      	mov	r0, r6
 800a2f2:	f000 fb5d 	bl	800a9b0 <_Bfree>
 800a2f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2fa:	4615      	mov	r5, r2
 800a2fc:	1b1a      	subs	r2, r3, r4
 800a2fe:	d004      	beq.n	800a30a <_dtoa_r+0x6b2>
 800a300:	4629      	mov	r1, r5
 800a302:	4630      	mov	r0, r6
 800a304:	f000 fcca 	bl	800ac9c <__pow5mult>
 800a308:	4605      	mov	r5, r0
 800a30a:	2101      	movs	r1, #1
 800a30c:	4630      	mov	r0, r6
 800a30e:	f000 fc05 	bl	800ab1c <__i2b>
 800a312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a314:	2b00      	cmp	r3, #0
 800a316:	4604      	mov	r4, r0
 800a318:	f340 8081 	ble.w	800a41e <_dtoa_r+0x7c6>
 800a31c:	461a      	mov	r2, r3
 800a31e:	4601      	mov	r1, r0
 800a320:	4630      	mov	r0, r6
 800a322:	f000 fcbb 	bl	800ac9c <__pow5mult>
 800a326:	9b06      	ldr	r3, [sp, #24]
 800a328:	2b01      	cmp	r3, #1
 800a32a:	4604      	mov	r4, r0
 800a32c:	dd7a      	ble.n	800a424 <_dtoa_r+0x7cc>
 800a32e:	2300      	movs	r3, #0
 800a330:	9309      	str	r3, [sp, #36]	; 0x24
 800a332:	6922      	ldr	r2, [r4, #16]
 800a334:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a338:	6910      	ldr	r0, [r2, #16]
 800a33a:	f000 fba1 	bl	800aa80 <__hi0bits>
 800a33e:	f1c0 0020 	rsb	r0, r0, #32
 800a342:	9b05      	ldr	r3, [sp, #20]
 800a344:	4418      	add	r0, r3
 800a346:	f010 001f 	ands.w	r0, r0, #31
 800a34a:	f000 8093 	beq.w	800a474 <_dtoa_r+0x81c>
 800a34e:	f1c0 0220 	rsb	r2, r0, #32
 800a352:	2a04      	cmp	r2, #4
 800a354:	f340 8085 	ble.w	800a462 <_dtoa_r+0x80a>
 800a358:	9b04      	ldr	r3, [sp, #16]
 800a35a:	f1c0 001c 	rsb	r0, r0, #28
 800a35e:	4403      	add	r3, r0
 800a360:	9304      	str	r3, [sp, #16]
 800a362:	9b05      	ldr	r3, [sp, #20]
 800a364:	4480      	add	r8, r0
 800a366:	4403      	add	r3, r0
 800a368:	9305      	str	r3, [sp, #20]
 800a36a:	9b04      	ldr	r3, [sp, #16]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	dd05      	ble.n	800a37c <_dtoa_r+0x724>
 800a370:	4629      	mov	r1, r5
 800a372:	461a      	mov	r2, r3
 800a374:	4630      	mov	r0, r6
 800a376:	f000 fceb 	bl	800ad50 <__lshift>
 800a37a:	4605      	mov	r5, r0
 800a37c:	9b05      	ldr	r3, [sp, #20]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	dd05      	ble.n	800a38e <_dtoa_r+0x736>
 800a382:	4621      	mov	r1, r4
 800a384:	461a      	mov	r2, r3
 800a386:	4630      	mov	r0, r6
 800a388:	f000 fce2 	bl	800ad50 <__lshift>
 800a38c:	4604      	mov	r4, r0
 800a38e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a390:	2b00      	cmp	r3, #0
 800a392:	d071      	beq.n	800a478 <_dtoa_r+0x820>
 800a394:	4621      	mov	r1, r4
 800a396:	4628      	mov	r0, r5
 800a398:	f000 fd46 	bl	800ae28 <__mcmp>
 800a39c:	2800      	cmp	r0, #0
 800a39e:	da6b      	bge.n	800a478 <_dtoa_r+0x820>
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	4629      	mov	r1, r5
 800a3a4:	220a      	movs	r2, #10
 800a3a6:	4630      	mov	r0, r6
 800a3a8:	f000 fb24 	bl	800a9f4 <__multadd>
 800a3ac:	9b07      	ldr	r3, [sp, #28]
 800a3ae:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a3b2:	4605      	mov	r5, r0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	f000 8197 	beq.w	800a6e8 <_dtoa_r+0xa90>
 800a3ba:	4639      	mov	r1, r7
 800a3bc:	2300      	movs	r3, #0
 800a3be:	220a      	movs	r2, #10
 800a3c0:	4630      	mov	r0, r6
 800a3c2:	f000 fb17 	bl	800a9f4 <__multadd>
 800a3c6:	f1ba 0f00 	cmp.w	sl, #0
 800a3ca:	4607      	mov	r7, r0
 800a3cc:	f300 8093 	bgt.w	800a4f6 <_dtoa_r+0x89e>
 800a3d0:	9b06      	ldr	r3, [sp, #24]
 800a3d2:	2b02      	cmp	r3, #2
 800a3d4:	dc57      	bgt.n	800a486 <_dtoa_r+0x82e>
 800a3d6:	e08e      	b.n	800a4f6 <_dtoa_r+0x89e>
 800a3d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a3da:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a3de:	e751      	b.n	800a284 <_dtoa_r+0x62c>
 800a3e0:	f109 34ff 	add.w	r4, r9, #4294967295
 800a3e4:	42a3      	cmp	r3, r4
 800a3e6:	bfbf      	itttt	lt
 800a3e8:	1ae2      	sublt	r2, r4, r3
 800a3ea:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a3ec:	189b      	addlt	r3, r3, r2
 800a3ee:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a3f0:	bfae      	itee	ge
 800a3f2:	1b1c      	subge	r4, r3, r4
 800a3f4:	4623      	movlt	r3, r4
 800a3f6:	2400      	movlt	r4, #0
 800a3f8:	f1b9 0f00 	cmp.w	r9, #0
 800a3fc:	bfb5      	itete	lt
 800a3fe:	9a04      	ldrlt	r2, [sp, #16]
 800a400:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800a404:	eba2 0809 	sublt.w	r8, r2, r9
 800a408:	464a      	movge	r2, r9
 800a40a:	bfb8      	it	lt
 800a40c:	2200      	movlt	r2, #0
 800a40e:	e73c      	b.n	800a28a <_dtoa_r+0x632>
 800a410:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a414:	9f07      	ldr	r7, [sp, #28]
 800a416:	461c      	mov	r4, r3
 800a418:	e744      	b.n	800a2a4 <_dtoa_r+0x64c>
 800a41a:	461a      	mov	r2, r3
 800a41c:	e770      	b.n	800a300 <_dtoa_r+0x6a8>
 800a41e:	9b06      	ldr	r3, [sp, #24]
 800a420:	2b01      	cmp	r3, #1
 800a422:	dc18      	bgt.n	800a456 <_dtoa_r+0x7fe>
 800a424:	9b02      	ldr	r3, [sp, #8]
 800a426:	b9b3      	cbnz	r3, 800a456 <_dtoa_r+0x7fe>
 800a428:	9b03      	ldr	r3, [sp, #12]
 800a42a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a42e:	b9a2      	cbnz	r2, 800a45a <_dtoa_r+0x802>
 800a430:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a434:	0d12      	lsrs	r2, r2, #20
 800a436:	0512      	lsls	r2, r2, #20
 800a438:	b18a      	cbz	r2, 800a45e <_dtoa_r+0x806>
 800a43a:	9b04      	ldr	r3, [sp, #16]
 800a43c:	3301      	adds	r3, #1
 800a43e:	9304      	str	r3, [sp, #16]
 800a440:	9b05      	ldr	r3, [sp, #20]
 800a442:	3301      	adds	r3, #1
 800a444:	9305      	str	r3, [sp, #20]
 800a446:	2301      	movs	r3, #1
 800a448:	9309      	str	r3, [sp, #36]	; 0x24
 800a44a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	f47f af70 	bne.w	800a332 <_dtoa_r+0x6da>
 800a452:	2001      	movs	r0, #1
 800a454:	e775      	b.n	800a342 <_dtoa_r+0x6ea>
 800a456:	2300      	movs	r3, #0
 800a458:	e7f6      	b.n	800a448 <_dtoa_r+0x7f0>
 800a45a:	9b02      	ldr	r3, [sp, #8]
 800a45c:	e7f4      	b.n	800a448 <_dtoa_r+0x7f0>
 800a45e:	9209      	str	r2, [sp, #36]	; 0x24
 800a460:	e7f3      	b.n	800a44a <_dtoa_r+0x7f2>
 800a462:	d082      	beq.n	800a36a <_dtoa_r+0x712>
 800a464:	9b04      	ldr	r3, [sp, #16]
 800a466:	321c      	adds	r2, #28
 800a468:	4413      	add	r3, r2
 800a46a:	9304      	str	r3, [sp, #16]
 800a46c:	9b05      	ldr	r3, [sp, #20]
 800a46e:	4490      	add	r8, r2
 800a470:	4413      	add	r3, r2
 800a472:	e779      	b.n	800a368 <_dtoa_r+0x710>
 800a474:	4602      	mov	r2, r0
 800a476:	e7f5      	b.n	800a464 <_dtoa_r+0x80c>
 800a478:	f1b9 0f00 	cmp.w	r9, #0
 800a47c:	dc36      	bgt.n	800a4ec <_dtoa_r+0x894>
 800a47e:	9b06      	ldr	r3, [sp, #24]
 800a480:	2b02      	cmp	r3, #2
 800a482:	dd33      	ble.n	800a4ec <_dtoa_r+0x894>
 800a484:	46ca      	mov	sl, r9
 800a486:	f1ba 0f00 	cmp.w	sl, #0
 800a48a:	d10d      	bne.n	800a4a8 <_dtoa_r+0x850>
 800a48c:	4621      	mov	r1, r4
 800a48e:	4653      	mov	r3, sl
 800a490:	2205      	movs	r2, #5
 800a492:	4630      	mov	r0, r6
 800a494:	f000 faae 	bl	800a9f4 <__multadd>
 800a498:	4601      	mov	r1, r0
 800a49a:	4604      	mov	r4, r0
 800a49c:	4628      	mov	r0, r5
 800a49e:	f000 fcc3 	bl	800ae28 <__mcmp>
 800a4a2:	2800      	cmp	r0, #0
 800a4a4:	f73f ade4 	bgt.w	800a070 <_dtoa_r+0x418>
 800a4a8:	9b08      	ldr	r3, [sp, #32]
 800a4aa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a4ae:	ea6f 0b03 	mvn.w	fp, r3
 800a4b2:	f04f 0900 	mov.w	r9, #0
 800a4b6:	4621      	mov	r1, r4
 800a4b8:	4630      	mov	r0, r6
 800a4ba:	f000 fa79 	bl	800a9b0 <_Bfree>
 800a4be:	2f00      	cmp	r7, #0
 800a4c0:	f43f aea1 	beq.w	800a206 <_dtoa_r+0x5ae>
 800a4c4:	f1b9 0f00 	cmp.w	r9, #0
 800a4c8:	d005      	beq.n	800a4d6 <_dtoa_r+0x87e>
 800a4ca:	45b9      	cmp	r9, r7
 800a4cc:	d003      	beq.n	800a4d6 <_dtoa_r+0x87e>
 800a4ce:	4649      	mov	r1, r9
 800a4d0:	4630      	mov	r0, r6
 800a4d2:	f000 fa6d 	bl	800a9b0 <_Bfree>
 800a4d6:	4639      	mov	r1, r7
 800a4d8:	4630      	mov	r0, r6
 800a4da:	f000 fa69 	bl	800a9b0 <_Bfree>
 800a4de:	e692      	b.n	800a206 <_dtoa_r+0x5ae>
 800a4e0:	2400      	movs	r4, #0
 800a4e2:	4627      	mov	r7, r4
 800a4e4:	e7e0      	b.n	800a4a8 <_dtoa_r+0x850>
 800a4e6:	4693      	mov	fp, r2
 800a4e8:	4627      	mov	r7, r4
 800a4ea:	e5c1      	b.n	800a070 <_dtoa_r+0x418>
 800a4ec:	9b07      	ldr	r3, [sp, #28]
 800a4ee:	46ca      	mov	sl, r9
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	f000 8100 	beq.w	800a6f6 <_dtoa_r+0xa9e>
 800a4f6:	f1b8 0f00 	cmp.w	r8, #0
 800a4fa:	dd05      	ble.n	800a508 <_dtoa_r+0x8b0>
 800a4fc:	4639      	mov	r1, r7
 800a4fe:	4642      	mov	r2, r8
 800a500:	4630      	mov	r0, r6
 800a502:	f000 fc25 	bl	800ad50 <__lshift>
 800a506:	4607      	mov	r7, r0
 800a508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d05d      	beq.n	800a5ca <_dtoa_r+0x972>
 800a50e:	6879      	ldr	r1, [r7, #4]
 800a510:	4630      	mov	r0, r6
 800a512:	f000 fa0d 	bl	800a930 <_Balloc>
 800a516:	4680      	mov	r8, r0
 800a518:	b928      	cbnz	r0, 800a526 <_dtoa_r+0x8ce>
 800a51a:	4b82      	ldr	r3, [pc, #520]	; (800a724 <_dtoa_r+0xacc>)
 800a51c:	4602      	mov	r2, r0
 800a51e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a522:	f7ff bbb1 	b.w	8009c88 <_dtoa_r+0x30>
 800a526:	693a      	ldr	r2, [r7, #16]
 800a528:	3202      	adds	r2, #2
 800a52a:	0092      	lsls	r2, r2, #2
 800a52c:	f107 010c 	add.w	r1, r7, #12
 800a530:	300c      	adds	r0, #12
 800a532:	f7ff fafa 	bl	8009b2a <memcpy>
 800a536:	2201      	movs	r2, #1
 800a538:	4641      	mov	r1, r8
 800a53a:	4630      	mov	r0, r6
 800a53c:	f000 fc08 	bl	800ad50 <__lshift>
 800a540:	9b01      	ldr	r3, [sp, #4]
 800a542:	3301      	adds	r3, #1
 800a544:	9304      	str	r3, [sp, #16]
 800a546:	9b01      	ldr	r3, [sp, #4]
 800a548:	4453      	add	r3, sl
 800a54a:	9308      	str	r3, [sp, #32]
 800a54c:	9b02      	ldr	r3, [sp, #8]
 800a54e:	f003 0301 	and.w	r3, r3, #1
 800a552:	46b9      	mov	r9, r7
 800a554:	9307      	str	r3, [sp, #28]
 800a556:	4607      	mov	r7, r0
 800a558:	9b04      	ldr	r3, [sp, #16]
 800a55a:	4621      	mov	r1, r4
 800a55c:	3b01      	subs	r3, #1
 800a55e:	4628      	mov	r0, r5
 800a560:	9302      	str	r3, [sp, #8]
 800a562:	f7ff faf0 	bl	8009b46 <quorem>
 800a566:	4603      	mov	r3, r0
 800a568:	3330      	adds	r3, #48	; 0x30
 800a56a:	9005      	str	r0, [sp, #20]
 800a56c:	4649      	mov	r1, r9
 800a56e:	4628      	mov	r0, r5
 800a570:	9309      	str	r3, [sp, #36]	; 0x24
 800a572:	f000 fc59 	bl	800ae28 <__mcmp>
 800a576:	463a      	mov	r2, r7
 800a578:	4682      	mov	sl, r0
 800a57a:	4621      	mov	r1, r4
 800a57c:	4630      	mov	r0, r6
 800a57e:	f000 fc6f 	bl	800ae60 <__mdiff>
 800a582:	68c2      	ldr	r2, [r0, #12]
 800a584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a586:	4680      	mov	r8, r0
 800a588:	bb0a      	cbnz	r2, 800a5ce <_dtoa_r+0x976>
 800a58a:	4601      	mov	r1, r0
 800a58c:	4628      	mov	r0, r5
 800a58e:	f000 fc4b 	bl	800ae28 <__mcmp>
 800a592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a594:	4602      	mov	r2, r0
 800a596:	4641      	mov	r1, r8
 800a598:	4630      	mov	r0, r6
 800a59a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800a59e:	f000 fa07 	bl	800a9b0 <_Bfree>
 800a5a2:	9b06      	ldr	r3, [sp, #24]
 800a5a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5a6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a5aa:	ea43 0102 	orr.w	r1, r3, r2
 800a5ae:	9b07      	ldr	r3, [sp, #28]
 800a5b0:	4319      	orrs	r1, r3
 800a5b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5b4:	d10d      	bne.n	800a5d2 <_dtoa_r+0x97a>
 800a5b6:	2b39      	cmp	r3, #57	; 0x39
 800a5b8:	d029      	beq.n	800a60e <_dtoa_r+0x9b6>
 800a5ba:	f1ba 0f00 	cmp.w	sl, #0
 800a5be:	dd01      	ble.n	800a5c4 <_dtoa_r+0x96c>
 800a5c0:	9b05      	ldr	r3, [sp, #20]
 800a5c2:	3331      	adds	r3, #49	; 0x31
 800a5c4:	9a02      	ldr	r2, [sp, #8]
 800a5c6:	7013      	strb	r3, [r2, #0]
 800a5c8:	e775      	b.n	800a4b6 <_dtoa_r+0x85e>
 800a5ca:	4638      	mov	r0, r7
 800a5cc:	e7b8      	b.n	800a540 <_dtoa_r+0x8e8>
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	e7e1      	b.n	800a596 <_dtoa_r+0x93e>
 800a5d2:	f1ba 0f00 	cmp.w	sl, #0
 800a5d6:	db06      	blt.n	800a5e6 <_dtoa_r+0x98e>
 800a5d8:	9906      	ldr	r1, [sp, #24]
 800a5da:	ea41 0a0a 	orr.w	sl, r1, sl
 800a5de:	9907      	ldr	r1, [sp, #28]
 800a5e0:	ea5a 0a01 	orrs.w	sl, sl, r1
 800a5e4:	d120      	bne.n	800a628 <_dtoa_r+0x9d0>
 800a5e6:	2a00      	cmp	r2, #0
 800a5e8:	ddec      	ble.n	800a5c4 <_dtoa_r+0x96c>
 800a5ea:	4629      	mov	r1, r5
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	4630      	mov	r0, r6
 800a5f0:	9304      	str	r3, [sp, #16]
 800a5f2:	f000 fbad 	bl	800ad50 <__lshift>
 800a5f6:	4621      	mov	r1, r4
 800a5f8:	4605      	mov	r5, r0
 800a5fa:	f000 fc15 	bl	800ae28 <__mcmp>
 800a5fe:	2800      	cmp	r0, #0
 800a600:	9b04      	ldr	r3, [sp, #16]
 800a602:	dc02      	bgt.n	800a60a <_dtoa_r+0x9b2>
 800a604:	d1de      	bne.n	800a5c4 <_dtoa_r+0x96c>
 800a606:	07da      	lsls	r2, r3, #31
 800a608:	d5dc      	bpl.n	800a5c4 <_dtoa_r+0x96c>
 800a60a:	2b39      	cmp	r3, #57	; 0x39
 800a60c:	d1d8      	bne.n	800a5c0 <_dtoa_r+0x968>
 800a60e:	9a02      	ldr	r2, [sp, #8]
 800a610:	2339      	movs	r3, #57	; 0x39
 800a612:	7013      	strb	r3, [r2, #0]
 800a614:	4643      	mov	r3, r8
 800a616:	4698      	mov	r8, r3
 800a618:	3b01      	subs	r3, #1
 800a61a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a61e:	2a39      	cmp	r2, #57	; 0x39
 800a620:	d051      	beq.n	800a6c6 <_dtoa_r+0xa6e>
 800a622:	3201      	adds	r2, #1
 800a624:	701a      	strb	r2, [r3, #0]
 800a626:	e746      	b.n	800a4b6 <_dtoa_r+0x85e>
 800a628:	2a00      	cmp	r2, #0
 800a62a:	dd03      	ble.n	800a634 <_dtoa_r+0x9dc>
 800a62c:	2b39      	cmp	r3, #57	; 0x39
 800a62e:	d0ee      	beq.n	800a60e <_dtoa_r+0x9b6>
 800a630:	3301      	adds	r3, #1
 800a632:	e7c7      	b.n	800a5c4 <_dtoa_r+0x96c>
 800a634:	9a04      	ldr	r2, [sp, #16]
 800a636:	9908      	ldr	r1, [sp, #32]
 800a638:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a63c:	428a      	cmp	r2, r1
 800a63e:	d02b      	beq.n	800a698 <_dtoa_r+0xa40>
 800a640:	4629      	mov	r1, r5
 800a642:	2300      	movs	r3, #0
 800a644:	220a      	movs	r2, #10
 800a646:	4630      	mov	r0, r6
 800a648:	f000 f9d4 	bl	800a9f4 <__multadd>
 800a64c:	45b9      	cmp	r9, r7
 800a64e:	4605      	mov	r5, r0
 800a650:	f04f 0300 	mov.w	r3, #0
 800a654:	f04f 020a 	mov.w	r2, #10
 800a658:	4649      	mov	r1, r9
 800a65a:	4630      	mov	r0, r6
 800a65c:	d107      	bne.n	800a66e <_dtoa_r+0xa16>
 800a65e:	f000 f9c9 	bl	800a9f4 <__multadd>
 800a662:	4681      	mov	r9, r0
 800a664:	4607      	mov	r7, r0
 800a666:	9b04      	ldr	r3, [sp, #16]
 800a668:	3301      	adds	r3, #1
 800a66a:	9304      	str	r3, [sp, #16]
 800a66c:	e774      	b.n	800a558 <_dtoa_r+0x900>
 800a66e:	f000 f9c1 	bl	800a9f4 <__multadd>
 800a672:	4639      	mov	r1, r7
 800a674:	4681      	mov	r9, r0
 800a676:	2300      	movs	r3, #0
 800a678:	220a      	movs	r2, #10
 800a67a:	4630      	mov	r0, r6
 800a67c:	f000 f9ba 	bl	800a9f4 <__multadd>
 800a680:	4607      	mov	r7, r0
 800a682:	e7f0      	b.n	800a666 <_dtoa_r+0xa0e>
 800a684:	f1ba 0f00 	cmp.w	sl, #0
 800a688:	9a01      	ldr	r2, [sp, #4]
 800a68a:	bfcc      	ite	gt
 800a68c:	46d0      	movgt	r8, sl
 800a68e:	f04f 0801 	movle.w	r8, #1
 800a692:	4490      	add	r8, r2
 800a694:	f04f 0900 	mov.w	r9, #0
 800a698:	4629      	mov	r1, r5
 800a69a:	2201      	movs	r2, #1
 800a69c:	4630      	mov	r0, r6
 800a69e:	9302      	str	r3, [sp, #8]
 800a6a0:	f000 fb56 	bl	800ad50 <__lshift>
 800a6a4:	4621      	mov	r1, r4
 800a6a6:	4605      	mov	r5, r0
 800a6a8:	f000 fbbe 	bl	800ae28 <__mcmp>
 800a6ac:	2800      	cmp	r0, #0
 800a6ae:	dcb1      	bgt.n	800a614 <_dtoa_r+0x9bc>
 800a6b0:	d102      	bne.n	800a6b8 <_dtoa_r+0xa60>
 800a6b2:	9b02      	ldr	r3, [sp, #8]
 800a6b4:	07db      	lsls	r3, r3, #31
 800a6b6:	d4ad      	bmi.n	800a614 <_dtoa_r+0x9bc>
 800a6b8:	4643      	mov	r3, r8
 800a6ba:	4698      	mov	r8, r3
 800a6bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6c0:	2a30      	cmp	r2, #48	; 0x30
 800a6c2:	d0fa      	beq.n	800a6ba <_dtoa_r+0xa62>
 800a6c4:	e6f7      	b.n	800a4b6 <_dtoa_r+0x85e>
 800a6c6:	9a01      	ldr	r2, [sp, #4]
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d1a4      	bne.n	800a616 <_dtoa_r+0x9be>
 800a6cc:	f10b 0b01 	add.w	fp, fp, #1
 800a6d0:	2331      	movs	r3, #49	; 0x31
 800a6d2:	e778      	b.n	800a5c6 <_dtoa_r+0x96e>
 800a6d4:	4b14      	ldr	r3, [pc, #80]	; (800a728 <_dtoa_r+0xad0>)
 800a6d6:	f7ff bb2a 	b.w	8009d2e <_dtoa_r+0xd6>
 800a6da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	f47f ab05 	bne.w	8009cec <_dtoa_r+0x94>
 800a6e2:	4b12      	ldr	r3, [pc, #72]	; (800a72c <_dtoa_r+0xad4>)
 800a6e4:	f7ff bb23 	b.w	8009d2e <_dtoa_r+0xd6>
 800a6e8:	f1ba 0f00 	cmp.w	sl, #0
 800a6ec:	dc03      	bgt.n	800a6f6 <_dtoa_r+0xa9e>
 800a6ee:	9b06      	ldr	r3, [sp, #24]
 800a6f0:	2b02      	cmp	r3, #2
 800a6f2:	f73f aec8 	bgt.w	800a486 <_dtoa_r+0x82e>
 800a6f6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a6fa:	4621      	mov	r1, r4
 800a6fc:	4628      	mov	r0, r5
 800a6fe:	f7ff fa22 	bl	8009b46 <quorem>
 800a702:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a706:	f808 3b01 	strb.w	r3, [r8], #1
 800a70a:	9a01      	ldr	r2, [sp, #4]
 800a70c:	eba8 0202 	sub.w	r2, r8, r2
 800a710:	4592      	cmp	sl, r2
 800a712:	ddb7      	ble.n	800a684 <_dtoa_r+0xa2c>
 800a714:	4629      	mov	r1, r5
 800a716:	2300      	movs	r3, #0
 800a718:	220a      	movs	r2, #10
 800a71a:	4630      	mov	r0, r6
 800a71c:	f000 f96a 	bl	800a9f4 <__multadd>
 800a720:	4605      	mov	r5, r0
 800a722:	e7ea      	b.n	800a6fa <_dtoa_r+0xaa2>
 800a724:	0800c934 	.word	0x0800c934
 800a728:	0800c894 	.word	0x0800c894
 800a72c:	0800c8b8 	.word	0x0800c8b8

0800a730 <_free_r>:
 800a730:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a732:	2900      	cmp	r1, #0
 800a734:	d044      	beq.n	800a7c0 <_free_r+0x90>
 800a736:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a73a:	9001      	str	r0, [sp, #4]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	f1a1 0404 	sub.w	r4, r1, #4
 800a742:	bfb8      	it	lt
 800a744:	18e4      	addlt	r4, r4, r3
 800a746:	f000 f8e7 	bl	800a918 <__malloc_lock>
 800a74a:	4a1e      	ldr	r2, [pc, #120]	; (800a7c4 <_free_r+0x94>)
 800a74c:	9801      	ldr	r0, [sp, #4]
 800a74e:	6813      	ldr	r3, [r2, #0]
 800a750:	b933      	cbnz	r3, 800a760 <_free_r+0x30>
 800a752:	6063      	str	r3, [r4, #4]
 800a754:	6014      	str	r4, [r2, #0]
 800a756:	b003      	add	sp, #12
 800a758:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a75c:	f000 b8e2 	b.w	800a924 <__malloc_unlock>
 800a760:	42a3      	cmp	r3, r4
 800a762:	d908      	bls.n	800a776 <_free_r+0x46>
 800a764:	6825      	ldr	r5, [r4, #0]
 800a766:	1961      	adds	r1, r4, r5
 800a768:	428b      	cmp	r3, r1
 800a76a:	bf01      	itttt	eq
 800a76c:	6819      	ldreq	r1, [r3, #0]
 800a76e:	685b      	ldreq	r3, [r3, #4]
 800a770:	1949      	addeq	r1, r1, r5
 800a772:	6021      	streq	r1, [r4, #0]
 800a774:	e7ed      	b.n	800a752 <_free_r+0x22>
 800a776:	461a      	mov	r2, r3
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	b10b      	cbz	r3, 800a780 <_free_r+0x50>
 800a77c:	42a3      	cmp	r3, r4
 800a77e:	d9fa      	bls.n	800a776 <_free_r+0x46>
 800a780:	6811      	ldr	r1, [r2, #0]
 800a782:	1855      	adds	r5, r2, r1
 800a784:	42a5      	cmp	r5, r4
 800a786:	d10b      	bne.n	800a7a0 <_free_r+0x70>
 800a788:	6824      	ldr	r4, [r4, #0]
 800a78a:	4421      	add	r1, r4
 800a78c:	1854      	adds	r4, r2, r1
 800a78e:	42a3      	cmp	r3, r4
 800a790:	6011      	str	r1, [r2, #0]
 800a792:	d1e0      	bne.n	800a756 <_free_r+0x26>
 800a794:	681c      	ldr	r4, [r3, #0]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	6053      	str	r3, [r2, #4]
 800a79a:	440c      	add	r4, r1
 800a79c:	6014      	str	r4, [r2, #0]
 800a79e:	e7da      	b.n	800a756 <_free_r+0x26>
 800a7a0:	d902      	bls.n	800a7a8 <_free_r+0x78>
 800a7a2:	230c      	movs	r3, #12
 800a7a4:	6003      	str	r3, [r0, #0]
 800a7a6:	e7d6      	b.n	800a756 <_free_r+0x26>
 800a7a8:	6825      	ldr	r5, [r4, #0]
 800a7aa:	1961      	adds	r1, r4, r5
 800a7ac:	428b      	cmp	r3, r1
 800a7ae:	bf04      	itt	eq
 800a7b0:	6819      	ldreq	r1, [r3, #0]
 800a7b2:	685b      	ldreq	r3, [r3, #4]
 800a7b4:	6063      	str	r3, [r4, #4]
 800a7b6:	bf04      	itt	eq
 800a7b8:	1949      	addeq	r1, r1, r5
 800a7ba:	6021      	streq	r1, [r4, #0]
 800a7bc:	6054      	str	r4, [r2, #4]
 800a7be:	e7ca      	b.n	800a756 <_free_r+0x26>
 800a7c0:	b003      	add	sp, #12
 800a7c2:	bd30      	pop	{r4, r5, pc}
 800a7c4:	240008b8 	.word	0x240008b8

0800a7c8 <malloc>:
 800a7c8:	4b02      	ldr	r3, [pc, #8]	; (800a7d4 <malloc+0xc>)
 800a7ca:	4601      	mov	r1, r0
 800a7cc:	6818      	ldr	r0, [r3, #0]
 800a7ce:	f000 b823 	b.w	800a818 <_malloc_r>
 800a7d2:	bf00      	nop
 800a7d4:	24000070 	.word	0x24000070

0800a7d8 <sbrk_aligned>:
 800a7d8:	b570      	push	{r4, r5, r6, lr}
 800a7da:	4e0e      	ldr	r6, [pc, #56]	; (800a814 <sbrk_aligned+0x3c>)
 800a7dc:	460c      	mov	r4, r1
 800a7de:	6831      	ldr	r1, [r6, #0]
 800a7e0:	4605      	mov	r5, r0
 800a7e2:	b911      	cbnz	r1, 800a7ea <sbrk_aligned+0x12>
 800a7e4:	f000 fe26 	bl	800b434 <_sbrk_r>
 800a7e8:	6030      	str	r0, [r6, #0]
 800a7ea:	4621      	mov	r1, r4
 800a7ec:	4628      	mov	r0, r5
 800a7ee:	f000 fe21 	bl	800b434 <_sbrk_r>
 800a7f2:	1c43      	adds	r3, r0, #1
 800a7f4:	d00a      	beq.n	800a80c <sbrk_aligned+0x34>
 800a7f6:	1cc4      	adds	r4, r0, #3
 800a7f8:	f024 0403 	bic.w	r4, r4, #3
 800a7fc:	42a0      	cmp	r0, r4
 800a7fe:	d007      	beq.n	800a810 <sbrk_aligned+0x38>
 800a800:	1a21      	subs	r1, r4, r0
 800a802:	4628      	mov	r0, r5
 800a804:	f000 fe16 	bl	800b434 <_sbrk_r>
 800a808:	3001      	adds	r0, #1
 800a80a:	d101      	bne.n	800a810 <sbrk_aligned+0x38>
 800a80c:	f04f 34ff 	mov.w	r4, #4294967295
 800a810:	4620      	mov	r0, r4
 800a812:	bd70      	pop	{r4, r5, r6, pc}
 800a814:	240008bc 	.word	0x240008bc

0800a818 <_malloc_r>:
 800a818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a81c:	1ccd      	adds	r5, r1, #3
 800a81e:	f025 0503 	bic.w	r5, r5, #3
 800a822:	3508      	adds	r5, #8
 800a824:	2d0c      	cmp	r5, #12
 800a826:	bf38      	it	cc
 800a828:	250c      	movcc	r5, #12
 800a82a:	2d00      	cmp	r5, #0
 800a82c:	4607      	mov	r7, r0
 800a82e:	db01      	blt.n	800a834 <_malloc_r+0x1c>
 800a830:	42a9      	cmp	r1, r5
 800a832:	d905      	bls.n	800a840 <_malloc_r+0x28>
 800a834:	230c      	movs	r3, #12
 800a836:	603b      	str	r3, [r7, #0]
 800a838:	2600      	movs	r6, #0
 800a83a:	4630      	mov	r0, r6
 800a83c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a840:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a914 <_malloc_r+0xfc>
 800a844:	f000 f868 	bl	800a918 <__malloc_lock>
 800a848:	f8d8 3000 	ldr.w	r3, [r8]
 800a84c:	461c      	mov	r4, r3
 800a84e:	bb5c      	cbnz	r4, 800a8a8 <_malloc_r+0x90>
 800a850:	4629      	mov	r1, r5
 800a852:	4638      	mov	r0, r7
 800a854:	f7ff ffc0 	bl	800a7d8 <sbrk_aligned>
 800a858:	1c43      	adds	r3, r0, #1
 800a85a:	4604      	mov	r4, r0
 800a85c:	d155      	bne.n	800a90a <_malloc_r+0xf2>
 800a85e:	f8d8 4000 	ldr.w	r4, [r8]
 800a862:	4626      	mov	r6, r4
 800a864:	2e00      	cmp	r6, #0
 800a866:	d145      	bne.n	800a8f4 <_malloc_r+0xdc>
 800a868:	2c00      	cmp	r4, #0
 800a86a:	d048      	beq.n	800a8fe <_malloc_r+0xe6>
 800a86c:	6823      	ldr	r3, [r4, #0]
 800a86e:	4631      	mov	r1, r6
 800a870:	4638      	mov	r0, r7
 800a872:	eb04 0903 	add.w	r9, r4, r3
 800a876:	f000 fddd 	bl	800b434 <_sbrk_r>
 800a87a:	4581      	cmp	r9, r0
 800a87c:	d13f      	bne.n	800a8fe <_malloc_r+0xe6>
 800a87e:	6821      	ldr	r1, [r4, #0]
 800a880:	1a6d      	subs	r5, r5, r1
 800a882:	4629      	mov	r1, r5
 800a884:	4638      	mov	r0, r7
 800a886:	f7ff ffa7 	bl	800a7d8 <sbrk_aligned>
 800a88a:	3001      	adds	r0, #1
 800a88c:	d037      	beq.n	800a8fe <_malloc_r+0xe6>
 800a88e:	6823      	ldr	r3, [r4, #0]
 800a890:	442b      	add	r3, r5
 800a892:	6023      	str	r3, [r4, #0]
 800a894:	f8d8 3000 	ldr.w	r3, [r8]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d038      	beq.n	800a90e <_malloc_r+0xf6>
 800a89c:	685a      	ldr	r2, [r3, #4]
 800a89e:	42a2      	cmp	r2, r4
 800a8a0:	d12b      	bne.n	800a8fa <_malloc_r+0xe2>
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	605a      	str	r2, [r3, #4]
 800a8a6:	e00f      	b.n	800a8c8 <_malloc_r+0xb0>
 800a8a8:	6822      	ldr	r2, [r4, #0]
 800a8aa:	1b52      	subs	r2, r2, r5
 800a8ac:	d41f      	bmi.n	800a8ee <_malloc_r+0xd6>
 800a8ae:	2a0b      	cmp	r2, #11
 800a8b0:	d917      	bls.n	800a8e2 <_malloc_r+0xca>
 800a8b2:	1961      	adds	r1, r4, r5
 800a8b4:	42a3      	cmp	r3, r4
 800a8b6:	6025      	str	r5, [r4, #0]
 800a8b8:	bf18      	it	ne
 800a8ba:	6059      	strne	r1, [r3, #4]
 800a8bc:	6863      	ldr	r3, [r4, #4]
 800a8be:	bf08      	it	eq
 800a8c0:	f8c8 1000 	streq.w	r1, [r8]
 800a8c4:	5162      	str	r2, [r4, r5]
 800a8c6:	604b      	str	r3, [r1, #4]
 800a8c8:	4638      	mov	r0, r7
 800a8ca:	f104 060b 	add.w	r6, r4, #11
 800a8ce:	f000 f829 	bl	800a924 <__malloc_unlock>
 800a8d2:	f026 0607 	bic.w	r6, r6, #7
 800a8d6:	1d23      	adds	r3, r4, #4
 800a8d8:	1af2      	subs	r2, r6, r3
 800a8da:	d0ae      	beq.n	800a83a <_malloc_r+0x22>
 800a8dc:	1b9b      	subs	r3, r3, r6
 800a8de:	50a3      	str	r3, [r4, r2]
 800a8e0:	e7ab      	b.n	800a83a <_malloc_r+0x22>
 800a8e2:	42a3      	cmp	r3, r4
 800a8e4:	6862      	ldr	r2, [r4, #4]
 800a8e6:	d1dd      	bne.n	800a8a4 <_malloc_r+0x8c>
 800a8e8:	f8c8 2000 	str.w	r2, [r8]
 800a8ec:	e7ec      	b.n	800a8c8 <_malloc_r+0xb0>
 800a8ee:	4623      	mov	r3, r4
 800a8f0:	6864      	ldr	r4, [r4, #4]
 800a8f2:	e7ac      	b.n	800a84e <_malloc_r+0x36>
 800a8f4:	4634      	mov	r4, r6
 800a8f6:	6876      	ldr	r6, [r6, #4]
 800a8f8:	e7b4      	b.n	800a864 <_malloc_r+0x4c>
 800a8fa:	4613      	mov	r3, r2
 800a8fc:	e7cc      	b.n	800a898 <_malloc_r+0x80>
 800a8fe:	230c      	movs	r3, #12
 800a900:	603b      	str	r3, [r7, #0]
 800a902:	4638      	mov	r0, r7
 800a904:	f000 f80e 	bl	800a924 <__malloc_unlock>
 800a908:	e797      	b.n	800a83a <_malloc_r+0x22>
 800a90a:	6025      	str	r5, [r4, #0]
 800a90c:	e7dc      	b.n	800a8c8 <_malloc_r+0xb0>
 800a90e:	605b      	str	r3, [r3, #4]
 800a910:	deff      	udf	#255	; 0xff
 800a912:	bf00      	nop
 800a914:	240008b8 	.word	0x240008b8

0800a918 <__malloc_lock>:
 800a918:	4801      	ldr	r0, [pc, #4]	; (800a920 <__malloc_lock+0x8>)
 800a91a:	f7ff b904 	b.w	8009b26 <__retarget_lock_acquire_recursive>
 800a91e:	bf00      	nop
 800a920:	240008b4 	.word	0x240008b4

0800a924 <__malloc_unlock>:
 800a924:	4801      	ldr	r0, [pc, #4]	; (800a92c <__malloc_unlock+0x8>)
 800a926:	f7ff b8ff 	b.w	8009b28 <__retarget_lock_release_recursive>
 800a92a:	bf00      	nop
 800a92c:	240008b4 	.word	0x240008b4

0800a930 <_Balloc>:
 800a930:	b570      	push	{r4, r5, r6, lr}
 800a932:	69c6      	ldr	r6, [r0, #28]
 800a934:	4604      	mov	r4, r0
 800a936:	460d      	mov	r5, r1
 800a938:	b976      	cbnz	r6, 800a958 <_Balloc+0x28>
 800a93a:	2010      	movs	r0, #16
 800a93c:	f7ff ff44 	bl	800a7c8 <malloc>
 800a940:	4602      	mov	r2, r0
 800a942:	61e0      	str	r0, [r4, #28]
 800a944:	b920      	cbnz	r0, 800a950 <_Balloc+0x20>
 800a946:	4b18      	ldr	r3, [pc, #96]	; (800a9a8 <_Balloc+0x78>)
 800a948:	4818      	ldr	r0, [pc, #96]	; (800a9ac <_Balloc+0x7c>)
 800a94a:	216b      	movs	r1, #107	; 0x6b
 800a94c:	f000 fd82 	bl	800b454 <__assert_func>
 800a950:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a954:	6006      	str	r6, [r0, #0]
 800a956:	60c6      	str	r6, [r0, #12]
 800a958:	69e6      	ldr	r6, [r4, #28]
 800a95a:	68f3      	ldr	r3, [r6, #12]
 800a95c:	b183      	cbz	r3, 800a980 <_Balloc+0x50>
 800a95e:	69e3      	ldr	r3, [r4, #28]
 800a960:	68db      	ldr	r3, [r3, #12]
 800a962:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a966:	b9b8      	cbnz	r0, 800a998 <_Balloc+0x68>
 800a968:	2101      	movs	r1, #1
 800a96a:	fa01 f605 	lsl.w	r6, r1, r5
 800a96e:	1d72      	adds	r2, r6, #5
 800a970:	0092      	lsls	r2, r2, #2
 800a972:	4620      	mov	r0, r4
 800a974:	f000 fd8c 	bl	800b490 <_calloc_r>
 800a978:	b160      	cbz	r0, 800a994 <_Balloc+0x64>
 800a97a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a97e:	e00e      	b.n	800a99e <_Balloc+0x6e>
 800a980:	2221      	movs	r2, #33	; 0x21
 800a982:	2104      	movs	r1, #4
 800a984:	4620      	mov	r0, r4
 800a986:	f000 fd83 	bl	800b490 <_calloc_r>
 800a98a:	69e3      	ldr	r3, [r4, #28]
 800a98c:	60f0      	str	r0, [r6, #12]
 800a98e:	68db      	ldr	r3, [r3, #12]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d1e4      	bne.n	800a95e <_Balloc+0x2e>
 800a994:	2000      	movs	r0, #0
 800a996:	bd70      	pop	{r4, r5, r6, pc}
 800a998:	6802      	ldr	r2, [r0, #0]
 800a99a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a99e:	2300      	movs	r3, #0
 800a9a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a9a4:	e7f7      	b.n	800a996 <_Balloc+0x66>
 800a9a6:	bf00      	nop
 800a9a8:	0800c8c5 	.word	0x0800c8c5
 800a9ac:	0800c945 	.word	0x0800c945

0800a9b0 <_Bfree>:
 800a9b0:	b570      	push	{r4, r5, r6, lr}
 800a9b2:	69c6      	ldr	r6, [r0, #28]
 800a9b4:	4605      	mov	r5, r0
 800a9b6:	460c      	mov	r4, r1
 800a9b8:	b976      	cbnz	r6, 800a9d8 <_Bfree+0x28>
 800a9ba:	2010      	movs	r0, #16
 800a9bc:	f7ff ff04 	bl	800a7c8 <malloc>
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	61e8      	str	r0, [r5, #28]
 800a9c4:	b920      	cbnz	r0, 800a9d0 <_Bfree+0x20>
 800a9c6:	4b09      	ldr	r3, [pc, #36]	; (800a9ec <_Bfree+0x3c>)
 800a9c8:	4809      	ldr	r0, [pc, #36]	; (800a9f0 <_Bfree+0x40>)
 800a9ca:	218f      	movs	r1, #143	; 0x8f
 800a9cc:	f000 fd42 	bl	800b454 <__assert_func>
 800a9d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a9d4:	6006      	str	r6, [r0, #0]
 800a9d6:	60c6      	str	r6, [r0, #12]
 800a9d8:	b13c      	cbz	r4, 800a9ea <_Bfree+0x3a>
 800a9da:	69eb      	ldr	r3, [r5, #28]
 800a9dc:	6862      	ldr	r2, [r4, #4]
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a9e4:	6021      	str	r1, [r4, #0]
 800a9e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a9ea:	bd70      	pop	{r4, r5, r6, pc}
 800a9ec:	0800c8c5 	.word	0x0800c8c5
 800a9f0:	0800c945 	.word	0x0800c945

0800a9f4 <__multadd>:
 800a9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9f8:	690d      	ldr	r5, [r1, #16]
 800a9fa:	4607      	mov	r7, r0
 800a9fc:	460c      	mov	r4, r1
 800a9fe:	461e      	mov	r6, r3
 800aa00:	f101 0c14 	add.w	ip, r1, #20
 800aa04:	2000      	movs	r0, #0
 800aa06:	f8dc 3000 	ldr.w	r3, [ip]
 800aa0a:	b299      	uxth	r1, r3
 800aa0c:	fb02 6101 	mla	r1, r2, r1, r6
 800aa10:	0c1e      	lsrs	r6, r3, #16
 800aa12:	0c0b      	lsrs	r3, r1, #16
 800aa14:	fb02 3306 	mla	r3, r2, r6, r3
 800aa18:	b289      	uxth	r1, r1
 800aa1a:	3001      	adds	r0, #1
 800aa1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aa20:	4285      	cmp	r5, r0
 800aa22:	f84c 1b04 	str.w	r1, [ip], #4
 800aa26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aa2a:	dcec      	bgt.n	800aa06 <__multadd+0x12>
 800aa2c:	b30e      	cbz	r6, 800aa72 <__multadd+0x7e>
 800aa2e:	68a3      	ldr	r3, [r4, #8]
 800aa30:	42ab      	cmp	r3, r5
 800aa32:	dc19      	bgt.n	800aa68 <__multadd+0x74>
 800aa34:	6861      	ldr	r1, [r4, #4]
 800aa36:	4638      	mov	r0, r7
 800aa38:	3101      	adds	r1, #1
 800aa3a:	f7ff ff79 	bl	800a930 <_Balloc>
 800aa3e:	4680      	mov	r8, r0
 800aa40:	b928      	cbnz	r0, 800aa4e <__multadd+0x5a>
 800aa42:	4602      	mov	r2, r0
 800aa44:	4b0c      	ldr	r3, [pc, #48]	; (800aa78 <__multadd+0x84>)
 800aa46:	480d      	ldr	r0, [pc, #52]	; (800aa7c <__multadd+0x88>)
 800aa48:	21ba      	movs	r1, #186	; 0xba
 800aa4a:	f000 fd03 	bl	800b454 <__assert_func>
 800aa4e:	6922      	ldr	r2, [r4, #16]
 800aa50:	3202      	adds	r2, #2
 800aa52:	f104 010c 	add.w	r1, r4, #12
 800aa56:	0092      	lsls	r2, r2, #2
 800aa58:	300c      	adds	r0, #12
 800aa5a:	f7ff f866 	bl	8009b2a <memcpy>
 800aa5e:	4621      	mov	r1, r4
 800aa60:	4638      	mov	r0, r7
 800aa62:	f7ff ffa5 	bl	800a9b0 <_Bfree>
 800aa66:	4644      	mov	r4, r8
 800aa68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aa6c:	3501      	adds	r5, #1
 800aa6e:	615e      	str	r6, [r3, #20]
 800aa70:	6125      	str	r5, [r4, #16]
 800aa72:	4620      	mov	r0, r4
 800aa74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa78:	0800c934 	.word	0x0800c934
 800aa7c:	0800c945 	.word	0x0800c945

0800aa80 <__hi0bits>:
 800aa80:	0c03      	lsrs	r3, r0, #16
 800aa82:	041b      	lsls	r3, r3, #16
 800aa84:	b9d3      	cbnz	r3, 800aabc <__hi0bits+0x3c>
 800aa86:	0400      	lsls	r0, r0, #16
 800aa88:	2310      	movs	r3, #16
 800aa8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800aa8e:	bf04      	itt	eq
 800aa90:	0200      	lsleq	r0, r0, #8
 800aa92:	3308      	addeq	r3, #8
 800aa94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800aa98:	bf04      	itt	eq
 800aa9a:	0100      	lsleq	r0, r0, #4
 800aa9c:	3304      	addeq	r3, #4
 800aa9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800aaa2:	bf04      	itt	eq
 800aaa4:	0080      	lsleq	r0, r0, #2
 800aaa6:	3302      	addeq	r3, #2
 800aaa8:	2800      	cmp	r0, #0
 800aaaa:	db05      	blt.n	800aab8 <__hi0bits+0x38>
 800aaac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800aab0:	f103 0301 	add.w	r3, r3, #1
 800aab4:	bf08      	it	eq
 800aab6:	2320      	moveq	r3, #32
 800aab8:	4618      	mov	r0, r3
 800aaba:	4770      	bx	lr
 800aabc:	2300      	movs	r3, #0
 800aabe:	e7e4      	b.n	800aa8a <__hi0bits+0xa>

0800aac0 <__lo0bits>:
 800aac0:	6803      	ldr	r3, [r0, #0]
 800aac2:	f013 0207 	ands.w	r2, r3, #7
 800aac6:	d00c      	beq.n	800aae2 <__lo0bits+0x22>
 800aac8:	07d9      	lsls	r1, r3, #31
 800aaca:	d422      	bmi.n	800ab12 <__lo0bits+0x52>
 800aacc:	079a      	lsls	r2, r3, #30
 800aace:	bf49      	itett	mi
 800aad0:	085b      	lsrmi	r3, r3, #1
 800aad2:	089b      	lsrpl	r3, r3, #2
 800aad4:	6003      	strmi	r3, [r0, #0]
 800aad6:	2201      	movmi	r2, #1
 800aad8:	bf5c      	itt	pl
 800aada:	6003      	strpl	r3, [r0, #0]
 800aadc:	2202      	movpl	r2, #2
 800aade:	4610      	mov	r0, r2
 800aae0:	4770      	bx	lr
 800aae2:	b299      	uxth	r1, r3
 800aae4:	b909      	cbnz	r1, 800aaea <__lo0bits+0x2a>
 800aae6:	0c1b      	lsrs	r3, r3, #16
 800aae8:	2210      	movs	r2, #16
 800aaea:	b2d9      	uxtb	r1, r3
 800aaec:	b909      	cbnz	r1, 800aaf2 <__lo0bits+0x32>
 800aaee:	3208      	adds	r2, #8
 800aaf0:	0a1b      	lsrs	r3, r3, #8
 800aaf2:	0719      	lsls	r1, r3, #28
 800aaf4:	bf04      	itt	eq
 800aaf6:	091b      	lsreq	r3, r3, #4
 800aaf8:	3204      	addeq	r2, #4
 800aafa:	0799      	lsls	r1, r3, #30
 800aafc:	bf04      	itt	eq
 800aafe:	089b      	lsreq	r3, r3, #2
 800ab00:	3202      	addeq	r2, #2
 800ab02:	07d9      	lsls	r1, r3, #31
 800ab04:	d403      	bmi.n	800ab0e <__lo0bits+0x4e>
 800ab06:	085b      	lsrs	r3, r3, #1
 800ab08:	f102 0201 	add.w	r2, r2, #1
 800ab0c:	d003      	beq.n	800ab16 <__lo0bits+0x56>
 800ab0e:	6003      	str	r3, [r0, #0]
 800ab10:	e7e5      	b.n	800aade <__lo0bits+0x1e>
 800ab12:	2200      	movs	r2, #0
 800ab14:	e7e3      	b.n	800aade <__lo0bits+0x1e>
 800ab16:	2220      	movs	r2, #32
 800ab18:	e7e1      	b.n	800aade <__lo0bits+0x1e>
	...

0800ab1c <__i2b>:
 800ab1c:	b510      	push	{r4, lr}
 800ab1e:	460c      	mov	r4, r1
 800ab20:	2101      	movs	r1, #1
 800ab22:	f7ff ff05 	bl	800a930 <_Balloc>
 800ab26:	4602      	mov	r2, r0
 800ab28:	b928      	cbnz	r0, 800ab36 <__i2b+0x1a>
 800ab2a:	4b05      	ldr	r3, [pc, #20]	; (800ab40 <__i2b+0x24>)
 800ab2c:	4805      	ldr	r0, [pc, #20]	; (800ab44 <__i2b+0x28>)
 800ab2e:	f240 1145 	movw	r1, #325	; 0x145
 800ab32:	f000 fc8f 	bl	800b454 <__assert_func>
 800ab36:	2301      	movs	r3, #1
 800ab38:	6144      	str	r4, [r0, #20]
 800ab3a:	6103      	str	r3, [r0, #16]
 800ab3c:	bd10      	pop	{r4, pc}
 800ab3e:	bf00      	nop
 800ab40:	0800c934 	.word	0x0800c934
 800ab44:	0800c945 	.word	0x0800c945

0800ab48 <__multiply>:
 800ab48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab4c:	4691      	mov	r9, r2
 800ab4e:	690a      	ldr	r2, [r1, #16]
 800ab50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ab54:	429a      	cmp	r2, r3
 800ab56:	bfb8      	it	lt
 800ab58:	460b      	movlt	r3, r1
 800ab5a:	460c      	mov	r4, r1
 800ab5c:	bfbc      	itt	lt
 800ab5e:	464c      	movlt	r4, r9
 800ab60:	4699      	movlt	r9, r3
 800ab62:	6927      	ldr	r7, [r4, #16]
 800ab64:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ab68:	68a3      	ldr	r3, [r4, #8]
 800ab6a:	6861      	ldr	r1, [r4, #4]
 800ab6c:	eb07 060a 	add.w	r6, r7, sl
 800ab70:	42b3      	cmp	r3, r6
 800ab72:	b085      	sub	sp, #20
 800ab74:	bfb8      	it	lt
 800ab76:	3101      	addlt	r1, #1
 800ab78:	f7ff feda 	bl	800a930 <_Balloc>
 800ab7c:	b930      	cbnz	r0, 800ab8c <__multiply+0x44>
 800ab7e:	4602      	mov	r2, r0
 800ab80:	4b44      	ldr	r3, [pc, #272]	; (800ac94 <__multiply+0x14c>)
 800ab82:	4845      	ldr	r0, [pc, #276]	; (800ac98 <__multiply+0x150>)
 800ab84:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ab88:	f000 fc64 	bl	800b454 <__assert_func>
 800ab8c:	f100 0514 	add.w	r5, r0, #20
 800ab90:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ab94:	462b      	mov	r3, r5
 800ab96:	2200      	movs	r2, #0
 800ab98:	4543      	cmp	r3, r8
 800ab9a:	d321      	bcc.n	800abe0 <__multiply+0x98>
 800ab9c:	f104 0314 	add.w	r3, r4, #20
 800aba0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aba4:	f109 0314 	add.w	r3, r9, #20
 800aba8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800abac:	9202      	str	r2, [sp, #8]
 800abae:	1b3a      	subs	r2, r7, r4
 800abb0:	3a15      	subs	r2, #21
 800abb2:	f022 0203 	bic.w	r2, r2, #3
 800abb6:	3204      	adds	r2, #4
 800abb8:	f104 0115 	add.w	r1, r4, #21
 800abbc:	428f      	cmp	r7, r1
 800abbe:	bf38      	it	cc
 800abc0:	2204      	movcc	r2, #4
 800abc2:	9201      	str	r2, [sp, #4]
 800abc4:	9a02      	ldr	r2, [sp, #8]
 800abc6:	9303      	str	r3, [sp, #12]
 800abc8:	429a      	cmp	r2, r3
 800abca:	d80c      	bhi.n	800abe6 <__multiply+0x9e>
 800abcc:	2e00      	cmp	r6, #0
 800abce:	dd03      	ble.n	800abd8 <__multiply+0x90>
 800abd0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d05b      	beq.n	800ac90 <__multiply+0x148>
 800abd8:	6106      	str	r6, [r0, #16]
 800abda:	b005      	add	sp, #20
 800abdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abe0:	f843 2b04 	str.w	r2, [r3], #4
 800abe4:	e7d8      	b.n	800ab98 <__multiply+0x50>
 800abe6:	f8b3 a000 	ldrh.w	sl, [r3]
 800abea:	f1ba 0f00 	cmp.w	sl, #0
 800abee:	d024      	beq.n	800ac3a <__multiply+0xf2>
 800abf0:	f104 0e14 	add.w	lr, r4, #20
 800abf4:	46a9      	mov	r9, r5
 800abf6:	f04f 0c00 	mov.w	ip, #0
 800abfa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800abfe:	f8d9 1000 	ldr.w	r1, [r9]
 800ac02:	fa1f fb82 	uxth.w	fp, r2
 800ac06:	b289      	uxth	r1, r1
 800ac08:	fb0a 110b 	mla	r1, sl, fp, r1
 800ac0c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ac10:	f8d9 2000 	ldr.w	r2, [r9]
 800ac14:	4461      	add	r1, ip
 800ac16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ac1a:	fb0a c20b 	mla	r2, sl, fp, ip
 800ac1e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ac22:	b289      	uxth	r1, r1
 800ac24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ac28:	4577      	cmp	r7, lr
 800ac2a:	f849 1b04 	str.w	r1, [r9], #4
 800ac2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ac32:	d8e2      	bhi.n	800abfa <__multiply+0xb2>
 800ac34:	9a01      	ldr	r2, [sp, #4]
 800ac36:	f845 c002 	str.w	ip, [r5, r2]
 800ac3a:	9a03      	ldr	r2, [sp, #12]
 800ac3c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ac40:	3304      	adds	r3, #4
 800ac42:	f1b9 0f00 	cmp.w	r9, #0
 800ac46:	d021      	beq.n	800ac8c <__multiply+0x144>
 800ac48:	6829      	ldr	r1, [r5, #0]
 800ac4a:	f104 0c14 	add.w	ip, r4, #20
 800ac4e:	46ae      	mov	lr, r5
 800ac50:	f04f 0a00 	mov.w	sl, #0
 800ac54:	f8bc b000 	ldrh.w	fp, [ip]
 800ac58:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ac5c:	fb09 220b 	mla	r2, r9, fp, r2
 800ac60:	4452      	add	r2, sl
 800ac62:	b289      	uxth	r1, r1
 800ac64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ac68:	f84e 1b04 	str.w	r1, [lr], #4
 800ac6c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ac70:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ac74:	f8be 1000 	ldrh.w	r1, [lr]
 800ac78:	fb09 110a 	mla	r1, r9, sl, r1
 800ac7c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ac80:	4567      	cmp	r7, ip
 800ac82:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ac86:	d8e5      	bhi.n	800ac54 <__multiply+0x10c>
 800ac88:	9a01      	ldr	r2, [sp, #4]
 800ac8a:	50a9      	str	r1, [r5, r2]
 800ac8c:	3504      	adds	r5, #4
 800ac8e:	e799      	b.n	800abc4 <__multiply+0x7c>
 800ac90:	3e01      	subs	r6, #1
 800ac92:	e79b      	b.n	800abcc <__multiply+0x84>
 800ac94:	0800c934 	.word	0x0800c934
 800ac98:	0800c945 	.word	0x0800c945

0800ac9c <__pow5mult>:
 800ac9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aca0:	4615      	mov	r5, r2
 800aca2:	f012 0203 	ands.w	r2, r2, #3
 800aca6:	4606      	mov	r6, r0
 800aca8:	460f      	mov	r7, r1
 800acaa:	d007      	beq.n	800acbc <__pow5mult+0x20>
 800acac:	4c25      	ldr	r4, [pc, #148]	; (800ad44 <__pow5mult+0xa8>)
 800acae:	3a01      	subs	r2, #1
 800acb0:	2300      	movs	r3, #0
 800acb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800acb6:	f7ff fe9d 	bl	800a9f4 <__multadd>
 800acba:	4607      	mov	r7, r0
 800acbc:	10ad      	asrs	r5, r5, #2
 800acbe:	d03d      	beq.n	800ad3c <__pow5mult+0xa0>
 800acc0:	69f4      	ldr	r4, [r6, #28]
 800acc2:	b97c      	cbnz	r4, 800ace4 <__pow5mult+0x48>
 800acc4:	2010      	movs	r0, #16
 800acc6:	f7ff fd7f 	bl	800a7c8 <malloc>
 800acca:	4602      	mov	r2, r0
 800accc:	61f0      	str	r0, [r6, #28]
 800acce:	b928      	cbnz	r0, 800acdc <__pow5mult+0x40>
 800acd0:	4b1d      	ldr	r3, [pc, #116]	; (800ad48 <__pow5mult+0xac>)
 800acd2:	481e      	ldr	r0, [pc, #120]	; (800ad4c <__pow5mult+0xb0>)
 800acd4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800acd8:	f000 fbbc 	bl	800b454 <__assert_func>
 800acdc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ace0:	6004      	str	r4, [r0, #0]
 800ace2:	60c4      	str	r4, [r0, #12]
 800ace4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ace8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800acec:	b94c      	cbnz	r4, 800ad02 <__pow5mult+0x66>
 800acee:	f240 2171 	movw	r1, #625	; 0x271
 800acf2:	4630      	mov	r0, r6
 800acf4:	f7ff ff12 	bl	800ab1c <__i2b>
 800acf8:	2300      	movs	r3, #0
 800acfa:	f8c8 0008 	str.w	r0, [r8, #8]
 800acfe:	4604      	mov	r4, r0
 800ad00:	6003      	str	r3, [r0, #0]
 800ad02:	f04f 0900 	mov.w	r9, #0
 800ad06:	07eb      	lsls	r3, r5, #31
 800ad08:	d50a      	bpl.n	800ad20 <__pow5mult+0x84>
 800ad0a:	4639      	mov	r1, r7
 800ad0c:	4622      	mov	r2, r4
 800ad0e:	4630      	mov	r0, r6
 800ad10:	f7ff ff1a 	bl	800ab48 <__multiply>
 800ad14:	4639      	mov	r1, r7
 800ad16:	4680      	mov	r8, r0
 800ad18:	4630      	mov	r0, r6
 800ad1a:	f7ff fe49 	bl	800a9b0 <_Bfree>
 800ad1e:	4647      	mov	r7, r8
 800ad20:	106d      	asrs	r5, r5, #1
 800ad22:	d00b      	beq.n	800ad3c <__pow5mult+0xa0>
 800ad24:	6820      	ldr	r0, [r4, #0]
 800ad26:	b938      	cbnz	r0, 800ad38 <__pow5mult+0x9c>
 800ad28:	4622      	mov	r2, r4
 800ad2a:	4621      	mov	r1, r4
 800ad2c:	4630      	mov	r0, r6
 800ad2e:	f7ff ff0b 	bl	800ab48 <__multiply>
 800ad32:	6020      	str	r0, [r4, #0]
 800ad34:	f8c0 9000 	str.w	r9, [r0]
 800ad38:	4604      	mov	r4, r0
 800ad3a:	e7e4      	b.n	800ad06 <__pow5mult+0x6a>
 800ad3c:	4638      	mov	r0, r7
 800ad3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad42:	bf00      	nop
 800ad44:	0800ca90 	.word	0x0800ca90
 800ad48:	0800c8c5 	.word	0x0800c8c5
 800ad4c:	0800c945 	.word	0x0800c945

0800ad50 <__lshift>:
 800ad50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad54:	460c      	mov	r4, r1
 800ad56:	6849      	ldr	r1, [r1, #4]
 800ad58:	6923      	ldr	r3, [r4, #16]
 800ad5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ad5e:	68a3      	ldr	r3, [r4, #8]
 800ad60:	4607      	mov	r7, r0
 800ad62:	4691      	mov	r9, r2
 800ad64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad68:	f108 0601 	add.w	r6, r8, #1
 800ad6c:	42b3      	cmp	r3, r6
 800ad6e:	db0b      	blt.n	800ad88 <__lshift+0x38>
 800ad70:	4638      	mov	r0, r7
 800ad72:	f7ff fddd 	bl	800a930 <_Balloc>
 800ad76:	4605      	mov	r5, r0
 800ad78:	b948      	cbnz	r0, 800ad8e <__lshift+0x3e>
 800ad7a:	4602      	mov	r2, r0
 800ad7c:	4b28      	ldr	r3, [pc, #160]	; (800ae20 <__lshift+0xd0>)
 800ad7e:	4829      	ldr	r0, [pc, #164]	; (800ae24 <__lshift+0xd4>)
 800ad80:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ad84:	f000 fb66 	bl	800b454 <__assert_func>
 800ad88:	3101      	adds	r1, #1
 800ad8a:	005b      	lsls	r3, r3, #1
 800ad8c:	e7ee      	b.n	800ad6c <__lshift+0x1c>
 800ad8e:	2300      	movs	r3, #0
 800ad90:	f100 0114 	add.w	r1, r0, #20
 800ad94:	f100 0210 	add.w	r2, r0, #16
 800ad98:	4618      	mov	r0, r3
 800ad9a:	4553      	cmp	r3, sl
 800ad9c:	db33      	blt.n	800ae06 <__lshift+0xb6>
 800ad9e:	6920      	ldr	r0, [r4, #16]
 800ada0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ada4:	f104 0314 	add.w	r3, r4, #20
 800ada8:	f019 091f 	ands.w	r9, r9, #31
 800adac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800adb0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800adb4:	d02b      	beq.n	800ae0e <__lshift+0xbe>
 800adb6:	f1c9 0e20 	rsb	lr, r9, #32
 800adba:	468a      	mov	sl, r1
 800adbc:	2200      	movs	r2, #0
 800adbe:	6818      	ldr	r0, [r3, #0]
 800adc0:	fa00 f009 	lsl.w	r0, r0, r9
 800adc4:	4310      	orrs	r0, r2
 800adc6:	f84a 0b04 	str.w	r0, [sl], #4
 800adca:	f853 2b04 	ldr.w	r2, [r3], #4
 800adce:	459c      	cmp	ip, r3
 800add0:	fa22 f20e 	lsr.w	r2, r2, lr
 800add4:	d8f3      	bhi.n	800adbe <__lshift+0x6e>
 800add6:	ebac 0304 	sub.w	r3, ip, r4
 800adda:	3b15      	subs	r3, #21
 800addc:	f023 0303 	bic.w	r3, r3, #3
 800ade0:	3304      	adds	r3, #4
 800ade2:	f104 0015 	add.w	r0, r4, #21
 800ade6:	4584      	cmp	ip, r0
 800ade8:	bf38      	it	cc
 800adea:	2304      	movcc	r3, #4
 800adec:	50ca      	str	r2, [r1, r3]
 800adee:	b10a      	cbz	r2, 800adf4 <__lshift+0xa4>
 800adf0:	f108 0602 	add.w	r6, r8, #2
 800adf4:	3e01      	subs	r6, #1
 800adf6:	4638      	mov	r0, r7
 800adf8:	612e      	str	r6, [r5, #16]
 800adfa:	4621      	mov	r1, r4
 800adfc:	f7ff fdd8 	bl	800a9b0 <_Bfree>
 800ae00:	4628      	mov	r0, r5
 800ae02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae06:	f842 0f04 	str.w	r0, [r2, #4]!
 800ae0a:	3301      	adds	r3, #1
 800ae0c:	e7c5      	b.n	800ad9a <__lshift+0x4a>
 800ae0e:	3904      	subs	r1, #4
 800ae10:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae14:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae18:	459c      	cmp	ip, r3
 800ae1a:	d8f9      	bhi.n	800ae10 <__lshift+0xc0>
 800ae1c:	e7ea      	b.n	800adf4 <__lshift+0xa4>
 800ae1e:	bf00      	nop
 800ae20:	0800c934 	.word	0x0800c934
 800ae24:	0800c945 	.word	0x0800c945

0800ae28 <__mcmp>:
 800ae28:	b530      	push	{r4, r5, lr}
 800ae2a:	6902      	ldr	r2, [r0, #16]
 800ae2c:	690c      	ldr	r4, [r1, #16]
 800ae2e:	1b12      	subs	r2, r2, r4
 800ae30:	d10e      	bne.n	800ae50 <__mcmp+0x28>
 800ae32:	f100 0314 	add.w	r3, r0, #20
 800ae36:	3114      	adds	r1, #20
 800ae38:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ae3c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ae40:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ae44:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ae48:	42a5      	cmp	r5, r4
 800ae4a:	d003      	beq.n	800ae54 <__mcmp+0x2c>
 800ae4c:	d305      	bcc.n	800ae5a <__mcmp+0x32>
 800ae4e:	2201      	movs	r2, #1
 800ae50:	4610      	mov	r0, r2
 800ae52:	bd30      	pop	{r4, r5, pc}
 800ae54:	4283      	cmp	r3, r0
 800ae56:	d3f3      	bcc.n	800ae40 <__mcmp+0x18>
 800ae58:	e7fa      	b.n	800ae50 <__mcmp+0x28>
 800ae5a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae5e:	e7f7      	b.n	800ae50 <__mcmp+0x28>

0800ae60 <__mdiff>:
 800ae60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae64:	460c      	mov	r4, r1
 800ae66:	4606      	mov	r6, r0
 800ae68:	4611      	mov	r1, r2
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	4690      	mov	r8, r2
 800ae6e:	f7ff ffdb 	bl	800ae28 <__mcmp>
 800ae72:	1e05      	subs	r5, r0, #0
 800ae74:	d110      	bne.n	800ae98 <__mdiff+0x38>
 800ae76:	4629      	mov	r1, r5
 800ae78:	4630      	mov	r0, r6
 800ae7a:	f7ff fd59 	bl	800a930 <_Balloc>
 800ae7e:	b930      	cbnz	r0, 800ae8e <__mdiff+0x2e>
 800ae80:	4b3a      	ldr	r3, [pc, #232]	; (800af6c <__mdiff+0x10c>)
 800ae82:	4602      	mov	r2, r0
 800ae84:	f240 2137 	movw	r1, #567	; 0x237
 800ae88:	4839      	ldr	r0, [pc, #228]	; (800af70 <__mdiff+0x110>)
 800ae8a:	f000 fae3 	bl	800b454 <__assert_func>
 800ae8e:	2301      	movs	r3, #1
 800ae90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ae94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae98:	bfa4      	itt	ge
 800ae9a:	4643      	movge	r3, r8
 800ae9c:	46a0      	movge	r8, r4
 800ae9e:	4630      	mov	r0, r6
 800aea0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800aea4:	bfa6      	itte	ge
 800aea6:	461c      	movge	r4, r3
 800aea8:	2500      	movge	r5, #0
 800aeaa:	2501      	movlt	r5, #1
 800aeac:	f7ff fd40 	bl	800a930 <_Balloc>
 800aeb0:	b920      	cbnz	r0, 800aebc <__mdiff+0x5c>
 800aeb2:	4b2e      	ldr	r3, [pc, #184]	; (800af6c <__mdiff+0x10c>)
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	f240 2145 	movw	r1, #581	; 0x245
 800aeba:	e7e5      	b.n	800ae88 <__mdiff+0x28>
 800aebc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800aec0:	6926      	ldr	r6, [r4, #16]
 800aec2:	60c5      	str	r5, [r0, #12]
 800aec4:	f104 0914 	add.w	r9, r4, #20
 800aec8:	f108 0514 	add.w	r5, r8, #20
 800aecc:	f100 0e14 	add.w	lr, r0, #20
 800aed0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800aed4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800aed8:	f108 0210 	add.w	r2, r8, #16
 800aedc:	46f2      	mov	sl, lr
 800aede:	2100      	movs	r1, #0
 800aee0:	f859 3b04 	ldr.w	r3, [r9], #4
 800aee4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aee8:	fa11 f88b 	uxtah	r8, r1, fp
 800aeec:	b299      	uxth	r1, r3
 800aeee:	0c1b      	lsrs	r3, r3, #16
 800aef0:	eba8 0801 	sub.w	r8, r8, r1
 800aef4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aef8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aefc:	fa1f f888 	uxth.w	r8, r8
 800af00:	1419      	asrs	r1, r3, #16
 800af02:	454e      	cmp	r6, r9
 800af04:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800af08:	f84a 3b04 	str.w	r3, [sl], #4
 800af0c:	d8e8      	bhi.n	800aee0 <__mdiff+0x80>
 800af0e:	1b33      	subs	r3, r6, r4
 800af10:	3b15      	subs	r3, #21
 800af12:	f023 0303 	bic.w	r3, r3, #3
 800af16:	3304      	adds	r3, #4
 800af18:	3415      	adds	r4, #21
 800af1a:	42a6      	cmp	r6, r4
 800af1c:	bf38      	it	cc
 800af1e:	2304      	movcc	r3, #4
 800af20:	441d      	add	r5, r3
 800af22:	4473      	add	r3, lr
 800af24:	469e      	mov	lr, r3
 800af26:	462e      	mov	r6, r5
 800af28:	4566      	cmp	r6, ip
 800af2a:	d30e      	bcc.n	800af4a <__mdiff+0xea>
 800af2c:	f10c 0203 	add.w	r2, ip, #3
 800af30:	1b52      	subs	r2, r2, r5
 800af32:	f022 0203 	bic.w	r2, r2, #3
 800af36:	3d03      	subs	r5, #3
 800af38:	45ac      	cmp	ip, r5
 800af3a:	bf38      	it	cc
 800af3c:	2200      	movcc	r2, #0
 800af3e:	4413      	add	r3, r2
 800af40:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800af44:	b17a      	cbz	r2, 800af66 <__mdiff+0x106>
 800af46:	6107      	str	r7, [r0, #16]
 800af48:	e7a4      	b.n	800ae94 <__mdiff+0x34>
 800af4a:	f856 8b04 	ldr.w	r8, [r6], #4
 800af4e:	fa11 f288 	uxtah	r2, r1, r8
 800af52:	1414      	asrs	r4, r2, #16
 800af54:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800af58:	b292      	uxth	r2, r2
 800af5a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800af5e:	f84e 2b04 	str.w	r2, [lr], #4
 800af62:	1421      	asrs	r1, r4, #16
 800af64:	e7e0      	b.n	800af28 <__mdiff+0xc8>
 800af66:	3f01      	subs	r7, #1
 800af68:	e7ea      	b.n	800af40 <__mdiff+0xe0>
 800af6a:	bf00      	nop
 800af6c:	0800c934 	.word	0x0800c934
 800af70:	0800c945 	.word	0x0800c945

0800af74 <__d2b>:
 800af74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800af78:	460f      	mov	r7, r1
 800af7a:	2101      	movs	r1, #1
 800af7c:	ec59 8b10 	vmov	r8, r9, d0
 800af80:	4616      	mov	r6, r2
 800af82:	f7ff fcd5 	bl	800a930 <_Balloc>
 800af86:	4604      	mov	r4, r0
 800af88:	b930      	cbnz	r0, 800af98 <__d2b+0x24>
 800af8a:	4602      	mov	r2, r0
 800af8c:	4b24      	ldr	r3, [pc, #144]	; (800b020 <__d2b+0xac>)
 800af8e:	4825      	ldr	r0, [pc, #148]	; (800b024 <__d2b+0xb0>)
 800af90:	f240 310f 	movw	r1, #783	; 0x30f
 800af94:	f000 fa5e 	bl	800b454 <__assert_func>
 800af98:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800af9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800afa0:	bb2d      	cbnz	r5, 800afee <__d2b+0x7a>
 800afa2:	9301      	str	r3, [sp, #4]
 800afa4:	f1b8 0300 	subs.w	r3, r8, #0
 800afa8:	d026      	beq.n	800aff8 <__d2b+0x84>
 800afaa:	4668      	mov	r0, sp
 800afac:	9300      	str	r3, [sp, #0]
 800afae:	f7ff fd87 	bl	800aac0 <__lo0bits>
 800afb2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800afb6:	b1e8      	cbz	r0, 800aff4 <__d2b+0x80>
 800afb8:	f1c0 0320 	rsb	r3, r0, #32
 800afbc:	fa02 f303 	lsl.w	r3, r2, r3
 800afc0:	430b      	orrs	r3, r1
 800afc2:	40c2      	lsrs	r2, r0
 800afc4:	6163      	str	r3, [r4, #20]
 800afc6:	9201      	str	r2, [sp, #4]
 800afc8:	9b01      	ldr	r3, [sp, #4]
 800afca:	61a3      	str	r3, [r4, #24]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	bf14      	ite	ne
 800afd0:	2202      	movne	r2, #2
 800afd2:	2201      	moveq	r2, #1
 800afd4:	6122      	str	r2, [r4, #16]
 800afd6:	b1bd      	cbz	r5, 800b008 <__d2b+0x94>
 800afd8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800afdc:	4405      	add	r5, r0
 800afde:	603d      	str	r5, [r7, #0]
 800afe0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800afe4:	6030      	str	r0, [r6, #0]
 800afe6:	4620      	mov	r0, r4
 800afe8:	b003      	add	sp, #12
 800afea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800afee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aff2:	e7d6      	b.n	800afa2 <__d2b+0x2e>
 800aff4:	6161      	str	r1, [r4, #20]
 800aff6:	e7e7      	b.n	800afc8 <__d2b+0x54>
 800aff8:	a801      	add	r0, sp, #4
 800affa:	f7ff fd61 	bl	800aac0 <__lo0bits>
 800affe:	9b01      	ldr	r3, [sp, #4]
 800b000:	6163      	str	r3, [r4, #20]
 800b002:	3020      	adds	r0, #32
 800b004:	2201      	movs	r2, #1
 800b006:	e7e5      	b.n	800afd4 <__d2b+0x60>
 800b008:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b00c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b010:	6038      	str	r0, [r7, #0]
 800b012:	6918      	ldr	r0, [r3, #16]
 800b014:	f7ff fd34 	bl	800aa80 <__hi0bits>
 800b018:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b01c:	e7e2      	b.n	800afe4 <__d2b+0x70>
 800b01e:	bf00      	nop
 800b020:	0800c934 	.word	0x0800c934
 800b024:	0800c945 	.word	0x0800c945

0800b028 <__ssputs_r>:
 800b028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b02c:	688e      	ldr	r6, [r1, #8]
 800b02e:	461f      	mov	r7, r3
 800b030:	42be      	cmp	r6, r7
 800b032:	680b      	ldr	r3, [r1, #0]
 800b034:	4682      	mov	sl, r0
 800b036:	460c      	mov	r4, r1
 800b038:	4690      	mov	r8, r2
 800b03a:	d82c      	bhi.n	800b096 <__ssputs_r+0x6e>
 800b03c:	898a      	ldrh	r2, [r1, #12]
 800b03e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b042:	d026      	beq.n	800b092 <__ssputs_r+0x6a>
 800b044:	6965      	ldr	r5, [r4, #20]
 800b046:	6909      	ldr	r1, [r1, #16]
 800b048:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b04c:	eba3 0901 	sub.w	r9, r3, r1
 800b050:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b054:	1c7b      	adds	r3, r7, #1
 800b056:	444b      	add	r3, r9
 800b058:	106d      	asrs	r5, r5, #1
 800b05a:	429d      	cmp	r5, r3
 800b05c:	bf38      	it	cc
 800b05e:	461d      	movcc	r5, r3
 800b060:	0553      	lsls	r3, r2, #21
 800b062:	d527      	bpl.n	800b0b4 <__ssputs_r+0x8c>
 800b064:	4629      	mov	r1, r5
 800b066:	f7ff fbd7 	bl	800a818 <_malloc_r>
 800b06a:	4606      	mov	r6, r0
 800b06c:	b360      	cbz	r0, 800b0c8 <__ssputs_r+0xa0>
 800b06e:	6921      	ldr	r1, [r4, #16]
 800b070:	464a      	mov	r2, r9
 800b072:	f7fe fd5a 	bl	8009b2a <memcpy>
 800b076:	89a3      	ldrh	r3, [r4, #12]
 800b078:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b07c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b080:	81a3      	strh	r3, [r4, #12]
 800b082:	6126      	str	r6, [r4, #16]
 800b084:	6165      	str	r5, [r4, #20]
 800b086:	444e      	add	r6, r9
 800b088:	eba5 0509 	sub.w	r5, r5, r9
 800b08c:	6026      	str	r6, [r4, #0]
 800b08e:	60a5      	str	r5, [r4, #8]
 800b090:	463e      	mov	r6, r7
 800b092:	42be      	cmp	r6, r7
 800b094:	d900      	bls.n	800b098 <__ssputs_r+0x70>
 800b096:	463e      	mov	r6, r7
 800b098:	6820      	ldr	r0, [r4, #0]
 800b09a:	4632      	mov	r2, r6
 800b09c:	4641      	mov	r1, r8
 800b09e:	f7fe fcaa 	bl	80099f6 <memmove>
 800b0a2:	68a3      	ldr	r3, [r4, #8]
 800b0a4:	1b9b      	subs	r3, r3, r6
 800b0a6:	60a3      	str	r3, [r4, #8]
 800b0a8:	6823      	ldr	r3, [r4, #0]
 800b0aa:	4433      	add	r3, r6
 800b0ac:	6023      	str	r3, [r4, #0]
 800b0ae:	2000      	movs	r0, #0
 800b0b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0b4:	462a      	mov	r2, r5
 800b0b6:	f000 fa13 	bl	800b4e0 <_realloc_r>
 800b0ba:	4606      	mov	r6, r0
 800b0bc:	2800      	cmp	r0, #0
 800b0be:	d1e0      	bne.n	800b082 <__ssputs_r+0x5a>
 800b0c0:	6921      	ldr	r1, [r4, #16]
 800b0c2:	4650      	mov	r0, sl
 800b0c4:	f7ff fb34 	bl	800a730 <_free_r>
 800b0c8:	230c      	movs	r3, #12
 800b0ca:	f8ca 3000 	str.w	r3, [sl]
 800b0ce:	89a3      	ldrh	r3, [r4, #12]
 800b0d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0d4:	81a3      	strh	r3, [r4, #12]
 800b0d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b0da:	e7e9      	b.n	800b0b0 <__ssputs_r+0x88>

0800b0dc <_svfiprintf_r>:
 800b0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e0:	4698      	mov	r8, r3
 800b0e2:	898b      	ldrh	r3, [r1, #12]
 800b0e4:	061b      	lsls	r3, r3, #24
 800b0e6:	b09d      	sub	sp, #116	; 0x74
 800b0e8:	4607      	mov	r7, r0
 800b0ea:	460d      	mov	r5, r1
 800b0ec:	4614      	mov	r4, r2
 800b0ee:	d50e      	bpl.n	800b10e <_svfiprintf_r+0x32>
 800b0f0:	690b      	ldr	r3, [r1, #16]
 800b0f2:	b963      	cbnz	r3, 800b10e <_svfiprintf_r+0x32>
 800b0f4:	2140      	movs	r1, #64	; 0x40
 800b0f6:	f7ff fb8f 	bl	800a818 <_malloc_r>
 800b0fa:	6028      	str	r0, [r5, #0]
 800b0fc:	6128      	str	r0, [r5, #16]
 800b0fe:	b920      	cbnz	r0, 800b10a <_svfiprintf_r+0x2e>
 800b100:	230c      	movs	r3, #12
 800b102:	603b      	str	r3, [r7, #0]
 800b104:	f04f 30ff 	mov.w	r0, #4294967295
 800b108:	e0d0      	b.n	800b2ac <_svfiprintf_r+0x1d0>
 800b10a:	2340      	movs	r3, #64	; 0x40
 800b10c:	616b      	str	r3, [r5, #20]
 800b10e:	2300      	movs	r3, #0
 800b110:	9309      	str	r3, [sp, #36]	; 0x24
 800b112:	2320      	movs	r3, #32
 800b114:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b118:	f8cd 800c 	str.w	r8, [sp, #12]
 800b11c:	2330      	movs	r3, #48	; 0x30
 800b11e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b2c4 <_svfiprintf_r+0x1e8>
 800b122:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b126:	f04f 0901 	mov.w	r9, #1
 800b12a:	4623      	mov	r3, r4
 800b12c:	469a      	mov	sl, r3
 800b12e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b132:	b10a      	cbz	r2, 800b138 <_svfiprintf_r+0x5c>
 800b134:	2a25      	cmp	r2, #37	; 0x25
 800b136:	d1f9      	bne.n	800b12c <_svfiprintf_r+0x50>
 800b138:	ebba 0b04 	subs.w	fp, sl, r4
 800b13c:	d00b      	beq.n	800b156 <_svfiprintf_r+0x7a>
 800b13e:	465b      	mov	r3, fp
 800b140:	4622      	mov	r2, r4
 800b142:	4629      	mov	r1, r5
 800b144:	4638      	mov	r0, r7
 800b146:	f7ff ff6f 	bl	800b028 <__ssputs_r>
 800b14a:	3001      	adds	r0, #1
 800b14c:	f000 80a9 	beq.w	800b2a2 <_svfiprintf_r+0x1c6>
 800b150:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b152:	445a      	add	r2, fp
 800b154:	9209      	str	r2, [sp, #36]	; 0x24
 800b156:	f89a 3000 	ldrb.w	r3, [sl]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	f000 80a1 	beq.w	800b2a2 <_svfiprintf_r+0x1c6>
 800b160:	2300      	movs	r3, #0
 800b162:	f04f 32ff 	mov.w	r2, #4294967295
 800b166:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b16a:	f10a 0a01 	add.w	sl, sl, #1
 800b16e:	9304      	str	r3, [sp, #16]
 800b170:	9307      	str	r3, [sp, #28]
 800b172:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b176:	931a      	str	r3, [sp, #104]	; 0x68
 800b178:	4654      	mov	r4, sl
 800b17a:	2205      	movs	r2, #5
 800b17c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b180:	4850      	ldr	r0, [pc, #320]	; (800b2c4 <_svfiprintf_r+0x1e8>)
 800b182:	f7f5 f8b5 	bl	80002f0 <memchr>
 800b186:	9a04      	ldr	r2, [sp, #16]
 800b188:	b9d8      	cbnz	r0, 800b1c2 <_svfiprintf_r+0xe6>
 800b18a:	06d0      	lsls	r0, r2, #27
 800b18c:	bf44      	itt	mi
 800b18e:	2320      	movmi	r3, #32
 800b190:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b194:	0711      	lsls	r1, r2, #28
 800b196:	bf44      	itt	mi
 800b198:	232b      	movmi	r3, #43	; 0x2b
 800b19a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b19e:	f89a 3000 	ldrb.w	r3, [sl]
 800b1a2:	2b2a      	cmp	r3, #42	; 0x2a
 800b1a4:	d015      	beq.n	800b1d2 <_svfiprintf_r+0xf6>
 800b1a6:	9a07      	ldr	r2, [sp, #28]
 800b1a8:	4654      	mov	r4, sl
 800b1aa:	2000      	movs	r0, #0
 800b1ac:	f04f 0c0a 	mov.w	ip, #10
 800b1b0:	4621      	mov	r1, r4
 800b1b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1b6:	3b30      	subs	r3, #48	; 0x30
 800b1b8:	2b09      	cmp	r3, #9
 800b1ba:	d94d      	bls.n	800b258 <_svfiprintf_r+0x17c>
 800b1bc:	b1b0      	cbz	r0, 800b1ec <_svfiprintf_r+0x110>
 800b1be:	9207      	str	r2, [sp, #28]
 800b1c0:	e014      	b.n	800b1ec <_svfiprintf_r+0x110>
 800b1c2:	eba0 0308 	sub.w	r3, r0, r8
 800b1c6:	fa09 f303 	lsl.w	r3, r9, r3
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	9304      	str	r3, [sp, #16]
 800b1ce:	46a2      	mov	sl, r4
 800b1d0:	e7d2      	b.n	800b178 <_svfiprintf_r+0x9c>
 800b1d2:	9b03      	ldr	r3, [sp, #12]
 800b1d4:	1d19      	adds	r1, r3, #4
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	9103      	str	r1, [sp, #12]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	bfbb      	ittet	lt
 800b1de:	425b      	neglt	r3, r3
 800b1e0:	f042 0202 	orrlt.w	r2, r2, #2
 800b1e4:	9307      	strge	r3, [sp, #28]
 800b1e6:	9307      	strlt	r3, [sp, #28]
 800b1e8:	bfb8      	it	lt
 800b1ea:	9204      	strlt	r2, [sp, #16]
 800b1ec:	7823      	ldrb	r3, [r4, #0]
 800b1ee:	2b2e      	cmp	r3, #46	; 0x2e
 800b1f0:	d10c      	bne.n	800b20c <_svfiprintf_r+0x130>
 800b1f2:	7863      	ldrb	r3, [r4, #1]
 800b1f4:	2b2a      	cmp	r3, #42	; 0x2a
 800b1f6:	d134      	bne.n	800b262 <_svfiprintf_r+0x186>
 800b1f8:	9b03      	ldr	r3, [sp, #12]
 800b1fa:	1d1a      	adds	r2, r3, #4
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	9203      	str	r2, [sp, #12]
 800b200:	2b00      	cmp	r3, #0
 800b202:	bfb8      	it	lt
 800b204:	f04f 33ff 	movlt.w	r3, #4294967295
 800b208:	3402      	adds	r4, #2
 800b20a:	9305      	str	r3, [sp, #20]
 800b20c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b2d4 <_svfiprintf_r+0x1f8>
 800b210:	7821      	ldrb	r1, [r4, #0]
 800b212:	2203      	movs	r2, #3
 800b214:	4650      	mov	r0, sl
 800b216:	f7f5 f86b 	bl	80002f0 <memchr>
 800b21a:	b138      	cbz	r0, 800b22c <_svfiprintf_r+0x150>
 800b21c:	9b04      	ldr	r3, [sp, #16]
 800b21e:	eba0 000a 	sub.w	r0, r0, sl
 800b222:	2240      	movs	r2, #64	; 0x40
 800b224:	4082      	lsls	r2, r0
 800b226:	4313      	orrs	r3, r2
 800b228:	3401      	adds	r4, #1
 800b22a:	9304      	str	r3, [sp, #16]
 800b22c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b230:	4825      	ldr	r0, [pc, #148]	; (800b2c8 <_svfiprintf_r+0x1ec>)
 800b232:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b236:	2206      	movs	r2, #6
 800b238:	f7f5 f85a 	bl	80002f0 <memchr>
 800b23c:	2800      	cmp	r0, #0
 800b23e:	d038      	beq.n	800b2b2 <_svfiprintf_r+0x1d6>
 800b240:	4b22      	ldr	r3, [pc, #136]	; (800b2cc <_svfiprintf_r+0x1f0>)
 800b242:	bb1b      	cbnz	r3, 800b28c <_svfiprintf_r+0x1b0>
 800b244:	9b03      	ldr	r3, [sp, #12]
 800b246:	3307      	adds	r3, #7
 800b248:	f023 0307 	bic.w	r3, r3, #7
 800b24c:	3308      	adds	r3, #8
 800b24e:	9303      	str	r3, [sp, #12]
 800b250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b252:	4433      	add	r3, r6
 800b254:	9309      	str	r3, [sp, #36]	; 0x24
 800b256:	e768      	b.n	800b12a <_svfiprintf_r+0x4e>
 800b258:	fb0c 3202 	mla	r2, ip, r2, r3
 800b25c:	460c      	mov	r4, r1
 800b25e:	2001      	movs	r0, #1
 800b260:	e7a6      	b.n	800b1b0 <_svfiprintf_r+0xd4>
 800b262:	2300      	movs	r3, #0
 800b264:	3401      	adds	r4, #1
 800b266:	9305      	str	r3, [sp, #20]
 800b268:	4619      	mov	r1, r3
 800b26a:	f04f 0c0a 	mov.w	ip, #10
 800b26e:	4620      	mov	r0, r4
 800b270:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b274:	3a30      	subs	r2, #48	; 0x30
 800b276:	2a09      	cmp	r2, #9
 800b278:	d903      	bls.n	800b282 <_svfiprintf_r+0x1a6>
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d0c6      	beq.n	800b20c <_svfiprintf_r+0x130>
 800b27e:	9105      	str	r1, [sp, #20]
 800b280:	e7c4      	b.n	800b20c <_svfiprintf_r+0x130>
 800b282:	fb0c 2101 	mla	r1, ip, r1, r2
 800b286:	4604      	mov	r4, r0
 800b288:	2301      	movs	r3, #1
 800b28a:	e7f0      	b.n	800b26e <_svfiprintf_r+0x192>
 800b28c:	ab03      	add	r3, sp, #12
 800b28e:	9300      	str	r3, [sp, #0]
 800b290:	462a      	mov	r2, r5
 800b292:	4b0f      	ldr	r3, [pc, #60]	; (800b2d0 <_svfiprintf_r+0x1f4>)
 800b294:	a904      	add	r1, sp, #16
 800b296:	4638      	mov	r0, r7
 800b298:	f7fd fede 	bl	8009058 <_printf_float>
 800b29c:	1c42      	adds	r2, r0, #1
 800b29e:	4606      	mov	r6, r0
 800b2a0:	d1d6      	bne.n	800b250 <_svfiprintf_r+0x174>
 800b2a2:	89ab      	ldrh	r3, [r5, #12]
 800b2a4:	065b      	lsls	r3, r3, #25
 800b2a6:	f53f af2d 	bmi.w	800b104 <_svfiprintf_r+0x28>
 800b2aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2ac:	b01d      	add	sp, #116	; 0x74
 800b2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2b2:	ab03      	add	r3, sp, #12
 800b2b4:	9300      	str	r3, [sp, #0]
 800b2b6:	462a      	mov	r2, r5
 800b2b8:	4b05      	ldr	r3, [pc, #20]	; (800b2d0 <_svfiprintf_r+0x1f4>)
 800b2ba:	a904      	add	r1, sp, #16
 800b2bc:	4638      	mov	r0, r7
 800b2be:	f7fe f953 	bl	8009568 <_printf_i>
 800b2c2:	e7eb      	b.n	800b29c <_svfiprintf_r+0x1c0>
 800b2c4:	0800ca9c 	.word	0x0800ca9c
 800b2c8:	0800caa6 	.word	0x0800caa6
 800b2cc:	08009059 	.word	0x08009059
 800b2d0:	0800b029 	.word	0x0800b029
 800b2d4:	0800caa2 	.word	0x0800caa2

0800b2d8 <__sflush_r>:
 800b2d8:	898a      	ldrh	r2, [r1, #12]
 800b2da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2de:	4605      	mov	r5, r0
 800b2e0:	0710      	lsls	r0, r2, #28
 800b2e2:	460c      	mov	r4, r1
 800b2e4:	d458      	bmi.n	800b398 <__sflush_r+0xc0>
 800b2e6:	684b      	ldr	r3, [r1, #4]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	dc05      	bgt.n	800b2f8 <__sflush_r+0x20>
 800b2ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	dc02      	bgt.n	800b2f8 <__sflush_r+0x20>
 800b2f2:	2000      	movs	r0, #0
 800b2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b2fa:	2e00      	cmp	r6, #0
 800b2fc:	d0f9      	beq.n	800b2f2 <__sflush_r+0x1a>
 800b2fe:	2300      	movs	r3, #0
 800b300:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b304:	682f      	ldr	r7, [r5, #0]
 800b306:	6a21      	ldr	r1, [r4, #32]
 800b308:	602b      	str	r3, [r5, #0]
 800b30a:	d032      	beq.n	800b372 <__sflush_r+0x9a>
 800b30c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b30e:	89a3      	ldrh	r3, [r4, #12]
 800b310:	075a      	lsls	r2, r3, #29
 800b312:	d505      	bpl.n	800b320 <__sflush_r+0x48>
 800b314:	6863      	ldr	r3, [r4, #4]
 800b316:	1ac0      	subs	r0, r0, r3
 800b318:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b31a:	b10b      	cbz	r3, 800b320 <__sflush_r+0x48>
 800b31c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b31e:	1ac0      	subs	r0, r0, r3
 800b320:	2300      	movs	r3, #0
 800b322:	4602      	mov	r2, r0
 800b324:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b326:	6a21      	ldr	r1, [r4, #32]
 800b328:	4628      	mov	r0, r5
 800b32a:	47b0      	blx	r6
 800b32c:	1c43      	adds	r3, r0, #1
 800b32e:	89a3      	ldrh	r3, [r4, #12]
 800b330:	d106      	bne.n	800b340 <__sflush_r+0x68>
 800b332:	6829      	ldr	r1, [r5, #0]
 800b334:	291d      	cmp	r1, #29
 800b336:	d82b      	bhi.n	800b390 <__sflush_r+0xb8>
 800b338:	4a29      	ldr	r2, [pc, #164]	; (800b3e0 <__sflush_r+0x108>)
 800b33a:	410a      	asrs	r2, r1
 800b33c:	07d6      	lsls	r6, r2, #31
 800b33e:	d427      	bmi.n	800b390 <__sflush_r+0xb8>
 800b340:	2200      	movs	r2, #0
 800b342:	6062      	str	r2, [r4, #4]
 800b344:	04d9      	lsls	r1, r3, #19
 800b346:	6922      	ldr	r2, [r4, #16]
 800b348:	6022      	str	r2, [r4, #0]
 800b34a:	d504      	bpl.n	800b356 <__sflush_r+0x7e>
 800b34c:	1c42      	adds	r2, r0, #1
 800b34e:	d101      	bne.n	800b354 <__sflush_r+0x7c>
 800b350:	682b      	ldr	r3, [r5, #0]
 800b352:	b903      	cbnz	r3, 800b356 <__sflush_r+0x7e>
 800b354:	6560      	str	r0, [r4, #84]	; 0x54
 800b356:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b358:	602f      	str	r7, [r5, #0]
 800b35a:	2900      	cmp	r1, #0
 800b35c:	d0c9      	beq.n	800b2f2 <__sflush_r+0x1a>
 800b35e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b362:	4299      	cmp	r1, r3
 800b364:	d002      	beq.n	800b36c <__sflush_r+0x94>
 800b366:	4628      	mov	r0, r5
 800b368:	f7ff f9e2 	bl	800a730 <_free_r>
 800b36c:	2000      	movs	r0, #0
 800b36e:	6360      	str	r0, [r4, #52]	; 0x34
 800b370:	e7c0      	b.n	800b2f4 <__sflush_r+0x1c>
 800b372:	2301      	movs	r3, #1
 800b374:	4628      	mov	r0, r5
 800b376:	47b0      	blx	r6
 800b378:	1c41      	adds	r1, r0, #1
 800b37a:	d1c8      	bne.n	800b30e <__sflush_r+0x36>
 800b37c:	682b      	ldr	r3, [r5, #0]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d0c5      	beq.n	800b30e <__sflush_r+0x36>
 800b382:	2b1d      	cmp	r3, #29
 800b384:	d001      	beq.n	800b38a <__sflush_r+0xb2>
 800b386:	2b16      	cmp	r3, #22
 800b388:	d101      	bne.n	800b38e <__sflush_r+0xb6>
 800b38a:	602f      	str	r7, [r5, #0]
 800b38c:	e7b1      	b.n	800b2f2 <__sflush_r+0x1a>
 800b38e:	89a3      	ldrh	r3, [r4, #12]
 800b390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b394:	81a3      	strh	r3, [r4, #12]
 800b396:	e7ad      	b.n	800b2f4 <__sflush_r+0x1c>
 800b398:	690f      	ldr	r7, [r1, #16]
 800b39a:	2f00      	cmp	r7, #0
 800b39c:	d0a9      	beq.n	800b2f2 <__sflush_r+0x1a>
 800b39e:	0793      	lsls	r3, r2, #30
 800b3a0:	680e      	ldr	r6, [r1, #0]
 800b3a2:	bf08      	it	eq
 800b3a4:	694b      	ldreq	r3, [r1, #20]
 800b3a6:	600f      	str	r7, [r1, #0]
 800b3a8:	bf18      	it	ne
 800b3aa:	2300      	movne	r3, #0
 800b3ac:	eba6 0807 	sub.w	r8, r6, r7
 800b3b0:	608b      	str	r3, [r1, #8]
 800b3b2:	f1b8 0f00 	cmp.w	r8, #0
 800b3b6:	dd9c      	ble.n	800b2f2 <__sflush_r+0x1a>
 800b3b8:	6a21      	ldr	r1, [r4, #32]
 800b3ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b3bc:	4643      	mov	r3, r8
 800b3be:	463a      	mov	r2, r7
 800b3c0:	4628      	mov	r0, r5
 800b3c2:	47b0      	blx	r6
 800b3c4:	2800      	cmp	r0, #0
 800b3c6:	dc06      	bgt.n	800b3d6 <__sflush_r+0xfe>
 800b3c8:	89a3      	ldrh	r3, [r4, #12]
 800b3ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3ce:	81a3      	strh	r3, [r4, #12]
 800b3d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3d4:	e78e      	b.n	800b2f4 <__sflush_r+0x1c>
 800b3d6:	4407      	add	r7, r0
 800b3d8:	eba8 0800 	sub.w	r8, r8, r0
 800b3dc:	e7e9      	b.n	800b3b2 <__sflush_r+0xda>
 800b3de:	bf00      	nop
 800b3e0:	dfbffffe 	.word	0xdfbffffe

0800b3e4 <_fflush_r>:
 800b3e4:	b538      	push	{r3, r4, r5, lr}
 800b3e6:	690b      	ldr	r3, [r1, #16]
 800b3e8:	4605      	mov	r5, r0
 800b3ea:	460c      	mov	r4, r1
 800b3ec:	b913      	cbnz	r3, 800b3f4 <_fflush_r+0x10>
 800b3ee:	2500      	movs	r5, #0
 800b3f0:	4628      	mov	r0, r5
 800b3f2:	bd38      	pop	{r3, r4, r5, pc}
 800b3f4:	b118      	cbz	r0, 800b3fe <_fflush_r+0x1a>
 800b3f6:	6a03      	ldr	r3, [r0, #32]
 800b3f8:	b90b      	cbnz	r3, 800b3fe <_fflush_r+0x1a>
 800b3fa:	f7fe fa63 	bl	80098c4 <__sinit>
 800b3fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d0f3      	beq.n	800b3ee <_fflush_r+0xa>
 800b406:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b408:	07d0      	lsls	r0, r2, #31
 800b40a:	d404      	bmi.n	800b416 <_fflush_r+0x32>
 800b40c:	0599      	lsls	r1, r3, #22
 800b40e:	d402      	bmi.n	800b416 <_fflush_r+0x32>
 800b410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b412:	f7fe fb88 	bl	8009b26 <__retarget_lock_acquire_recursive>
 800b416:	4628      	mov	r0, r5
 800b418:	4621      	mov	r1, r4
 800b41a:	f7ff ff5d 	bl	800b2d8 <__sflush_r>
 800b41e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b420:	07da      	lsls	r2, r3, #31
 800b422:	4605      	mov	r5, r0
 800b424:	d4e4      	bmi.n	800b3f0 <_fflush_r+0xc>
 800b426:	89a3      	ldrh	r3, [r4, #12]
 800b428:	059b      	lsls	r3, r3, #22
 800b42a:	d4e1      	bmi.n	800b3f0 <_fflush_r+0xc>
 800b42c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b42e:	f7fe fb7b 	bl	8009b28 <__retarget_lock_release_recursive>
 800b432:	e7dd      	b.n	800b3f0 <_fflush_r+0xc>

0800b434 <_sbrk_r>:
 800b434:	b538      	push	{r3, r4, r5, lr}
 800b436:	4d06      	ldr	r5, [pc, #24]	; (800b450 <_sbrk_r+0x1c>)
 800b438:	2300      	movs	r3, #0
 800b43a:	4604      	mov	r4, r0
 800b43c:	4608      	mov	r0, r1
 800b43e:	602b      	str	r3, [r5, #0]
 800b440:	f7f5 feb4 	bl	80011ac <_sbrk>
 800b444:	1c43      	adds	r3, r0, #1
 800b446:	d102      	bne.n	800b44e <_sbrk_r+0x1a>
 800b448:	682b      	ldr	r3, [r5, #0]
 800b44a:	b103      	cbz	r3, 800b44e <_sbrk_r+0x1a>
 800b44c:	6023      	str	r3, [r4, #0]
 800b44e:	bd38      	pop	{r3, r4, r5, pc}
 800b450:	240008b0 	.word	0x240008b0

0800b454 <__assert_func>:
 800b454:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b456:	4614      	mov	r4, r2
 800b458:	461a      	mov	r2, r3
 800b45a:	4b09      	ldr	r3, [pc, #36]	; (800b480 <__assert_func+0x2c>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	4605      	mov	r5, r0
 800b460:	68d8      	ldr	r0, [r3, #12]
 800b462:	b14c      	cbz	r4, 800b478 <__assert_func+0x24>
 800b464:	4b07      	ldr	r3, [pc, #28]	; (800b484 <__assert_func+0x30>)
 800b466:	9100      	str	r1, [sp, #0]
 800b468:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b46c:	4906      	ldr	r1, [pc, #24]	; (800b488 <__assert_func+0x34>)
 800b46e:	462b      	mov	r3, r5
 800b470:	f000 f872 	bl	800b558 <fiprintf>
 800b474:	f000 f882 	bl	800b57c <abort>
 800b478:	4b04      	ldr	r3, [pc, #16]	; (800b48c <__assert_func+0x38>)
 800b47a:	461c      	mov	r4, r3
 800b47c:	e7f3      	b.n	800b466 <__assert_func+0x12>
 800b47e:	bf00      	nop
 800b480:	24000070 	.word	0x24000070
 800b484:	0800cab7 	.word	0x0800cab7
 800b488:	0800cac4 	.word	0x0800cac4
 800b48c:	0800caf2 	.word	0x0800caf2

0800b490 <_calloc_r>:
 800b490:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b492:	fba1 2402 	umull	r2, r4, r1, r2
 800b496:	b94c      	cbnz	r4, 800b4ac <_calloc_r+0x1c>
 800b498:	4611      	mov	r1, r2
 800b49a:	9201      	str	r2, [sp, #4]
 800b49c:	f7ff f9bc 	bl	800a818 <_malloc_r>
 800b4a0:	9a01      	ldr	r2, [sp, #4]
 800b4a2:	4605      	mov	r5, r0
 800b4a4:	b930      	cbnz	r0, 800b4b4 <_calloc_r+0x24>
 800b4a6:	4628      	mov	r0, r5
 800b4a8:	b003      	add	sp, #12
 800b4aa:	bd30      	pop	{r4, r5, pc}
 800b4ac:	220c      	movs	r2, #12
 800b4ae:	6002      	str	r2, [r0, #0]
 800b4b0:	2500      	movs	r5, #0
 800b4b2:	e7f8      	b.n	800b4a6 <_calloc_r+0x16>
 800b4b4:	4621      	mov	r1, r4
 800b4b6:	f7fe fab8 	bl	8009a2a <memset>
 800b4ba:	e7f4      	b.n	800b4a6 <_calloc_r+0x16>

0800b4bc <__ascii_mbtowc>:
 800b4bc:	b082      	sub	sp, #8
 800b4be:	b901      	cbnz	r1, 800b4c2 <__ascii_mbtowc+0x6>
 800b4c0:	a901      	add	r1, sp, #4
 800b4c2:	b142      	cbz	r2, 800b4d6 <__ascii_mbtowc+0x1a>
 800b4c4:	b14b      	cbz	r3, 800b4da <__ascii_mbtowc+0x1e>
 800b4c6:	7813      	ldrb	r3, [r2, #0]
 800b4c8:	600b      	str	r3, [r1, #0]
 800b4ca:	7812      	ldrb	r2, [r2, #0]
 800b4cc:	1e10      	subs	r0, r2, #0
 800b4ce:	bf18      	it	ne
 800b4d0:	2001      	movne	r0, #1
 800b4d2:	b002      	add	sp, #8
 800b4d4:	4770      	bx	lr
 800b4d6:	4610      	mov	r0, r2
 800b4d8:	e7fb      	b.n	800b4d2 <__ascii_mbtowc+0x16>
 800b4da:	f06f 0001 	mvn.w	r0, #1
 800b4de:	e7f8      	b.n	800b4d2 <__ascii_mbtowc+0x16>

0800b4e0 <_realloc_r>:
 800b4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4e4:	4680      	mov	r8, r0
 800b4e6:	4614      	mov	r4, r2
 800b4e8:	460e      	mov	r6, r1
 800b4ea:	b921      	cbnz	r1, 800b4f6 <_realloc_r+0x16>
 800b4ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4f0:	4611      	mov	r1, r2
 800b4f2:	f7ff b991 	b.w	800a818 <_malloc_r>
 800b4f6:	b92a      	cbnz	r2, 800b504 <_realloc_r+0x24>
 800b4f8:	f7ff f91a 	bl	800a730 <_free_r>
 800b4fc:	4625      	mov	r5, r4
 800b4fe:	4628      	mov	r0, r5
 800b500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b504:	f000 f841 	bl	800b58a <_malloc_usable_size_r>
 800b508:	4284      	cmp	r4, r0
 800b50a:	4607      	mov	r7, r0
 800b50c:	d802      	bhi.n	800b514 <_realloc_r+0x34>
 800b50e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b512:	d812      	bhi.n	800b53a <_realloc_r+0x5a>
 800b514:	4621      	mov	r1, r4
 800b516:	4640      	mov	r0, r8
 800b518:	f7ff f97e 	bl	800a818 <_malloc_r>
 800b51c:	4605      	mov	r5, r0
 800b51e:	2800      	cmp	r0, #0
 800b520:	d0ed      	beq.n	800b4fe <_realloc_r+0x1e>
 800b522:	42bc      	cmp	r4, r7
 800b524:	4622      	mov	r2, r4
 800b526:	4631      	mov	r1, r6
 800b528:	bf28      	it	cs
 800b52a:	463a      	movcs	r2, r7
 800b52c:	f7fe fafd 	bl	8009b2a <memcpy>
 800b530:	4631      	mov	r1, r6
 800b532:	4640      	mov	r0, r8
 800b534:	f7ff f8fc 	bl	800a730 <_free_r>
 800b538:	e7e1      	b.n	800b4fe <_realloc_r+0x1e>
 800b53a:	4635      	mov	r5, r6
 800b53c:	e7df      	b.n	800b4fe <_realloc_r+0x1e>

0800b53e <__ascii_wctomb>:
 800b53e:	b149      	cbz	r1, 800b554 <__ascii_wctomb+0x16>
 800b540:	2aff      	cmp	r2, #255	; 0xff
 800b542:	bf85      	ittet	hi
 800b544:	238a      	movhi	r3, #138	; 0x8a
 800b546:	6003      	strhi	r3, [r0, #0]
 800b548:	700a      	strbls	r2, [r1, #0]
 800b54a:	f04f 30ff 	movhi.w	r0, #4294967295
 800b54e:	bf98      	it	ls
 800b550:	2001      	movls	r0, #1
 800b552:	4770      	bx	lr
 800b554:	4608      	mov	r0, r1
 800b556:	4770      	bx	lr

0800b558 <fiprintf>:
 800b558:	b40e      	push	{r1, r2, r3}
 800b55a:	b503      	push	{r0, r1, lr}
 800b55c:	4601      	mov	r1, r0
 800b55e:	ab03      	add	r3, sp, #12
 800b560:	4805      	ldr	r0, [pc, #20]	; (800b578 <fiprintf+0x20>)
 800b562:	f853 2b04 	ldr.w	r2, [r3], #4
 800b566:	6800      	ldr	r0, [r0, #0]
 800b568:	9301      	str	r3, [sp, #4]
 800b56a:	f000 f83f 	bl	800b5ec <_vfiprintf_r>
 800b56e:	b002      	add	sp, #8
 800b570:	f85d eb04 	ldr.w	lr, [sp], #4
 800b574:	b003      	add	sp, #12
 800b576:	4770      	bx	lr
 800b578:	24000070 	.word	0x24000070

0800b57c <abort>:
 800b57c:	b508      	push	{r3, lr}
 800b57e:	2006      	movs	r0, #6
 800b580:	f000 fa0c 	bl	800b99c <raise>
 800b584:	2001      	movs	r0, #1
 800b586:	f7f5 fd99 	bl	80010bc <_exit>

0800b58a <_malloc_usable_size_r>:
 800b58a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b58e:	1f18      	subs	r0, r3, #4
 800b590:	2b00      	cmp	r3, #0
 800b592:	bfbc      	itt	lt
 800b594:	580b      	ldrlt	r3, [r1, r0]
 800b596:	18c0      	addlt	r0, r0, r3
 800b598:	4770      	bx	lr

0800b59a <__sfputc_r>:
 800b59a:	6893      	ldr	r3, [r2, #8]
 800b59c:	3b01      	subs	r3, #1
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	b410      	push	{r4}
 800b5a2:	6093      	str	r3, [r2, #8]
 800b5a4:	da08      	bge.n	800b5b8 <__sfputc_r+0x1e>
 800b5a6:	6994      	ldr	r4, [r2, #24]
 800b5a8:	42a3      	cmp	r3, r4
 800b5aa:	db01      	blt.n	800b5b0 <__sfputc_r+0x16>
 800b5ac:	290a      	cmp	r1, #10
 800b5ae:	d103      	bne.n	800b5b8 <__sfputc_r+0x1e>
 800b5b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5b4:	f000 b934 	b.w	800b820 <__swbuf_r>
 800b5b8:	6813      	ldr	r3, [r2, #0]
 800b5ba:	1c58      	adds	r0, r3, #1
 800b5bc:	6010      	str	r0, [r2, #0]
 800b5be:	7019      	strb	r1, [r3, #0]
 800b5c0:	4608      	mov	r0, r1
 800b5c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5c6:	4770      	bx	lr

0800b5c8 <__sfputs_r>:
 800b5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ca:	4606      	mov	r6, r0
 800b5cc:	460f      	mov	r7, r1
 800b5ce:	4614      	mov	r4, r2
 800b5d0:	18d5      	adds	r5, r2, r3
 800b5d2:	42ac      	cmp	r4, r5
 800b5d4:	d101      	bne.n	800b5da <__sfputs_r+0x12>
 800b5d6:	2000      	movs	r0, #0
 800b5d8:	e007      	b.n	800b5ea <__sfputs_r+0x22>
 800b5da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5de:	463a      	mov	r2, r7
 800b5e0:	4630      	mov	r0, r6
 800b5e2:	f7ff ffda 	bl	800b59a <__sfputc_r>
 800b5e6:	1c43      	adds	r3, r0, #1
 800b5e8:	d1f3      	bne.n	800b5d2 <__sfputs_r+0xa>
 800b5ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b5ec <_vfiprintf_r>:
 800b5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5f0:	460d      	mov	r5, r1
 800b5f2:	b09d      	sub	sp, #116	; 0x74
 800b5f4:	4614      	mov	r4, r2
 800b5f6:	4698      	mov	r8, r3
 800b5f8:	4606      	mov	r6, r0
 800b5fa:	b118      	cbz	r0, 800b604 <_vfiprintf_r+0x18>
 800b5fc:	6a03      	ldr	r3, [r0, #32]
 800b5fe:	b90b      	cbnz	r3, 800b604 <_vfiprintf_r+0x18>
 800b600:	f7fe f960 	bl	80098c4 <__sinit>
 800b604:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b606:	07d9      	lsls	r1, r3, #31
 800b608:	d405      	bmi.n	800b616 <_vfiprintf_r+0x2a>
 800b60a:	89ab      	ldrh	r3, [r5, #12]
 800b60c:	059a      	lsls	r2, r3, #22
 800b60e:	d402      	bmi.n	800b616 <_vfiprintf_r+0x2a>
 800b610:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b612:	f7fe fa88 	bl	8009b26 <__retarget_lock_acquire_recursive>
 800b616:	89ab      	ldrh	r3, [r5, #12]
 800b618:	071b      	lsls	r3, r3, #28
 800b61a:	d501      	bpl.n	800b620 <_vfiprintf_r+0x34>
 800b61c:	692b      	ldr	r3, [r5, #16]
 800b61e:	b99b      	cbnz	r3, 800b648 <_vfiprintf_r+0x5c>
 800b620:	4629      	mov	r1, r5
 800b622:	4630      	mov	r0, r6
 800b624:	f000 f93a 	bl	800b89c <__swsetup_r>
 800b628:	b170      	cbz	r0, 800b648 <_vfiprintf_r+0x5c>
 800b62a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b62c:	07dc      	lsls	r4, r3, #31
 800b62e:	d504      	bpl.n	800b63a <_vfiprintf_r+0x4e>
 800b630:	f04f 30ff 	mov.w	r0, #4294967295
 800b634:	b01d      	add	sp, #116	; 0x74
 800b636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b63a:	89ab      	ldrh	r3, [r5, #12]
 800b63c:	0598      	lsls	r0, r3, #22
 800b63e:	d4f7      	bmi.n	800b630 <_vfiprintf_r+0x44>
 800b640:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b642:	f7fe fa71 	bl	8009b28 <__retarget_lock_release_recursive>
 800b646:	e7f3      	b.n	800b630 <_vfiprintf_r+0x44>
 800b648:	2300      	movs	r3, #0
 800b64a:	9309      	str	r3, [sp, #36]	; 0x24
 800b64c:	2320      	movs	r3, #32
 800b64e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b652:	f8cd 800c 	str.w	r8, [sp, #12]
 800b656:	2330      	movs	r3, #48	; 0x30
 800b658:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b80c <_vfiprintf_r+0x220>
 800b65c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b660:	f04f 0901 	mov.w	r9, #1
 800b664:	4623      	mov	r3, r4
 800b666:	469a      	mov	sl, r3
 800b668:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b66c:	b10a      	cbz	r2, 800b672 <_vfiprintf_r+0x86>
 800b66e:	2a25      	cmp	r2, #37	; 0x25
 800b670:	d1f9      	bne.n	800b666 <_vfiprintf_r+0x7a>
 800b672:	ebba 0b04 	subs.w	fp, sl, r4
 800b676:	d00b      	beq.n	800b690 <_vfiprintf_r+0xa4>
 800b678:	465b      	mov	r3, fp
 800b67a:	4622      	mov	r2, r4
 800b67c:	4629      	mov	r1, r5
 800b67e:	4630      	mov	r0, r6
 800b680:	f7ff ffa2 	bl	800b5c8 <__sfputs_r>
 800b684:	3001      	adds	r0, #1
 800b686:	f000 80a9 	beq.w	800b7dc <_vfiprintf_r+0x1f0>
 800b68a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b68c:	445a      	add	r2, fp
 800b68e:	9209      	str	r2, [sp, #36]	; 0x24
 800b690:	f89a 3000 	ldrb.w	r3, [sl]
 800b694:	2b00      	cmp	r3, #0
 800b696:	f000 80a1 	beq.w	800b7dc <_vfiprintf_r+0x1f0>
 800b69a:	2300      	movs	r3, #0
 800b69c:	f04f 32ff 	mov.w	r2, #4294967295
 800b6a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6a4:	f10a 0a01 	add.w	sl, sl, #1
 800b6a8:	9304      	str	r3, [sp, #16]
 800b6aa:	9307      	str	r3, [sp, #28]
 800b6ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6b0:	931a      	str	r3, [sp, #104]	; 0x68
 800b6b2:	4654      	mov	r4, sl
 800b6b4:	2205      	movs	r2, #5
 800b6b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6ba:	4854      	ldr	r0, [pc, #336]	; (800b80c <_vfiprintf_r+0x220>)
 800b6bc:	f7f4 fe18 	bl	80002f0 <memchr>
 800b6c0:	9a04      	ldr	r2, [sp, #16]
 800b6c2:	b9d8      	cbnz	r0, 800b6fc <_vfiprintf_r+0x110>
 800b6c4:	06d1      	lsls	r1, r2, #27
 800b6c6:	bf44      	itt	mi
 800b6c8:	2320      	movmi	r3, #32
 800b6ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6ce:	0713      	lsls	r3, r2, #28
 800b6d0:	bf44      	itt	mi
 800b6d2:	232b      	movmi	r3, #43	; 0x2b
 800b6d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6d8:	f89a 3000 	ldrb.w	r3, [sl]
 800b6dc:	2b2a      	cmp	r3, #42	; 0x2a
 800b6de:	d015      	beq.n	800b70c <_vfiprintf_r+0x120>
 800b6e0:	9a07      	ldr	r2, [sp, #28]
 800b6e2:	4654      	mov	r4, sl
 800b6e4:	2000      	movs	r0, #0
 800b6e6:	f04f 0c0a 	mov.w	ip, #10
 800b6ea:	4621      	mov	r1, r4
 800b6ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6f0:	3b30      	subs	r3, #48	; 0x30
 800b6f2:	2b09      	cmp	r3, #9
 800b6f4:	d94d      	bls.n	800b792 <_vfiprintf_r+0x1a6>
 800b6f6:	b1b0      	cbz	r0, 800b726 <_vfiprintf_r+0x13a>
 800b6f8:	9207      	str	r2, [sp, #28]
 800b6fa:	e014      	b.n	800b726 <_vfiprintf_r+0x13a>
 800b6fc:	eba0 0308 	sub.w	r3, r0, r8
 800b700:	fa09 f303 	lsl.w	r3, r9, r3
 800b704:	4313      	orrs	r3, r2
 800b706:	9304      	str	r3, [sp, #16]
 800b708:	46a2      	mov	sl, r4
 800b70a:	e7d2      	b.n	800b6b2 <_vfiprintf_r+0xc6>
 800b70c:	9b03      	ldr	r3, [sp, #12]
 800b70e:	1d19      	adds	r1, r3, #4
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	9103      	str	r1, [sp, #12]
 800b714:	2b00      	cmp	r3, #0
 800b716:	bfbb      	ittet	lt
 800b718:	425b      	neglt	r3, r3
 800b71a:	f042 0202 	orrlt.w	r2, r2, #2
 800b71e:	9307      	strge	r3, [sp, #28]
 800b720:	9307      	strlt	r3, [sp, #28]
 800b722:	bfb8      	it	lt
 800b724:	9204      	strlt	r2, [sp, #16]
 800b726:	7823      	ldrb	r3, [r4, #0]
 800b728:	2b2e      	cmp	r3, #46	; 0x2e
 800b72a:	d10c      	bne.n	800b746 <_vfiprintf_r+0x15a>
 800b72c:	7863      	ldrb	r3, [r4, #1]
 800b72e:	2b2a      	cmp	r3, #42	; 0x2a
 800b730:	d134      	bne.n	800b79c <_vfiprintf_r+0x1b0>
 800b732:	9b03      	ldr	r3, [sp, #12]
 800b734:	1d1a      	adds	r2, r3, #4
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	9203      	str	r2, [sp, #12]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	bfb8      	it	lt
 800b73e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b742:	3402      	adds	r4, #2
 800b744:	9305      	str	r3, [sp, #20]
 800b746:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b81c <_vfiprintf_r+0x230>
 800b74a:	7821      	ldrb	r1, [r4, #0]
 800b74c:	2203      	movs	r2, #3
 800b74e:	4650      	mov	r0, sl
 800b750:	f7f4 fdce 	bl	80002f0 <memchr>
 800b754:	b138      	cbz	r0, 800b766 <_vfiprintf_r+0x17a>
 800b756:	9b04      	ldr	r3, [sp, #16]
 800b758:	eba0 000a 	sub.w	r0, r0, sl
 800b75c:	2240      	movs	r2, #64	; 0x40
 800b75e:	4082      	lsls	r2, r0
 800b760:	4313      	orrs	r3, r2
 800b762:	3401      	adds	r4, #1
 800b764:	9304      	str	r3, [sp, #16]
 800b766:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b76a:	4829      	ldr	r0, [pc, #164]	; (800b810 <_vfiprintf_r+0x224>)
 800b76c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b770:	2206      	movs	r2, #6
 800b772:	f7f4 fdbd 	bl	80002f0 <memchr>
 800b776:	2800      	cmp	r0, #0
 800b778:	d03f      	beq.n	800b7fa <_vfiprintf_r+0x20e>
 800b77a:	4b26      	ldr	r3, [pc, #152]	; (800b814 <_vfiprintf_r+0x228>)
 800b77c:	bb1b      	cbnz	r3, 800b7c6 <_vfiprintf_r+0x1da>
 800b77e:	9b03      	ldr	r3, [sp, #12]
 800b780:	3307      	adds	r3, #7
 800b782:	f023 0307 	bic.w	r3, r3, #7
 800b786:	3308      	adds	r3, #8
 800b788:	9303      	str	r3, [sp, #12]
 800b78a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b78c:	443b      	add	r3, r7
 800b78e:	9309      	str	r3, [sp, #36]	; 0x24
 800b790:	e768      	b.n	800b664 <_vfiprintf_r+0x78>
 800b792:	fb0c 3202 	mla	r2, ip, r2, r3
 800b796:	460c      	mov	r4, r1
 800b798:	2001      	movs	r0, #1
 800b79a:	e7a6      	b.n	800b6ea <_vfiprintf_r+0xfe>
 800b79c:	2300      	movs	r3, #0
 800b79e:	3401      	adds	r4, #1
 800b7a0:	9305      	str	r3, [sp, #20]
 800b7a2:	4619      	mov	r1, r3
 800b7a4:	f04f 0c0a 	mov.w	ip, #10
 800b7a8:	4620      	mov	r0, r4
 800b7aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7ae:	3a30      	subs	r2, #48	; 0x30
 800b7b0:	2a09      	cmp	r2, #9
 800b7b2:	d903      	bls.n	800b7bc <_vfiprintf_r+0x1d0>
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d0c6      	beq.n	800b746 <_vfiprintf_r+0x15a>
 800b7b8:	9105      	str	r1, [sp, #20]
 800b7ba:	e7c4      	b.n	800b746 <_vfiprintf_r+0x15a>
 800b7bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7c0:	4604      	mov	r4, r0
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e7f0      	b.n	800b7a8 <_vfiprintf_r+0x1bc>
 800b7c6:	ab03      	add	r3, sp, #12
 800b7c8:	9300      	str	r3, [sp, #0]
 800b7ca:	462a      	mov	r2, r5
 800b7cc:	4b12      	ldr	r3, [pc, #72]	; (800b818 <_vfiprintf_r+0x22c>)
 800b7ce:	a904      	add	r1, sp, #16
 800b7d0:	4630      	mov	r0, r6
 800b7d2:	f7fd fc41 	bl	8009058 <_printf_float>
 800b7d6:	4607      	mov	r7, r0
 800b7d8:	1c78      	adds	r0, r7, #1
 800b7da:	d1d6      	bne.n	800b78a <_vfiprintf_r+0x19e>
 800b7dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7de:	07d9      	lsls	r1, r3, #31
 800b7e0:	d405      	bmi.n	800b7ee <_vfiprintf_r+0x202>
 800b7e2:	89ab      	ldrh	r3, [r5, #12]
 800b7e4:	059a      	lsls	r2, r3, #22
 800b7e6:	d402      	bmi.n	800b7ee <_vfiprintf_r+0x202>
 800b7e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7ea:	f7fe f99d 	bl	8009b28 <__retarget_lock_release_recursive>
 800b7ee:	89ab      	ldrh	r3, [r5, #12]
 800b7f0:	065b      	lsls	r3, r3, #25
 800b7f2:	f53f af1d 	bmi.w	800b630 <_vfiprintf_r+0x44>
 800b7f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7f8:	e71c      	b.n	800b634 <_vfiprintf_r+0x48>
 800b7fa:	ab03      	add	r3, sp, #12
 800b7fc:	9300      	str	r3, [sp, #0]
 800b7fe:	462a      	mov	r2, r5
 800b800:	4b05      	ldr	r3, [pc, #20]	; (800b818 <_vfiprintf_r+0x22c>)
 800b802:	a904      	add	r1, sp, #16
 800b804:	4630      	mov	r0, r6
 800b806:	f7fd feaf 	bl	8009568 <_printf_i>
 800b80a:	e7e4      	b.n	800b7d6 <_vfiprintf_r+0x1ea>
 800b80c:	0800ca9c 	.word	0x0800ca9c
 800b810:	0800caa6 	.word	0x0800caa6
 800b814:	08009059 	.word	0x08009059
 800b818:	0800b5c9 	.word	0x0800b5c9
 800b81c:	0800caa2 	.word	0x0800caa2

0800b820 <__swbuf_r>:
 800b820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b822:	460e      	mov	r6, r1
 800b824:	4614      	mov	r4, r2
 800b826:	4605      	mov	r5, r0
 800b828:	b118      	cbz	r0, 800b832 <__swbuf_r+0x12>
 800b82a:	6a03      	ldr	r3, [r0, #32]
 800b82c:	b90b      	cbnz	r3, 800b832 <__swbuf_r+0x12>
 800b82e:	f7fe f849 	bl	80098c4 <__sinit>
 800b832:	69a3      	ldr	r3, [r4, #24]
 800b834:	60a3      	str	r3, [r4, #8]
 800b836:	89a3      	ldrh	r3, [r4, #12]
 800b838:	071a      	lsls	r2, r3, #28
 800b83a:	d525      	bpl.n	800b888 <__swbuf_r+0x68>
 800b83c:	6923      	ldr	r3, [r4, #16]
 800b83e:	b31b      	cbz	r3, 800b888 <__swbuf_r+0x68>
 800b840:	6823      	ldr	r3, [r4, #0]
 800b842:	6922      	ldr	r2, [r4, #16]
 800b844:	1a98      	subs	r0, r3, r2
 800b846:	6963      	ldr	r3, [r4, #20]
 800b848:	b2f6      	uxtb	r6, r6
 800b84a:	4283      	cmp	r3, r0
 800b84c:	4637      	mov	r7, r6
 800b84e:	dc04      	bgt.n	800b85a <__swbuf_r+0x3a>
 800b850:	4621      	mov	r1, r4
 800b852:	4628      	mov	r0, r5
 800b854:	f7ff fdc6 	bl	800b3e4 <_fflush_r>
 800b858:	b9e0      	cbnz	r0, 800b894 <__swbuf_r+0x74>
 800b85a:	68a3      	ldr	r3, [r4, #8]
 800b85c:	3b01      	subs	r3, #1
 800b85e:	60a3      	str	r3, [r4, #8]
 800b860:	6823      	ldr	r3, [r4, #0]
 800b862:	1c5a      	adds	r2, r3, #1
 800b864:	6022      	str	r2, [r4, #0]
 800b866:	701e      	strb	r6, [r3, #0]
 800b868:	6962      	ldr	r2, [r4, #20]
 800b86a:	1c43      	adds	r3, r0, #1
 800b86c:	429a      	cmp	r2, r3
 800b86e:	d004      	beq.n	800b87a <__swbuf_r+0x5a>
 800b870:	89a3      	ldrh	r3, [r4, #12]
 800b872:	07db      	lsls	r3, r3, #31
 800b874:	d506      	bpl.n	800b884 <__swbuf_r+0x64>
 800b876:	2e0a      	cmp	r6, #10
 800b878:	d104      	bne.n	800b884 <__swbuf_r+0x64>
 800b87a:	4621      	mov	r1, r4
 800b87c:	4628      	mov	r0, r5
 800b87e:	f7ff fdb1 	bl	800b3e4 <_fflush_r>
 800b882:	b938      	cbnz	r0, 800b894 <__swbuf_r+0x74>
 800b884:	4638      	mov	r0, r7
 800b886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b888:	4621      	mov	r1, r4
 800b88a:	4628      	mov	r0, r5
 800b88c:	f000 f806 	bl	800b89c <__swsetup_r>
 800b890:	2800      	cmp	r0, #0
 800b892:	d0d5      	beq.n	800b840 <__swbuf_r+0x20>
 800b894:	f04f 37ff 	mov.w	r7, #4294967295
 800b898:	e7f4      	b.n	800b884 <__swbuf_r+0x64>
	...

0800b89c <__swsetup_r>:
 800b89c:	b538      	push	{r3, r4, r5, lr}
 800b89e:	4b2a      	ldr	r3, [pc, #168]	; (800b948 <__swsetup_r+0xac>)
 800b8a0:	4605      	mov	r5, r0
 800b8a2:	6818      	ldr	r0, [r3, #0]
 800b8a4:	460c      	mov	r4, r1
 800b8a6:	b118      	cbz	r0, 800b8b0 <__swsetup_r+0x14>
 800b8a8:	6a03      	ldr	r3, [r0, #32]
 800b8aa:	b90b      	cbnz	r3, 800b8b0 <__swsetup_r+0x14>
 800b8ac:	f7fe f80a 	bl	80098c4 <__sinit>
 800b8b0:	89a3      	ldrh	r3, [r4, #12]
 800b8b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b8b6:	0718      	lsls	r0, r3, #28
 800b8b8:	d422      	bmi.n	800b900 <__swsetup_r+0x64>
 800b8ba:	06d9      	lsls	r1, r3, #27
 800b8bc:	d407      	bmi.n	800b8ce <__swsetup_r+0x32>
 800b8be:	2309      	movs	r3, #9
 800b8c0:	602b      	str	r3, [r5, #0]
 800b8c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b8c6:	81a3      	strh	r3, [r4, #12]
 800b8c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8cc:	e034      	b.n	800b938 <__swsetup_r+0x9c>
 800b8ce:	0758      	lsls	r0, r3, #29
 800b8d0:	d512      	bpl.n	800b8f8 <__swsetup_r+0x5c>
 800b8d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8d4:	b141      	cbz	r1, 800b8e8 <__swsetup_r+0x4c>
 800b8d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8da:	4299      	cmp	r1, r3
 800b8dc:	d002      	beq.n	800b8e4 <__swsetup_r+0x48>
 800b8de:	4628      	mov	r0, r5
 800b8e0:	f7fe ff26 	bl	800a730 <_free_r>
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	6363      	str	r3, [r4, #52]	; 0x34
 800b8e8:	89a3      	ldrh	r3, [r4, #12]
 800b8ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b8ee:	81a3      	strh	r3, [r4, #12]
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	6063      	str	r3, [r4, #4]
 800b8f4:	6923      	ldr	r3, [r4, #16]
 800b8f6:	6023      	str	r3, [r4, #0]
 800b8f8:	89a3      	ldrh	r3, [r4, #12]
 800b8fa:	f043 0308 	orr.w	r3, r3, #8
 800b8fe:	81a3      	strh	r3, [r4, #12]
 800b900:	6923      	ldr	r3, [r4, #16]
 800b902:	b94b      	cbnz	r3, 800b918 <__swsetup_r+0x7c>
 800b904:	89a3      	ldrh	r3, [r4, #12]
 800b906:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b90a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b90e:	d003      	beq.n	800b918 <__swsetup_r+0x7c>
 800b910:	4621      	mov	r1, r4
 800b912:	4628      	mov	r0, r5
 800b914:	f000 f884 	bl	800ba20 <__smakebuf_r>
 800b918:	89a0      	ldrh	r0, [r4, #12]
 800b91a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b91e:	f010 0301 	ands.w	r3, r0, #1
 800b922:	d00a      	beq.n	800b93a <__swsetup_r+0x9e>
 800b924:	2300      	movs	r3, #0
 800b926:	60a3      	str	r3, [r4, #8]
 800b928:	6963      	ldr	r3, [r4, #20]
 800b92a:	425b      	negs	r3, r3
 800b92c:	61a3      	str	r3, [r4, #24]
 800b92e:	6923      	ldr	r3, [r4, #16]
 800b930:	b943      	cbnz	r3, 800b944 <__swsetup_r+0xa8>
 800b932:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b936:	d1c4      	bne.n	800b8c2 <__swsetup_r+0x26>
 800b938:	bd38      	pop	{r3, r4, r5, pc}
 800b93a:	0781      	lsls	r1, r0, #30
 800b93c:	bf58      	it	pl
 800b93e:	6963      	ldrpl	r3, [r4, #20]
 800b940:	60a3      	str	r3, [r4, #8]
 800b942:	e7f4      	b.n	800b92e <__swsetup_r+0x92>
 800b944:	2000      	movs	r0, #0
 800b946:	e7f7      	b.n	800b938 <__swsetup_r+0x9c>
 800b948:	24000070 	.word	0x24000070

0800b94c <_raise_r>:
 800b94c:	291f      	cmp	r1, #31
 800b94e:	b538      	push	{r3, r4, r5, lr}
 800b950:	4604      	mov	r4, r0
 800b952:	460d      	mov	r5, r1
 800b954:	d904      	bls.n	800b960 <_raise_r+0x14>
 800b956:	2316      	movs	r3, #22
 800b958:	6003      	str	r3, [r0, #0]
 800b95a:	f04f 30ff 	mov.w	r0, #4294967295
 800b95e:	bd38      	pop	{r3, r4, r5, pc}
 800b960:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b962:	b112      	cbz	r2, 800b96a <_raise_r+0x1e>
 800b964:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b968:	b94b      	cbnz	r3, 800b97e <_raise_r+0x32>
 800b96a:	4620      	mov	r0, r4
 800b96c:	f000 f830 	bl	800b9d0 <_getpid_r>
 800b970:	462a      	mov	r2, r5
 800b972:	4601      	mov	r1, r0
 800b974:	4620      	mov	r0, r4
 800b976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b97a:	f000 b817 	b.w	800b9ac <_kill_r>
 800b97e:	2b01      	cmp	r3, #1
 800b980:	d00a      	beq.n	800b998 <_raise_r+0x4c>
 800b982:	1c59      	adds	r1, r3, #1
 800b984:	d103      	bne.n	800b98e <_raise_r+0x42>
 800b986:	2316      	movs	r3, #22
 800b988:	6003      	str	r3, [r0, #0]
 800b98a:	2001      	movs	r0, #1
 800b98c:	e7e7      	b.n	800b95e <_raise_r+0x12>
 800b98e:	2400      	movs	r4, #0
 800b990:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b994:	4628      	mov	r0, r5
 800b996:	4798      	blx	r3
 800b998:	2000      	movs	r0, #0
 800b99a:	e7e0      	b.n	800b95e <_raise_r+0x12>

0800b99c <raise>:
 800b99c:	4b02      	ldr	r3, [pc, #8]	; (800b9a8 <raise+0xc>)
 800b99e:	4601      	mov	r1, r0
 800b9a0:	6818      	ldr	r0, [r3, #0]
 800b9a2:	f7ff bfd3 	b.w	800b94c <_raise_r>
 800b9a6:	bf00      	nop
 800b9a8:	24000070 	.word	0x24000070

0800b9ac <_kill_r>:
 800b9ac:	b538      	push	{r3, r4, r5, lr}
 800b9ae:	4d07      	ldr	r5, [pc, #28]	; (800b9cc <_kill_r+0x20>)
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	4604      	mov	r4, r0
 800b9b4:	4608      	mov	r0, r1
 800b9b6:	4611      	mov	r1, r2
 800b9b8:	602b      	str	r3, [r5, #0]
 800b9ba:	f7f5 fb6f 	bl	800109c <_kill>
 800b9be:	1c43      	adds	r3, r0, #1
 800b9c0:	d102      	bne.n	800b9c8 <_kill_r+0x1c>
 800b9c2:	682b      	ldr	r3, [r5, #0]
 800b9c4:	b103      	cbz	r3, 800b9c8 <_kill_r+0x1c>
 800b9c6:	6023      	str	r3, [r4, #0]
 800b9c8:	bd38      	pop	{r3, r4, r5, pc}
 800b9ca:	bf00      	nop
 800b9cc:	240008b0 	.word	0x240008b0

0800b9d0 <_getpid_r>:
 800b9d0:	f7f5 bb5c 	b.w	800108c <_getpid>

0800b9d4 <__swhatbuf_r>:
 800b9d4:	b570      	push	{r4, r5, r6, lr}
 800b9d6:	460c      	mov	r4, r1
 800b9d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9dc:	2900      	cmp	r1, #0
 800b9de:	b096      	sub	sp, #88	; 0x58
 800b9e0:	4615      	mov	r5, r2
 800b9e2:	461e      	mov	r6, r3
 800b9e4:	da0d      	bge.n	800ba02 <__swhatbuf_r+0x2e>
 800b9e6:	89a3      	ldrh	r3, [r4, #12]
 800b9e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b9ec:	f04f 0100 	mov.w	r1, #0
 800b9f0:	bf0c      	ite	eq
 800b9f2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b9f6:	2340      	movne	r3, #64	; 0x40
 800b9f8:	2000      	movs	r0, #0
 800b9fa:	6031      	str	r1, [r6, #0]
 800b9fc:	602b      	str	r3, [r5, #0]
 800b9fe:	b016      	add	sp, #88	; 0x58
 800ba00:	bd70      	pop	{r4, r5, r6, pc}
 800ba02:	466a      	mov	r2, sp
 800ba04:	f000 f848 	bl	800ba98 <_fstat_r>
 800ba08:	2800      	cmp	r0, #0
 800ba0a:	dbec      	blt.n	800b9e6 <__swhatbuf_r+0x12>
 800ba0c:	9901      	ldr	r1, [sp, #4]
 800ba0e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ba12:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ba16:	4259      	negs	r1, r3
 800ba18:	4159      	adcs	r1, r3
 800ba1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba1e:	e7eb      	b.n	800b9f8 <__swhatbuf_r+0x24>

0800ba20 <__smakebuf_r>:
 800ba20:	898b      	ldrh	r3, [r1, #12]
 800ba22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ba24:	079d      	lsls	r5, r3, #30
 800ba26:	4606      	mov	r6, r0
 800ba28:	460c      	mov	r4, r1
 800ba2a:	d507      	bpl.n	800ba3c <__smakebuf_r+0x1c>
 800ba2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ba30:	6023      	str	r3, [r4, #0]
 800ba32:	6123      	str	r3, [r4, #16]
 800ba34:	2301      	movs	r3, #1
 800ba36:	6163      	str	r3, [r4, #20]
 800ba38:	b002      	add	sp, #8
 800ba3a:	bd70      	pop	{r4, r5, r6, pc}
 800ba3c:	ab01      	add	r3, sp, #4
 800ba3e:	466a      	mov	r2, sp
 800ba40:	f7ff ffc8 	bl	800b9d4 <__swhatbuf_r>
 800ba44:	9900      	ldr	r1, [sp, #0]
 800ba46:	4605      	mov	r5, r0
 800ba48:	4630      	mov	r0, r6
 800ba4a:	f7fe fee5 	bl	800a818 <_malloc_r>
 800ba4e:	b948      	cbnz	r0, 800ba64 <__smakebuf_r+0x44>
 800ba50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba54:	059a      	lsls	r2, r3, #22
 800ba56:	d4ef      	bmi.n	800ba38 <__smakebuf_r+0x18>
 800ba58:	f023 0303 	bic.w	r3, r3, #3
 800ba5c:	f043 0302 	orr.w	r3, r3, #2
 800ba60:	81a3      	strh	r3, [r4, #12]
 800ba62:	e7e3      	b.n	800ba2c <__smakebuf_r+0xc>
 800ba64:	89a3      	ldrh	r3, [r4, #12]
 800ba66:	6020      	str	r0, [r4, #0]
 800ba68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba6c:	81a3      	strh	r3, [r4, #12]
 800ba6e:	9b00      	ldr	r3, [sp, #0]
 800ba70:	6163      	str	r3, [r4, #20]
 800ba72:	9b01      	ldr	r3, [sp, #4]
 800ba74:	6120      	str	r0, [r4, #16]
 800ba76:	b15b      	cbz	r3, 800ba90 <__smakebuf_r+0x70>
 800ba78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba7c:	4630      	mov	r0, r6
 800ba7e:	f000 f81d 	bl	800babc <_isatty_r>
 800ba82:	b128      	cbz	r0, 800ba90 <__smakebuf_r+0x70>
 800ba84:	89a3      	ldrh	r3, [r4, #12]
 800ba86:	f023 0303 	bic.w	r3, r3, #3
 800ba8a:	f043 0301 	orr.w	r3, r3, #1
 800ba8e:	81a3      	strh	r3, [r4, #12]
 800ba90:	89a3      	ldrh	r3, [r4, #12]
 800ba92:	431d      	orrs	r5, r3
 800ba94:	81a5      	strh	r5, [r4, #12]
 800ba96:	e7cf      	b.n	800ba38 <__smakebuf_r+0x18>

0800ba98 <_fstat_r>:
 800ba98:	b538      	push	{r3, r4, r5, lr}
 800ba9a:	4d07      	ldr	r5, [pc, #28]	; (800bab8 <_fstat_r+0x20>)
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	4604      	mov	r4, r0
 800baa0:	4608      	mov	r0, r1
 800baa2:	4611      	mov	r1, r2
 800baa4:	602b      	str	r3, [r5, #0]
 800baa6:	f7f5 fb58 	bl	800115a <_fstat>
 800baaa:	1c43      	adds	r3, r0, #1
 800baac:	d102      	bne.n	800bab4 <_fstat_r+0x1c>
 800baae:	682b      	ldr	r3, [r5, #0]
 800bab0:	b103      	cbz	r3, 800bab4 <_fstat_r+0x1c>
 800bab2:	6023      	str	r3, [r4, #0]
 800bab4:	bd38      	pop	{r3, r4, r5, pc}
 800bab6:	bf00      	nop
 800bab8:	240008b0 	.word	0x240008b0

0800babc <_isatty_r>:
 800babc:	b538      	push	{r3, r4, r5, lr}
 800babe:	4d06      	ldr	r5, [pc, #24]	; (800bad8 <_isatty_r+0x1c>)
 800bac0:	2300      	movs	r3, #0
 800bac2:	4604      	mov	r4, r0
 800bac4:	4608      	mov	r0, r1
 800bac6:	602b      	str	r3, [r5, #0]
 800bac8:	f7f5 fb57 	bl	800117a <_isatty>
 800bacc:	1c43      	adds	r3, r0, #1
 800bace:	d102      	bne.n	800bad6 <_isatty_r+0x1a>
 800bad0:	682b      	ldr	r3, [r5, #0]
 800bad2:	b103      	cbz	r3, 800bad6 <_isatty_r+0x1a>
 800bad4:	6023      	str	r3, [r4, #0]
 800bad6:	bd38      	pop	{r3, r4, r5, pc}
 800bad8:	240008b0 	.word	0x240008b0

0800badc <_init>:
 800badc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bade:	bf00      	nop
 800bae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bae2:	bc08      	pop	{r3}
 800bae4:	469e      	mov	lr, r3
 800bae6:	4770      	bx	lr

0800bae8 <_fini>:
 800bae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baea:	bf00      	nop
 800baec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baee:	bc08      	pop	{r3}
 800baf0:	469e      	mov	lr, r3
 800baf2:	4770      	bx	lr
